{"ast":null,"code":"import _objectSpread from\"C:/Users/dzm13/anita-finance-advisor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createClient}from'@supabase/supabase-js';const supabaseUrl='https://kzregiqxflrvaxytdet.supabase.co';const supabaseAnonKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';export const supabase=createClient(supabaseUrl,supabaseAnonKey);// Local database fallback\nclass LocalDatabase{constructor(){this.dataFile='anita-local-data.json';this.loadData();}loadData(){try{if(typeof window!=='undefined'&&window.localStorage){// Browser environment\nconst data=localStorage.getItem('anita-local-data');if(data){this.data=JSON.parse(data);}else{this.data=this.getDefaultData();this.saveData();}}else{// Node environment - use default data for now\nthis.data=this.getDefaultData();}}catch(error){console.error('Error loading local data:',error);this.data=this.getDefaultData();}}getDefaultData(){return{users:[{id:'00000000-0000-0000-0000-000000000001',username:'default_user',email:'default@anita.com',display_name:'Default User',created_at:new Date().toISOString()}],transactions:[],messages:[{id:'1',user_id:'00000000-0000-0000-0000-000000000001',content:'Hey! Any new expenses or incomes today?',message_type:'bot',created_at:new Date().toISOString()}]};}saveData(){try{if(typeof window!=='undefined'&&window.localStorage){// Browser environment\nlocalStorage.setItem('anita-local-data',JSON.stringify(this.data));}else{// Node environment - data is already in memory\nconsole.log('Data saved to memory (Node environment)');}}catch(error){console.error('Error saving local data:',error);}}// User operations\nasync getOrCreateDefaultUser(){const defaultUser=this.data.users.find(u=>u.username==='default_user');if(defaultUser){return{data:defaultUser,error:null};}const newUser={id:'00000000-0000-0000-0000-000000000001',username:'default_user',email:'default@anita.com',display_name:'Default User',created_at:new Date().toISOString()};this.data.users.push(newUser);this.saveData();return{data:newUser,error:null};}// Transaction operations\nasync insertTransaction(transaction,userId){const newTransaction=_objectSpread(_objectSpread({id:Date.now().toString(),user_id:userId||'00000000-0000-0000-0000-000000000001'},transaction),{},{created_at:new Date().toISOString()});this.data.transactions.push(newTransaction);this.saveData();return{data:[newTransaction],error:null};}async fetchTransactions(userId){const userTransactions=this.data.transactions.filter(t=>t.user_id===(userId||'00000000-0000-0000-0000-000000000001'));return{data:userTransactions,error:null};}// Message operations\nasync insertMessage(userId,content){let messageType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'user';const newMessage={id:Date.now().toString(),user_id:userId||'00000000-0000-0000-0000-000000000001',content,message_type:messageType,created_at:new Date().toISOString()};this.data.messages.push(newMessage);this.saveData();return{data:[newMessage],error:null};}async fetchMessages(userId){const userMessages=this.data.messages.filter(m=>m.user_id===(userId||'00000000-0000-0000-0000-000000000001'));return{data:userMessages,error:null};}}// Create local database instance\nconst localDb=new LocalDatabase();// User management API\nexport const usersApi={// Get or create a default user for demo purposes\nasync getOrCreateDefaultUser(){try{// First try Supabase\nconst{data:existingUser,error:fetchError}=await supabase.from('users').select('*').eq('username','default_user').single();if(existingUser&&!fetchError){return{data:existingUser,error:null};}// If user doesn't exist, create it\nconst{data:newUser,error:createError}=await supabase.from('users').insert([{username:'default_user',email:'default@anita.com',display_name:'Default User'}]).select().single();if(createError){console.log('Supabase user creation failed, using local database');return await localDb.getOrCreateDefaultUser();}return{data:newUser,error:null};}catch(error){console.log('Supabase connection failed, using local database');return await localDb.getOrCreateDefaultUser();}}};// Messages table CRUD operations\nexport const messagesApi={// Insert a new message\nasync insertMessage(userId,content){let messageType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'user';try{const{data,error}=await supabase.from('messages').insert([{user_id:userId||'00000000-0000-0000-0000-000000000001',content,message_type:messageType}]).select();if(error){console.log('Supabase message insertion failed, using local database');return await localDb.insertMessage(userId,content,messageType);}return{data,error:null};}catch(error){console.log('Supabase connection failed, using local database');return await localDb.insertMessage(userId,content,messageType);}},// Fetch all messages for a user\nasync fetchMessages(userId){try{const{data,error}=await supabase.from('messages').select('*').eq('user_id',userId||'00000000-0000-0000-0000-000000000001').order('created_at',{ascending:true});if(error){console.log('Supabase message fetching failed, using local database');return await localDb.fetchMessages(userId);}return{data,error:null};}catch(error){console.log('Supabase connection failed, using local database');return await localDb.fetchMessages(userId);}}};// Transactions table CRUD operations\nexport const transactionsApi={// Insert a new transaction\nasync insertTransaction(transaction,userId){try{console.log('Attempting to insert transaction:',transaction);const defaultUserId=userId||'00000000-0000-0000-0000-000000000001';const insertData={user_id:defaultUserId,type:transaction.type,amount:transaction.amount,category:transaction.category,description:transaction.description,date:transaction.date.toISOString()};const{data,error}=await supabase.from('transactions').insert([insertData]).select();if(error){console.log('Supabase transaction insertion failed, using local database');return await localDb.insertTransaction(transaction,userId);}console.log('Transaction inserted successfully:',data);return{data,error:null};}catch(error){console.log('Supabase connection failed, using local database');return await localDb.insertTransaction(transaction,userId);}},// Fetch all transactions\nasync fetchTransactions(userId){try{const defaultUserId=userId||'00000000-0000-0000-0000-000000000001';const{data,error}=await supabase.from('transactions').select('*').eq('user_id',defaultUserId).order('date',{ascending:false});if(error){console.log('Supabase transaction fetching failed, using local database');return await localDb.fetchTransactions(userId);}return{data,error:null};}catch(error){console.log('Supabase connection failed, using local database');return await localDb.fetchTransactions(userId);}}};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","LocalDatabase","constructor","dataFile","loadData","window","localStorage","data","getItem","JSON","parse","getDefaultData","saveData","error","console","users","id","username","email","display_name","created_at","Date","toISOString","transactions","messages","user_id","content","message_type","setItem","stringify","log","getOrCreateDefaultUser","defaultUser","find","u","newUser","push","insertTransaction","transaction","userId","newTransaction","_objectSpread","now","toString","fetchTransactions","userTransactions","filter","t","insertMessage","messageType","arguments","length","undefined","newMessage","fetchMessages","userMessages","m","localDb","usersApi","existingUser","fetchError","from","select","eq","single","createError","insert","messagesApi","order","ascending","transactionsApi","defaultUserId","insertData","type","amount","category","description","date"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\n// Local database fallback\r\nclass LocalDatabase {\r\n  constructor() {\r\n    this.dataFile = 'anita-local-data.json';\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        // Browser environment\r\n        const data = localStorage.getItem('anita-local-data');\r\n        if (data) {\r\n          this.data = JSON.parse(data);\r\n        } else {\r\n          this.data = this.getDefaultData();\r\n          this.saveData();\r\n        }\r\n      } else {\r\n        // Node environment - use default data for now\r\n        this.data = this.getDefaultData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading local data:', error);\r\n      this.data = this.getDefaultData();\r\n    }\r\n  }\r\n\r\n  getDefaultData() {\r\n    return {\r\n      users: [\r\n        {\r\n          id: '00000000-0000-0000-0000-000000000001',\r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User',\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ],\r\n      transactions: [],\r\n      messages: [\r\n        {\r\n          id: '1',\r\n          user_id: '00000000-0000-0000-0000-000000000001',\r\n          content: 'Hey! Any new expenses or incomes today?',\r\n          message_type: 'bot',\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  saveData() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        // Browser environment\r\n        localStorage.setItem('anita-local-data', JSON.stringify(this.data));\r\n      } else {\r\n        // Node environment - data is already in memory\r\n        console.log('Data saved to memory (Node environment)');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving local data:', error);\r\n    }\r\n  }\r\n\r\n  // User operations\r\n  async getOrCreateDefaultUser() {\r\n    const defaultUser = this.data.users.find(u => u.username === 'default_user');\r\n    if (defaultUser) {\r\n      return { data: defaultUser, error: null };\r\n    }\r\n    \r\n    const newUser = {\r\n      id: '00000000-0000-0000-0000-000000000001',\r\n      username: 'default_user',\r\n      email: 'default@anita.com',\r\n      display_name: 'Default User',\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.users.push(newUser);\r\n    this.saveData();\r\n    return { data: newUser, error: null };\r\n  }\r\n\r\n  // Transaction operations\r\n  async insertTransaction(transaction, userId) {\r\n    const newTransaction = {\r\n      id: Date.now().toString(),\r\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n      ...transaction,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.transactions.push(newTransaction);\r\n    this.saveData();\r\n    return { data: [newTransaction], error: null };\r\n  }\r\n\r\n  async fetchTransactions(userId) {\r\n    const userTransactions = this.data.transactions.filter(\r\n      t => t.user_id === (userId || '00000000-0000-0000-0000-000000000001')\r\n    );\r\n    return { data: userTransactions, error: null };\r\n  }\r\n\r\n  // Message operations\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n      content,\r\n      message_type: messageType,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.messages.push(newMessage);\r\n    this.saveData();\r\n    return { data: [newMessage], error: null };\r\n  }\r\n\r\n  async fetchMessages(userId) {\r\n    const userMessages = this.data.messages.filter(\r\n      m => m.user_id === (userId || '00000000-0000-0000-0000-000000000001')\r\n    );\r\n    return { data: userMessages, error: null };\r\n  }\r\n}\r\n\r\n// Create local database instance\r\nconst localDb = new LocalDatabase();\r\n\r\n// User management API\r\nexport const usersApi = {\r\n  // Get or create a default user for demo purposes\r\n  async getOrCreateDefaultUser() {\r\n    try {\r\n      // First try Supabase\r\n      const { data: existingUser, error: fetchError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', 'default_user')\r\n        .single()\r\n      \r\n      if (existingUser && !fetchError) {\r\n        return { data: existingUser, error: null }\r\n      }\r\n      \r\n      // If user doesn't exist, create it\r\n      const { data: newUser, error: createError } = await supabase\r\n        .from('users')\r\n        .insert([{\r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User'\r\n        }])\r\n        .select()\r\n        .single()\r\n      \r\n      if (createError) {\r\n        console.log('Supabase user creation failed, using local database');\r\n        return await localDb.getOrCreateDefaultUser();\r\n      }\r\n      return { data: newUser, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.getOrCreateDefaultUser();\r\n    }\r\n  }\r\n}\r\n\r\n// Messages table CRUD operations\r\nexport const messagesApi = {\r\n  // Insert a new message\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .insert([\r\n          { \r\n            user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n            content,\r\n            message_type: messageType\r\n          }\r\n        ])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.log('Supabase message insertion failed, using local database');\r\n        return await localDb.insertMessage(userId, content, messageType);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.insertMessage(userId, content, messageType);\r\n    }\r\n  },\r\n\r\n  // Fetch all messages for a user\r\n  async fetchMessages(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .eq('user_id', userId || '00000000-0000-0000-0000-000000000001')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) {\r\n        console.log('Supabase message fetching failed, using local database');\r\n        return await localDb.fetchMessages(userId);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.fetchMessages(userId);\r\n    }\r\n  }\r\n}\r\n\r\n// Transactions table CRUD operations\r\nexport const transactionsApi = {\r\n  // Insert a new transaction\r\n  async insertTransaction(transaction, userId) {\r\n    try {\r\n      console.log('Attempting to insert transaction:', transaction);\r\n      \r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\r\n      \r\n      const insertData = {\r\n        user_id: defaultUserId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description,\r\n        date: transaction.date.toISOString()\r\n      };\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .insert([insertData])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.log('Supabase transaction insertion failed, using local database');\r\n        return await localDb.insertTransaction(transaction, userId);\r\n      }\r\n      console.log('Transaction inserted successfully:', data);\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.insertTransaction(transaction, userId);\r\n    }\r\n  },\r\n\r\n  // Fetch all transactions\r\n  async fetchTransactions(userId) {\r\n    try {\r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .eq('user_id', defaultUserId)\r\n        .order('date', { ascending: false })\r\n      \r\n      if (error) {\r\n        console.log('Supabase transaction fetching failed, using local database');\r\n        return await localDb.fetchTransactions(userId);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.fetchTransactions(userId);\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}