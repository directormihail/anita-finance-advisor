{"ast":null,"code":"var _SupabaseService;\n// ANITA Finance Advisor - Supabase Service using MCP\n// This service handles database operations through MCP calls\n\nimport { mcpSyncService } from './mcpSync';\n// Supabase service using MCP\nexport class SupabaseService {\n  constructor() {\n    this.currentUserId = 'default-user';\n  }\n  static getInstance() {\n    if (!SupabaseService.instance) {\n      SupabaseService.instance = new SupabaseService();\n    }\n    return SupabaseService.instance;\n  }\n\n  // This will be called by the MCP assistant to save data\n  async saveTransaction(transaction) {\n    try {\n      // For now, we'll use a simple approach\n      // The MCP assistant will handle the actual database operations\n      console.log('üîÑ Transaction ready for Supabase:', transaction);\n\n      // Store in localStorage as backup\n      const existing = this.getTransactionsFromStorage();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n\n      // Add to MCP sync queue\n      mcpSyncService.addToSyncQueue('transaction', transaction);\n    } catch (error) {\n      console.error('‚ùå Error saving transaction:', error);\n    }\n  }\n  async saveMessage(message) {\n    try {\n      console.log('üîÑ Message ready for Supabase:', message.text);\n\n      // Store in localStorage as backup\n      const existing = this.getMessagesFromStorage();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n\n      // Add to MCP sync queue\n      mcpSyncService.addToSyncQueue('message', message);\n    } catch (error) {\n      console.error('‚ùå Error saving message:', error);\n    }\n  }\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n  notifyMCP(type, data) {\n    // This is a placeholder for MCP communication\n    // In a real implementation, this would trigger MCP calls\n    console.log(`üì° MCP notification: ${type}`, data);\n\n    // For now, we'll just log that data is ready for MCP\n    if (type === 'transaction') {\n      console.log('üíæ Transaction ready for MCP Supabase save:', {\n        user_id: this.currentUserId,\n        type: data.type,\n        amount: data.amount,\n        category: data.category,\n        description: data.description\n      });\n    } else if (type === 'message') {\n      console.log('üíæ Message ready for MCP Supabase save:', {\n        user_id: this.currentUserId,\n        content: data.text,\n        message_type: data.sender === 'anita' ? 'bot' : 'user'\n      });\n    }\n  }\n}\n\n// Export singleton instance\n_SupabaseService = SupabaseService;\nSupabaseService.instance = void 0;\nexport const supabaseService = SupabaseService.getInstance();","map":{"version":3,"names":["mcpSyncService","SupabaseService","constructor","currentUserId","getInstance","instance","saveTransaction","transaction","console","log","existing","getTransactionsFromStorage","updated","localStorage","setItem","JSON","stringify","addToSyncQueue","error","saveMessage","message","text","getMessagesFromStorage","saved","getItem","parsed","parse","map","t","date","Date","m","timestamp","notifyMCP","type","data","user_id","amount","category","description","content","message_type","sender","_SupabaseService","supabaseService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabaseService.ts"],"sourcesContent":["// ANITA Finance Advisor - Supabase Service using MCP\r\n// This service handles database operations through MCP calls\r\n\r\nimport { mcpSyncService } from './mcpSync';\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\n// Supabase service using MCP\r\nexport class SupabaseService {\r\n  private static instance: SupabaseService;\r\n  private currentUserId: string = 'default-user';\r\n\r\n  static getInstance(): SupabaseService {\r\n    if (!SupabaseService.instance) {\r\n      SupabaseService.instance = new SupabaseService();\r\n    }\r\n    return SupabaseService.instance;\r\n  }\r\n\r\n  // This will be called by the MCP assistant to save data\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      // For now, we'll use a simple approach\r\n      // The MCP assistant will handle the actual database operations\r\n      console.log('üîÑ Transaction ready for Supabase:', transaction);\r\n      \r\n      // Store in localStorage as backup\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      \r\n      // Add to MCP sync queue\r\n      mcpSyncService.addToSyncQueue('transaction', transaction);\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Message ready for Supabase:', message.text);\r\n      \r\n      // Store in localStorage as backup\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      \r\n      // Add to MCP sync queue\r\n      mcpSyncService.addToSyncQueue('message', message);\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private notifyMCP(type: 'transaction' | 'message', data: any): void {\r\n    // This is a placeholder for MCP communication\r\n    // In a real implementation, this would trigger MCP calls\r\n    console.log(`üì° MCP notification: ${type}`, data);\r\n    \r\n    // For now, we'll just log that data is ready for MCP\r\n    if (type === 'transaction') {\r\n      console.log('üíæ Transaction ready for MCP Supabase save:', {\r\n        user_id: this.currentUserId,\r\n        type: data.type,\r\n        amount: data.amount,\r\n        category: data.category,\r\n        description: data.description\r\n      });\r\n    } else if (type === 'message') {\r\n      console.log('üíæ Message ready for MCP Supabase save:', {\r\n        user_id: this.currentUserId,\r\n        content: data.text,\r\n        message_type: data.sender === 'anita' ? 'bot' : 'user'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const supabaseService = SupabaseService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}