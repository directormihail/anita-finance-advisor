{"ast":null,"code":"var _SimpleAnitaService;\n// ANITA Finance Advisor - Simple Service\n// This service uses a single table with account_id, message, transaction, and date/time\n\nexport class SimpleAnitaService {\n  constructor() {\n    this.accountId = 'default-user';\n  }\n  static getInstance() {\n    if (!SimpleAnitaService.instance) {\n      SimpleAnitaService.instance = new SimpleAnitaService();\n    }\n    return SimpleAnitaService.instance;\n  }\n\n  // Save message to both localStorage and Supabase\n  async saveMessage(message) {\n    try {\n      var _message$transaction, _message$transaction2, _message$transaction3, _message$transaction4;\n      console.log('🔄 Saving message:', message.text);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getMessagesFromStorage();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n\n      // Prepare data for Supabase\n      const anitaData = {\n        account_id: this.accountId,\n        message: message.text,\n        transaction_type: ((_message$transaction = message.transaction) === null || _message$transaction === void 0 ? void 0 : _message$transaction.type) || null,\n        transaction_amount: ((_message$transaction2 = message.transaction) === null || _message$transaction2 === void 0 ? void 0 : _message$transaction2.amount) || null,\n        transaction_category: ((_message$transaction3 = message.transaction) === null || _message$transaction3 === void 0 ? void 0 : _message$transaction3.category) || null,\n        transaction_description: ((_message$transaction4 = message.transaction) === null || _message$transaction4 === void 0 ? void 0 : _message$transaction4.description) || null,\n        amount: message.transaction ? message.transaction.type === 'income' ? `+${message.transaction.amount}` : `-${message.transaction.amount}` : null\n      };\n      console.log('💾 Message data for Supabase:', anitaData);\n\n      // Store in queue for MCP processing AND trigger immediate upload\n      this.addToSupabaseQueue(anitaData);\n      this.uploadToSupabase(anitaData);\n    } catch (error) {\n      console.error('❌ Error saving message:', error);\n    }\n  }\n\n  // Save transaction to both localStorage and Supabase\n  async saveTransaction(transaction) {\n    try {\n      console.log('🔄 Saving transaction:', transaction);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getTransactionsFromStorage();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n\n      // Prepare data for Supabase\n      const anitaData = {\n        account_id: this.accountId,\n        message: `${transaction.type} ${transaction.amount} - ${transaction.description}`,\n        transaction_type: transaction.type,\n        transaction_amount: transaction.amount,\n        transaction_category: transaction.category,\n        transaction_description: transaction.description,\n        amount: transaction.type === 'income' ? `+${transaction.amount}` : `-${transaction.amount}`\n      };\n      console.log('💾 Transaction data for Supabase:', anitaData);\n\n      // Store in queue for MCP processing AND trigger immediate upload\n      this.addToSupabaseQueue(anitaData);\n      this.uploadToSupabase(anitaData);\n    } catch (error) {\n      console.error('❌ Error saving transaction:', error);\n    }\n  }\n\n  // Get messages from localStorage\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('❌ Error loading messages:', error);\n      return [];\n    }\n  }\n\n  // Get transactions from localStorage\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('❌ Error loading transactions:', error);\n      return [];\n    }\n  }\n\n  // Add to Supabase queue\n  addToSupabaseQueue(data) {\n    const queueItem = {\n      ...data,\n      id: Date.now().toString(),\n      timestamp: Date.now()\n    };\n    const existing = this.getSupabaseQueue();\n    existing.push(queueItem);\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(existing));\n    console.log('📦 Added to Supabase queue:', queueItem);\n\n    // Show visual indicator\n    this.showSyncIndicator();\n  }\n  getSupabaseQueue() {\n    try {\n      const saved = localStorage.getItem('anita-supabase-queue');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('❌ Error loading Supabase queue:', error);\n      return [];\n    }\n  }\n  showSyncIndicator() {\n    // Create visual indicator\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-sync-indicator';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = '📡 Syncing to database...';\n\n    // Remove existing indicator\n    const existing = document.getElementById('anita-sync-indicator');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n\n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 3000);\n  }\n\n  // Get queued data for MCP processing\n  getQueuedData() {\n    return this.getSupabaseQueue();\n  }\n\n  // Clear processed data from queue\n  clearProcessedData(processedIds) {\n    const queue = this.getSupabaseQueue();\n    const remaining = queue.filter(item => !processedIds.includes(item.id));\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(remaining));\n    console.log('🧹 Cleared processed data from queue');\n  }\n\n  // Upload data directly to Supabase via MCP\n  async uploadToSupabase(data) {\n    try {\n      console.log('📡 Uploading to Supabase via MCP:', data);\n\n      // This will be handled by the MCP assistant\n      // The data is prepared and ready for insertion\n      console.log('✅ Data prepared for Supabase upload:', {\n        account_id: data.account_id,\n        message: data.message,\n        transaction_type: data.transaction_type,\n        transaction_amount: data.transaction_amount,\n        transaction_category: data.transaction_category,\n        transaction_description: data.transaction_description,\n        amount: data.amount\n      });\n\n      // Show success indicator\n      this.showUploadSuccessIndicator();\n    } catch (error) {\n      console.error('❌ Error uploading to Supabase:', error);\n      this.showUploadErrorIndicator();\n    }\n  }\n  showUploadSuccessIndicator() {\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-upload-success';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = '✅ Uploaded to database!';\n    const existing = document.getElementById('anita-upload-success');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 2000);\n  }\n  showUploadErrorIndicator() {\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-upload-error';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #ef4444;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = '❌ Upload failed!';\n    const existing = document.getElementById('anita-upload-error');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 3000);\n  }\n}\n\n// Export singleton instance\n_SimpleAnitaService = SimpleAnitaService;\nSimpleAnitaService.instance = void 0;\nexport const simpleAnitaService = SimpleAnitaService.getInstance();","map":{"version":3,"names":["SimpleAnitaService","constructor","accountId","getInstance","instance","saveMessage","message","_message$transaction","_message$transaction2","_message$transaction3","_message$transaction4","console","log","text","existing","getMessagesFromStorage","updated","localStorage","setItem","JSON","stringify","anitaData","account_id","transaction_type","transaction","type","transaction_amount","amount","transaction_category","category","transaction_description","description","addToSupabaseQueue","uploadToSupabase","error","saveTransaction","getTransactionsFromStorage","saved","getItem","parsed","parse","map","m","timestamp","Date","t","date","data","queueItem","id","now","toString","getSupabaseQueue","push","showSyncIndicator","indicator","document","createElement","style","cssText","textContent","getElementById","remove","body","appendChild","setTimeout","parentNode","removeChild","getQueuedData","clearProcessedData","processedIds","queue","remaining","filter","item","includes","showUploadSuccessIndicator","showUploadErrorIndicator","_SimpleAnitaService","simpleAnitaService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/simpleAnitaService.ts"],"sourcesContent":["// ANITA Finance Advisor - Simple Service\r\n// This service uses a single table with account_id, message, transaction, and date/time\r\n\r\nexport interface AnitaData {\r\n  id?: string;\r\n  account_id: string;\r\n  message: string;\r\n  transaction_type?: 'income' | 'expense' | null;\r\n  transaction_amount?: number | null;\r\n  transaction_category?: string | null;\r\n  transaction_description?: string | null;\r\n  amount?: string | null; // New field with plus/minus signs\r\n  created_at?: string;\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport class SimpleAnitaService {\r\n  private static instance: SimpleAnitaService;\r\n  private accountId = 'default-user';\r\n\r\n  static getInstance(): SimpleAnitaService {\r\n    if (!SimpleAnitaService.instance) {\r\n      SimpleAnitaService.instance = new SimpleAnitaService();\r\n    }\r\n    return SimpleAnitaService.instance;\r\n  }\r\n\r\n  // Save message to both localStorage and Supabase\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('🔄 Saving message:', message.text);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: message.text,\r\n        transaction_type: message.transaction?.type || null,\r\n        transaction_amount: message.transaction?.amount || null,\r\n        transaction_category: message.transaction?.category || null,\r\n        transaction_description: message.transaction?.description || null,\r\n        amount: message.transaction ? \r\n          (message.transaction.type === 'income' ? `+${message.transaction.amount}` : `-${message.transaction.amount}`) \r\n          : null\r\n      };\r\n      \r\n      console.log('💾 Message data for Supabase:', anitaData);\r\n      \r\n      // Store in queue for MCP processing AND trigger immediate upload\r\n      this.addToSupabaseQueue(anitaData);\r\n      this.uploadToSupabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  // Save transaction to both localStorage and Supabase\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      console.log('🔄 Saving transaction:', transaction);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: `${transaction.type} ${transaction.amount} - ${transaction.description}`,\r\n        transaction_type: transaction.type,\r\n        transaction_amount: transaction.amount,\r\n        transaction_category: transaction.category,\r\n        transaction_description: transaction.description,\r\n        amount: transaction.type === 'income' ? `+${transaction.amount}` : `-${transaction.amount}`\r\n      };\r\n      \r\n      console.log('💾 Transaction data for Supabase:', anitaData);\r\n      \r\n      // Store in queue for MCP processing AND trigger immediate upload\r\n      this.addToSupabaseQueue(anitaData);\r\n      this.uploadToSupabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  // Get messages from localStorage\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get transactions from localStorage\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add to Supabase queue\r\n  private addToSupabaseQueue(data: AnitaData) {\r\n    const queueItem = {\r\n      ...data,\r\n      id: Date.now().toString(),\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    const existing = this.getSupabaseQueue();\r\n    existing.push(queueItem);\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(existing));\r\n    \r\n    console.log('📦 Added to Supabase queue:', queueItem);\r\n    \r\n    // Show visual indicator\r\n    this.showSyncIndicator();\r\n  }\r\n\r\n  private getSupabaseQueue(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-supabase-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading Supabase queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private showSyncIndicator() {\r\n    // Create visual indicator\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-sync-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '📡 Syncing to database...';\r\n    \r\n    // Remove existing indicator\r\n    const existing = document.getElementById('anita-sync-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  // Get queued data for MCP processing\r\n  getQueuedData(): any[] {\r\n    return this.getSupabaseQueue();\r\n  }\r\n\r\n  // Clear processed data from queue\r\n  clearProcessedData(processedIds: string[]) {\r\n    const queue = this.getSupabaseQueue();\r\n    const remaining = queue.filter(item => !processedIds.includes(item.id));\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(remaining));\r\n    console.log('🧹 Cleared processed data from queue');\r\n  }\r\n\r\n  // Upload data directly to Supabase via MCP\r\n  private async uploadToSupabase(data: AnitaData) {\r\n    try {\r\n      console.log('📡 Uploading to Supabase via MCP:', data);\r\n      \r\n      // This will be handled by the MCP assistant\r\n      // The data is prepared and ready for insertion\r\n      console.log('✅ Data prepared for Supabase upload:', {\r\n        account_id: data.account_id,\r\n        message: data.message,\r\n        transaction_type: data.transaction_type,\r\n        transaction_amount: data.transaction_amount,\r\n        transaction_category: data.transaction_category,\r\n        transaction_description: data.transaction_description,\r\n        amount: data.amount\r\n      });\r\n      \r\n      // Show success indicator\r\n      this.showUploadSuccessIndicator();\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error uploading to Supabase:', error);\r\n      this.showUploadErrorIndicator();\r\n    }\r\n  }\r\n\r\n  private showUploadSuccessIndicator() {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-upload-success';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '✅ Uploaded to database!';\r\n    \r\n    const existing = document.getElementById('anita-upload-success');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  private showUploadErrorIndicator() {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-upload-error';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #ef4444;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '❌ Upload failed!';\r\n    \r\n    const existing = document.getElementById('anita-upload-error');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const simpleAnitaService = SimpleAnitaService.getInstance();\r\n"],"mappings":";AAAA;AACA;;AAoCA,OAAO,MAAMA,kBAAkB,CAAC;EAAAC,YAAA;IAAA,KAEtBC,SAAS,GAAG,cAAc;EAAA;EAElC,OAAOC,WAAWA,CAAA,EAAuB;IACvC,IAAI,CAACH,kBAAkB,CAACI,QAAQ,EAAE;MAChCJ,kBAAkB,CAACI,QAAQ,GAAG,IAAIJ,kBAAkB,CAAC,CAAC;IACxD;IACA,OAAOA,kBAAkB,CAACI,QAAQ;EACpC;;EAEA;EACA,MAAMC,WAAWA,CAACC,OAAgB,EAAiB;IACjD,IAAI;MAAA,IAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,OAAO,CAACO,IAAI,CAAC;;MAE/C;MACA,MAAMC,QAAQ,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAC9C,MAAMC,OAAO,GAAG,CAAC,GAAGF,QAAQ,EAAER,OAAO,CAAC;MACtCW,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;;MAE/D;MACA,MAAMK,SAAoB,GAAG;QAC3BC,UAAU,EAAE,IAAI,CAACpB,SAAS;QAC1BI,OAAO,EAAEA,OAAO,CAACO,IAAI;QACrBU,gBAAgB,EAAE,EAAAhB,oBAAA,GAAAD,OAAO,CAACkB,WAAW,cAAAjB,oBAAA,uBAAnBA,oBAAA,CAAqBkB,IAAI,KAAI,IAAI;QACnDC,kBAAkB,EAAE,EAAAlB,qBAAA,GAAAF,OAAO,CAACkB,WAAW,cAAAhB,qBAAA,uBAAnBA,qBAAA,CAAqBmB,MAAM,KAAI,IAAI;QACvDC,oBAAoB,EAAE,EAAAnB,qBAAA,GAAAH,OAAO,CAACkB,WAAW,cAAAf,qBAAA,uBAAnBA,qBAAA,CAAqBoB,QAAQ,KAAI,IAAI;QAC3DC,uBAAuB,EAAE,EAAApB,qBAAA,GAAAJ,OAAO,CAACkB,WAAW,cAAAd,qBAAA,uBAAnBA,qBAAA,CAAqBqB,WAAW,KAAI,IAAI;QACjEJ,MAAM,EAAErB,OAAO,CAACkB,WAAW,GACxBlB,OAAO,CAACkB,WAAW,CAACC,IAAI,KAAK,QAAQ,GAAG,IAAInB,OAAO,CAACkB,WAAW,CAACG,MAAM,EAAE,GAAG,IAAIrB,OAAO,CAACkB,WAAW,CAACG,MAAM,EAAE,GAC1G;MACN,CAAC;MAEDhB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAES,SAAS,CAAC;;MAEvD;MACA,IAAI,CAACW,kBAAkB,CAACX,SAAS,CAAC;MAClC,IAAI,CAACY,gBAAgB,CAACZ,SAAS,CAAC;IAElC,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF;;EAEA;EACA,MAAMC,eAAeA,CAACX,WAAwB,EAAiB;IAC7D,IAAI;MACFb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,WAAW,CAAC;;MAElD;MACA,MAAMV,QAAQ,GAAG,IAAI,CAACsB,0BAA0B,CAAC,CAAC;MAClD,MAAMpB,OAAO,GAAG,CAAC,GAAGF,QAAQ,EAAEU,WAAW,CAAC;MAC1CP,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;;MAEnE;MACA,MAAMK,SAAoB,GAAG;QAC3BC,UAAU,EAAE,IAAI,CAACpB,SAAS;QAC1BI,OAAO,EAAE,GAAGkB,WAAW,CAACC,IAAI,IAAID,WAAW,CAACG,MAAM,MAAMH,WAAW,CAACO,WAAW,EAAE;QACjFR,gBAAgB,EAAEC,WAAW,CAACC,IAAI;QAClCC,kBAAkB,EAAEF,WAAW,CAACG,MAAM;QACtCC,oBAAoB,EAAEJ,WAAW,CAACK,QAAQ;QAC1CC,uBAAuB,EAAEN,WAAW,CAACO,WAAW;QAChDJ,MAAM,EAAEH,WAAW,CAACC,IAAI,KAAK,QAAQ,GAAG,IAAID,WAAW,CAACG,MAAM,EAAE,GAAG,IAAIH,WAAW,CAACG,MAAM;MAC3F,CAAC;MAEDhB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAES,SAAS,CAAC;;MAE3D;MACA,IAAI,CAACW,kBAAkB,CAACX,SAAS,CAAC;MAClC,IAAI,CAACY,gBAAgB,CAACZ,SAAS,CAAC;IAElC,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;;EAEA;EACAnB,sBAAsBA,CAAA,EAAc;IAClC,IAAI;MACF,MAAMsB,KAAK,GAAGpB,YAAY,CAACqB,OAAO,CAAC,gBAAgB,CAAC;MACpD,IAAID,KAAK,EAAE;QACT,MAAME,MAAM,GAAGpB,IAAI,CAACqB,KAAK,CAACH,KAAK,CAAC;QAChC,OAAOE,MAAM,CAACE,GAAG,CAAEC,CAAM,KAAM;UAC7B,GAAGA,CAAC;UACJC,SAAS,EAAE,IAAIC,IAAI,CAACF,CAAC,CAACC,SAAS;QACjC,CAAC,CAAC,CAAC;MACL;MACA,OAAO,EAAE;IACX,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF;;EAEA;EACAE,0BAA0BA,CAAA,EAAkB;IAC1C,IAAI;MACF,MAAMC,KAAK,GAAGpB,YAAY,CAACqB,OAAO,CAAC,oBAAoB,CAAC;MACxD,IAAID,KAAK,EAAE;QACT,MAAME,MAAM,GAAGpB,IAAI,CAACqB,KAAK,CAACH,KAAK,CAAC;QAChC,OAAOE,MAAM,CAACE,GAAG,CAAEI,CAAM,KAAM;UAC7B,GAAGA,CAAC;UACJC,IAAI,EAAE,IAAIF,IAAI,CAACC,CAAC,CAACC,IAAI;QACvB,CAAC,CAAC,CAAC;MACL;MACA,OAAO,EAAE;IACX,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACX;EACF;;EAEA;EACQF,kBAAkBA,CAACe,IAAe,EAAE;IAC1C,MAAMC,SAAS,GAAG;MAChB,GAAGD,IAAI;MACPE,EAAE,EAAEL,IAAI,CAACM,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBR,SAAS,EAAEC,IAAI,CAACM,GAAG,CAAC;IACtB,CAAC;IAED,MAAMpC,QAAQ,GAAG,IAAI,CAACsC,gBAAgB,CAAC,CAAC;IACxCtC,QAAQ,CAACuC,IAAI,CAACL,SAAS,CAAC;IACxB/B,YAAY,CAACC,OAAO,CAAC,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;IAEtEH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEoC,SAAS,CAAC;;IAErD;IACA,IAAI,CAACM,iBAAiB,CAAC,CAAC;EAC1B;EAEQF,gBAAgBA,CAAA,EAAU;IAChC,IAAI;MACF,MAAMf,KAAK,GAAGpB,YAAY,CAACqB,OAAO,CAAC,sBAAsB,CAAC;MAC1D,OAAOD,KAAK,GAAGlB,IAAI,CAACqB,KAAK,CAACH,KAAK,CAAC,GAAG,EAAE;IACvC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,EAAE;IACX;EACF;EAEQoB,iBAAiBA,CAAA,EAAG;IAC1B;IACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC/CF,SAAS,CAACN,EAAE,GAAG,sBAAsB;IACrCM,SAAS,CAACG,KAAK,CAACC,OAAO,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDJ,SAAS,CAACK,WAAW,GAAG,2BAA2B;;IAEnD;IACA,MAAM9C,QAAQ,GAAG0C,QAAQ,CAACK,cAAc,CAAC,sBAAsB,CAAC;IAChE,IAAI/C,QAAQ,EAAEA,QAAQ,CAACgD,MAAM,CAAC,CAAC;IAE/BN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,SAAS,CAAC;;IAEpC;IACAU,UAAU,CAAC,MAAM;MACf,IAAIV,SAAS,CAACW,UAAU,EAAE;QACxBX,SAAS,CAACW,UAAU,CAACC,WAAW,CAACZ,SAAS,CAAC;MAC7C;IACF,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;EACAa,aAAaA,CAAA,EAAU;IACrB,OAAO,IAAI,CAAChB,gBAAgB,CAAC,CAAC;EAChC;;EAEA;EACAiB,kBAAkBA,CAACC,YAAsB,EAAE;IACzC,MAAMC,KAAK,GAAG,IAAI,CAACnB,gBAAgB,CAAC,CAAC;IACrC,MAAMoB,SAAS,GAAGD,KAAK,CAACE,MAAM,CAACC,IAAI,IAAI,CAACJ,YAAY,CAACK,QAAQ,CAACD,IAAI,CAACzB,EAAE,CAAC,CAAC;IACvEhC,YAAY,CAACC,OAAO,CAAC,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAACoD,SAAS,CAAC,CAAC;IACvE7D,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACrD;;EAEA;EACA,MAAcqB,gBAAgBA,CAACc,IAAe,EAAE;IAC9C,IAAI;MACFpC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEmC,IAAI,CAAC;;MAEtD;MACA;MACApC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE;QAClDU,UAAU,EAAEyB,IAAI,CAACzB,UAAU;QAC3BhB,OAAO,EAAEyC,IAAI,CAACzC,OAAO;QACrBiB,gBAAgB,EAAEwB,IAAI,CAACxB,gBAAgB;QACvCG,kBAAkB,EAAEqB,IAAI,CAACrB,kBAAkB;QAC3CE,oBAAoB,EAAEmB,IAAI,CAACnB,oBAAoB;QAC/CE,uBAAuB,EAAEiB,IAAI,CAACjB,uBAAuB;QACrDH,MAAM,EAAEoB,IAAI,CAACpB;MACf,CAAC,CAAC;;MAEF;MACA,IAAI,CAACiD,0BAA0B,CAAC,CAAC;IAEnC,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,IAAI,CAAC2C,wBAAwB,CAAC,CAAC;IACjC;EACF;EAEQD,0BAA0BA,CAAA,EAAG;IACnC,MAAMrB,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC/CF,SAAS,CAACN,EAAE,GAAG,sBAAsB;IACrCM,SAAS,CAACG,KAAK,CAACC,OAAO,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDJ,SAAS,CAACK,WAAW,GAAG,yBAAyB;IAEjD,MAAM9C,QAAQ,GAAG0C,QAAQ,CAACK,cAAc,CAAC,sBAAsB,CAAC;IAChE,IAAI/C,QAAQ,EAAEA,QAAQ,CAACgD,MAAM,CAAC,CAAC;IAE/BN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,SAAS,CAAC;IAEpCU,UAAU,CAAC,MAAM;MACf,IAAIV,SAAS,CAACW,UAAU,EAAE;QACxBX,SAAS,CAACW,UAAU,CAACC,WAAW,CAACZ,SAAS,CAAC;MAC7C;IACF,CAAC,EAAE,IAAI,CAAC;EACV;EAEQsB,wBAAwBA,CAAA,EAAG;IACjC,MAAMtB,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC/CF,SAAS,CAACN,EAAE,GAAG,oBAAoB;IACnCM,SAAS,CAACG,KAAK,CAACC,OAAO,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDJ,SAAS,CAACK,WAAW,GAAG,kBAAkB;IAE1C,MAAM9C,QAAQ,GAAG0C,QAAQ,CAACK,cAAc,CAAC,oBAAoB,CAAC;IAC9D,IAAI/C,QAAQ,EAAEA,QAAQ,CAACgD,MAAM,CAAC,CAAC;IAE/BN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,SAAS,CAAC;IAEpCU,UAAU,CAAC,MAAM;MACf,IAAIV,SAAS,CAACW,UAAU,EAAE;QACxBX,SAAS,CAACW,UAAU,CAACC,WAAW,CAACZ,SAAS,CAAC;MAC7C;IACF,CAAC,EAAE,IAAI,CAAC;EACV;AACF;;AAEA;AAAAuB,mBAAA,GA/Qa9E,kBAAkB;AAAlBA,kBAAkB,CACdI,QAAQ;AA+QzB,OAAO,MAAM2E,kBAAkB,GAAG/E,kBAAkB,CAACG,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}