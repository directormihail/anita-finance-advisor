{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\components\\\\SupabaseTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { transactionsApi } from '../supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SupabaseTest = () => {\n  _s();\n  const [testResult, setTestResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  const testConnection = async () => {\n    setLoading(true);\n    setTestResult('Testing Supabase connection...');\n    try {\n      // Test 1: Try to fetch transactions\n      const {\n        data: fetchData,\n        error: fetchError\n      } = await transactionsApi.fetchTransactions();\n      if (fetchError) {\n        setTestResult(`❌ Fetch Error: ${JSON.stringify(fetchError)}`);\n        console.error('Fetch error:', fetchError);\n      } else {\n        setTestResult(`✅ Fetch Success: Found ${(fetchData === null || fetchData === void 0 ? void 0 : fetchData.length) || 0} transactions`);\n        console.log('Fetch data:', fetchData);\n      }\n\n      // Test 2: Try to insert a test transaction\n      const testTransaction = {\n        id: Date.now().toString(),\n        type: 'expense',\n        amount: 10.50,\n        category: 'Test',\n        description: 'Test transaction from app',\n        date: new Date()\n      };\n      console.log('Attempting to insert test transaction:', testTransaction);\n      const {\n        data: insertData,\n        error: insertError\n      } = await transactionsApi.insertTransaction(testTransaction);\n      if (insertError) {\n        setTestResult(prev => prev + `\\n❌ Insert Error: ${JSON.stringify(insertError)}`);\n        console.error('Insert error:', insertError);\n      } else {\n        setTestResult(prev => {\n          var _insertData$;\n          return prev + `\\n✅ Insert Success: Transaction saved with ID ${insertData === null || insertData === void 0 ? void 0 : (_insertData$ = insertData[0]) === null || _insertData$ === void 0 ? void 0 : _insertData$.id}`;\n        });\n        console.log('Insert data:', insertData);\n      }\n    } catch (error) {\n      setTestResult(`❌ Connection Error: ${error}`);\n      console.error('Connection error:', error);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      margin: '10px',\n      borderRadius: '8px',\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      color: 'white',\n      boxShadow: '0 4px 15px rgba(0,0,0,0.2)',\n      border: '1px solid #fff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '15px',\n        flexWrap: 'wrap'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          minWidth: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            margin: '0 0 5px 0',\n            fontSize: '18px',\n            fontWeight: 'bold'\n          },\n          children: \"\\uD83D\\uDD27 Supabase Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0 0 10px 0',\n            fontSize: '14px',\n            opacity: 0.9\n          },\n          children: \"Test database connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: testConnection,\n        disabled: loading,\n        style: {\n          padding: '10px 20px',\n          fontSize: '14px',\n          fontWeight: 'bold',\n          backgroundColor: loading ? '#ccc' : '#ff6b6b',\n          color: 'white',\n          border: 'none',\n          borderRadius: '6px',\n          cursor: loading ? 'not-allowed' : 'pointer',\n          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\n          transition: 'all 0.3s ease',\n          whiteSpace: 'nowrap'\n        },\n        children: loading ? '🔄 Testing...' : '🚀 Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), testResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0,0,0,0.2)',\n        padding: '10px',\n        borderRadius: '6px',\n        marginTop: '10px',\n        whiteSpace: 'pre-line',\n        fontFamily: 'monospace',\n        fontSize: '12px',\n        lineHeight: '1.3',\n        maxHeight: '150px',\n        overflowY: 'auto'\n      },\n      children: testResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SupabaseTest, \"u7Dkyx5gq3ljEgA7UWq3W0Ms3ak=\");\n_c = SupabaseTest;\nexport default SupabaseTest;\nvar _c;\n$RefreshReg$(_c, \"SupabaseTest\");","map":{"version":3,"names":["React","useState","transactionsApi","jsxDEV","_jsxDEV","SupabaseTest","_s","testResult","setTestResult","loading","setLoading","testConnection","data","fetchData","error","fetchError","fetchTransactions","JSON","stringify","console","length","log","testTransaction","id","Date","now","toString","type","amount","category","description","date","insertData","insertError","insertTransaction","prev","_insertData$","style","padding","margin","borderRadius","background","color","boxShadow","border","children","display","alignItems","gap","flexWrap","flex","minWidth","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","opacity","onClick","disabled","backgroundColor","cursor","transition","whiteSpace","marginTop","fontFamily","lineHeight","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/SupabaseTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { transactionsApi } from '../supabase';\r\n\r\nconst SupabaseTest: React.FC = () => {\r\n  const [testResult, setTestResult] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const testConnection = async () => {\r\n    setLoading(true);\r\n    setTestResult('Testing Supabase connection...');\r\n    \r\n    try {\r\n      // Test 1: Try to fetch transactions\r\n      const { data: fetchData, error: fetchError } = await transactionsApi.fetchTransactions();\r\n      \r\n      if (fetchError) {\r\n        setTestResult(`❌ Fetch Error: ${JSON.stringify(fetchError)}`);\r\n        console.error('Fetch error:', fetchError);\r\n      } else {\r\n        setTestResult(`✅ Fetch Success: Found ${fetchData?.length || 0} transactions`);\r\n        console.log('Fetch data:', fetchData);\r\n      }\r\n      \r\n      // Test 2: Try to insert a test transaction\r\n      const testTransaction = {\r\n        id: Date.now().toString(),\r\n        type: 'expense' as const,\r\n        amount: 10.50,\r\n        category: 'Test',\r\n        description: 'Test transaction from app',\r\n        date: new Date()\r\n      };\r\n      \r\n      console.log('Attempting to insert test transaction:', testTransaction);\r\n      const { data: insertData, error: insertError } = await transactionsApi.insertTransaction(testTransaction);\r\n      \r\n      if (insertError) {\r\n        setTestResult(prev => prev + `\\n❌ Insert Error: ${JSON.stringify(insertError)}`);\r\n        console.error('Insert error:', insertError);\r\n      } else {\r\n        setTestResult(prev => prev + `\\n✅ Insert Success: Transaction saved with ID ${insertData?.[0]?.id}`);\r\n        console.log('Insert data:', insertData);\r\n      }\r\n      \r\n    } catch (error) {\r\n      setTestResult(`❌ Connection Error: ${error}`);\r\n      console.error('Connection error:', error);\r\n    }\r\n    \r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '15px', \r\n      margin: '10px', \r\n      borderRadius: '8px',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      color: 'white',\r\n      boxShadow: '0 4px 15px rgba(0,0,0,0.2)',\r\n      border: '1px solid #fff'\r\n    }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '15px', flexWrap: 'wrap' }}>\r\n        <div style={{ flex: 1, minWidth: '200px' }}>\r\n          <h3 style={{ \r\n            margin: '0 0 5px 0', \r\n            fontSize: '18px',\r\n            fontWeight: 'bold'\r\n          }}>\r\n            🔧 Supabase Test\r\n          </h3>\r\n          <p style={{ \r\n            margin: '0 0 10px 0', \r\n            fontSize: '14px',\r\n            opacity: 0.9\r\n          }}>\r\n            Test database connection\r\n          </p>\r\n        </div>\r\n        \r\n        <button \r\n          onClick={testConnection} \r\n          disabled={loading}\r\n          style={{ \r\n            padding: '10px 20px', \r\n            fontSize: '14px',\r\n            fontWeight: 'bold',\r\n            backgroundColor: loading ? '#ccc' : '#ff6b6b',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '6px',\r\n            cursor: loading ? 'not-allowed' : 'pointer',\r\n            boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\r\n            transition: 'all 0.3s ease',\r\n            whiteSpace: 'nowrap'\r\n          }}\r\n        >\r\n          {loading ? '🔄 Testing...' : '🚀 Test'}\r\n        </button>\r\n      </div>\r\n      \r\n      {testResult && (\r\n        <div style={{ \r\n          backgroundColor: 'rgba(0,0,0,0.2)',\r\n          padding: '10px',\r\n          borderRadius: '6px',\r\n          marginTop: '10px',\r\n          whiteSpace: 'pre-line', \r\n          fontFamily: 'monospace', \r\n          fontSize: '12px',\r\n          lineHeight: '1.3',\r\n          maxHeight: '150px',\r\n          overflowY: 'auto'\r\n        }}>\r\n          {testResult}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SupabaseTest;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCD,UAAU,CAAC,IAAI,CAAC;IAChBF,aAAa,CAAC,gCAAgC,CAAC;IAE/C,IAAI;MACF;MACA,MAAM;QAAEI,IAAI,EAAEC,SAAS;QAAEC,KAAK,EAAEC;MAAW,CAAC,GAAG,MAAMb,eAAe,CAACc,iBAAiB,CAAC,CAAC;MAExF,IAAID,UAAU,EAAE;QACdP,aAAa,CAAC,kBAAkBS,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,EAAE,CAAC;QAC7DI,OAAO,CAACL,KAAK,CAAC,cAAc,EAAEC,UAAU,CAAC;MAC3C,CAAC,MAAM;QACLP,aAAa,CAAC,0BAA0B,CAAAK,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEO,MAAM,KAAI,CAAC,eAAe,CAAC;QAC9ED,OAAO,CAACE,GAAG,CAAC,aAAa,EAAER,SAAS,CAAC;MACvC;;MAEA;MACA,MAAMS,eAAe,GAAG;QACtBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBC,IAAI,EAAE,SAAkB;QACxBC,MAAM,EAAE,KAAK;QACbC,QAAQ,EAAE,MAAM;QAChBC,WAAW,EAAE,2BAA2B;QACxCC,IAAI,EAAE,IAAIP,IAAI,CAAC;MACjB,CAAC;MAEDL,OAAO,CAACE,GAAG,CAAC,wCAAwC,EAAEC,eAAe,CAAC;MACtE,MAAM;QAAEV,IAAI,EAAEoB,UAAU;QAAElB,KAAK,EAAEmB;MAAY,CAAC,GAAG,MAAM/B,eAAe,CAACgC,iBAAiB,CAACZ,eAAe,CAAC;MAEzG,IAAIW,WAAW,EAAE;QACfzB,aAAa,CAAC2B,IAAI,IAAIA,IAAI,GAAG,qBAAqBlB,IAAI,CAACC,SAAS,CAACe,WAAW,CAAC,EAAE,CAAC;QAChFd,OAAO,CAACL,KAAK,CAAC,eAAe,EAAEmB,WAAW,CAAC;MAC7C,CAAC,MAAM;QACLzB,aAAa,CAAC2B,IAAI;UAAA,IAAAC,YAAA;UAAA,OAAID,IAAI,GAAG,iDAAiDH,UAAU,aAAVA,UAAU,wBAAAI,YAAA,GAAVJ,UAAU,CAAG,CAAC,CAAC,cAAAI,YAAA,uBAAfA,YAAA,CAAiBb,EAAE,EAAE;QAAA,EAAC;QACpGJ,OAAO,CAACE,GAAG,CAAC,cAAc,EAAEW,UAAU,CAAC;MACzC;IAEF,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdN,aAAa,CAAC,uBAAuBM,KAAK,EAAE,CAAC;MAC7CK,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;IAEAJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEN,OAAA;IAAKiC,KAAK,EAAE;MACVC,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,mDAAmD;MAC/DC,KAAK,EAAE,OAAO;MACdC,SAAS,EAAE,4BAA4B;MACvCC,MAAM,EAAE;IACV,CAAE;IAAAC,QAAA,gBACAzC,OAAA;MAAKiC,KAAK,EAAE;QAAES,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEC,GAAG,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAJ,QAAA,gBACnFzC,OAAA;QAAKiC,KAAK,EAAE;UAAEa,IAAI,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAQ,CAAE;QAAAN,QAAA,gBACzCzC,OAAA;UAAIiC,KAAK,EAAE;YACTE,MAAM,EAAE,WAAW;YACnBa,QAAQ,EAAE,MAAM;YAChBC,UAAU,EAAE;UACd,CAAE;UAAAR,QAAA,EAAC;QAEH;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACLrD,OAAA;UAAGiC,KAAK,EAAE;YACRE,MAAM,EAAE,YAAY;YACpBa,QAAQ,EAAE,MAAM;YAChBM,OAAO,EAAE;UACX,CAAE;UAAAb,QAAA,EAAC;QAEH;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENrD,OAAA;QACEuD,OAAO,EAAEhD,cAAe;QACxBiD,QAAQ,EAAEnD,OAAQ;QAClB4B,KAAK,EAAE;UACLC,OAAO,EAAE,WAAW;UACpBc,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE,MAAM;UAClBQ,eAAe,EAAEpD,OAAO,GAAG,MAAM,GAAG,SAAS;UAC7CiC,KAAK,EAAE,OAAO;UACdE,MAAM,EAAE,MAAM;UACdJ,YAAY,EAAE,KAAK;UACnBsB,MAAM,EAAErD,OAAO,GAAG,aAAa,GAAG,SAAS;UAC3CkC,SAAS,EAAE,2BAA2B;UACtCoB,UAAU,EAAE,eAAe;UAC3BC,UAAU,EAAE;QACd,CAAE;QAAAnB,QAAA,EAEDpC,OAAO,GAAG,eAAe,GAAG;MAAS;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELlD,UAAU,iBACTH,OAAA;MAAKiC,KAAK,EAAE;QACVwB,eAAe,EAAE,iBAAiB;QAClCvB,OAAO,EAAE,MAAM;QACfE,YAAY,EAAE,KAAK;QACnByB,SAAS,EAAE,MAAM;QACjBD,UAAU,EAAE,UAAU;QACtBE,UAAU,EAAE,WAAW;QACvBd,QAAQ,EAAE,MAAM;QAChBe,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,OAAO;QAClBC,SAAS,EAAE;MACb,CAAE;MAAAxB,QAAA,EACCtC;IAAU;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnD,EAAA,CApHID,YAAsB;AAAAiE,EAAA,GAAtBjE,YAAsB;AAsH5B,eAAeA,YAAY;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}