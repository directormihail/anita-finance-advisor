{"ast":null,"code":"var _MCPSyncService;\n// ANITA Finance Advisor - MCP Sync Service\n// This service automatically syncs app data to Supabase via MCP\n\nexport class MCPSyncService {\n  constructor() {\n    this.syncQueue = [];\n    this.isProcessing = false;\n  }\n  static getInstance() {\n    if (!MCPSyncService.instance) {\n      MCPSyncService.instance = new MCPSyncService();\n    }\n    return MCPSyncService.instance;\n  }\n\n  // Add data to sync queue\n  addToSyncQueue(type, data) {\n    this.syncQueue.push({\n      type,\n      data,\n      timestamp: Date.now()\n    });\n    this.processSyncQueue();\n  }\n\n  // Process the sync queue\n  async processSyncQueue() {\n    if (this.isProcessing || this.syncQueue.length === 0) return;\n    this.isProcessing = true;\n    console.log('üîÑ Processing MCP sync queue...');\n    try {\n      // Process all items in the queue\n      while (this.syncQueue.length > 0) {\n        const item = this.syncQueue.shift();\n        await this.syncItem(item);\n      }\n    } catch (error) {\n      console.error('‚ùå Error processing sync queue:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  // Sync individual item\n  async syncItem(item) {\n    console.log(`üì° Syncing ${item.type} to Supabase via MCP:`, item.data);\n    try {\n      if (item.type === 'transaction') {\n        console.log('üíæ Transaction ready for MCP Supabase save:', {\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n          type: item.data.type,\n          amount: item.data.amount,\n          category: item.data.category,\n          description: item.data.description\n        });\n\n        // Store transaction data for MCP assistant to process\n        this.storeForMCP('transaction', {\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n          type: item.data.type,\n          amount: item.data.amount,\n          category: item.data.category,\n          description: item.data.description\n        });\n      } else if (item.type === 'message') {\n        console.log('üíæ Message ready for MCP Supabase save:', {\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n          content: item.data.text,\n          message_type: item.data.sender === 'anita' ? 'bot' : 'user'\n        });\n\n        // Store message data for MCP assistant to process\n        this.storeForMCP('message', {\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n          content: item.data.text,\n          message_type: item.data.sender === 'anita' ? 'bot' : 'user'\n        });\n      }\n    } catch (error) {\n      console.error('‚ùå Error syncing item:', error);\n    }\n  }\n\n  // Store data for MCP assistant to process\n  storeForMCP(type, data) {\n    const mcpData = {\n      type,\n      data,\n      timestamp: Date.now(),\n      processed: false\n    };\n\n    // Store in a special localStorage key for MCP processing\n    const existing = this.getMCPQueue();\n    existing.push(mcpData);\n    localStorage.setItem('anita-mcp-queue', JSON.stringify(existing));\n    console.log('üì¶ Data queued for MCP processing:', mcpData);\n  }\n  getMCPQueue() {\n    try {\n      const saved = localStorage.getItem('anita-mcp-queue');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading MCP queue:', error);\n      return [];\n    }\n  }\n\n  // Get current data from localStorage\n  getCurrentData() {\n    const transactions = this.getTransactionsFromStorage();\n    const messages = this.getMessagesFromStorage();\n    return {\n      transactions,\n      messages\n    };\n  }\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        return JSON.parse(saved);\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        return JSON.parse(saved);\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\n_MCPSyncService = MCPSyncService;\nMCPSyncService.instance = void 0;\nexport const mcpSyncService = MCPSyncService.getInstance();","map":{"version":3,"names":["MCPSyncService","constructor","syncQueue","isProcessing","getInstance","instance","addToSyncQueue","type","data","push","timestamp","Date","now","processSyncQueue","length","console","log","item","shift","syncItem","error","user_id","amount","category","description","storeForMCP","content","text","message_type","sender","mcpData","processed","existing","getMCPQueue","localStorage","setItem","JSON","stringify","saved","getItem","parse","getCurrentData","transactions","getTransactionsFromStorage","messages","getMessagesFromStorage","_MCPSyncService","mcpSyncService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/mcpSync.ts"],"sourcesContent":["// ANITA Finance Advisor - MCP Sync Service\r\n// This service automatically syncs app data to Supabase via MCP\r\n\r\nexport interface SyncData {\r\n  transactions: any[];\r\n  messages: any[];\r\n}\r\n\r\nexport class MCPSyncService {\r\n  private static instance: MCPSyncService;\r\n  private syncQueue: any[] = [];\r\n  private isProcessing = false;\r\n\r\n  static getInstance(): MCPSyncService {\r\n    if (!MCPSyncService.instance) {\r\n      MCPSyncService.instance = new MCPSyncService();\r\n    }\r\n    return MCPSyncService.instance;\r\n  }\r\n\r\n  // Add data to sync queue\r\n  addToSyncQueue(type: 'transaction' | 'message', data: any) {\r\n    this.syncQueue.push({ type, data, timestamp: Date.now() });\r\n    this.processSyncQueue();\r\n  }\r\n\r\n  // Process the sync queue\r\n  private async processSyncQueue() {\r\n    if (this.isProcessing || this.syncQueue.length === 0) return;\r\n\r\n    this.isProcessing = true;\r\n    console.log('üîÑ Processing MCP sync queue...');\r\n\r\n    try {\r\n      // Process all items in the queue\r\n      while (this.syncQueue.length > 0) {\r\n        const item = this.syncQueue.shift();\r\n        await this.syncItem(item);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error processing sync queue:', error);\r\n    } finally {\r\n      this.isProcessing = false;\r\n    }\r\n  }\r\n\r\n  // Sync individual item\r\n  private async syncItem(item: any) {\r\n    console.log(`üì° Syncing ${item.type} to Supabase via MCP:`, item.data);\r\n    \r\n    try {\r\n      if (item.type === 'transaction') {\r\n        console.log('üíæ Transaction ready for MCP Supabase save:', {\r\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n          type: item.data.type,\r\n          amount: item.data.amount,\r\n          category: item.data.category,\r\n          description: item.data.description\r\n        });\r\n        \r\n        // Store transaction data for MCP assistant to process\r\n        this.storeForMCP('transaction', {\r\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n          type: item.data.type,\r\n          amount: item.data.amount,\r\n          category: item.data.category,\r\n          description: item.data.description\r\n        });\r\n        \r\n      } else if (item.type === 'message') {\r\n        console.log('üíæ Message ready for MCP Supabase save:', {\r\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n          content: item.data.text,\r\n          message_type: item.data.sender === 'anita' ? 'bot' : 'user'\r\n        });\r\n        \r\n        // Store message data for MCP assistant to process\r\n        this.storeForMCP('message', {\r\n          user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n          content: item.data.text,\r\n          message_type: item.data.sender === 'anita' ? 'bot' : 'user'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error syncing item:', error);\r\n    }\r\n  }\r\n\r\n  // Store data for MCP assistant to process\r\n  private storeForMCP(type: string, data: any) {\r\n    const mcpData = {\r\n      type,\r\n      data,\r\n      timestamp: Date.now(),\r\n      processed: false\r\n    };\r\n    \r\n    // Store in a special localStorage key for MCP processing\r\n    const existing = this.getMCPQueue();\r\n    existing.push(mcpData);\r\n    localStorage.setItem('anita-mcp-queue', JSON.stringify(existing));\r\n    \r\n    console.log('üì¶ Data queued for MCP processing:', mcpData);\r\n  }\r\n\r\n  private getMCPQueue(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-mcp-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading MCP queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get current data from localStorage\r\n  getCurrentData(): SyncData {\r\n    const transactions = this.getTransactionsFromStorage();\r\n    const messages = this.getMessagesFromStorage();\r\n    return { transactions, messages };\r\n  }\r\n\r\n  private getTransactionsFromStorage(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        return JSON.parse(saved);\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getMessagesFromStorage(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        return JSON.parse(saved);\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const mcpSyncService = MCPSyncService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}