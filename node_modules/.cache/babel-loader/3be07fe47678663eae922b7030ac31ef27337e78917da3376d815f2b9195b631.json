{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatInterface from './components/ChatInterface';\nimport Settings from './components/Settings';\nimport FinancePage from './components/FinancePage';\nimport { transactionsApi, messagesApi, usersApi, realtimeManager } from './supabase';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentView, setCurrentView] = useState('chat');\n  const [transactions, setTransactions] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [theme, setTheme] = useState('dark');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize user and load data\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        setIsLoading(true);\n\n        // Load theme from localStorage\n        const savedTheme = localStorage.getItem('anita-theme');\n        if (savedTheme) {\n          setTheme(savedTheme);\n        }\n\n        // Get or create current user\n        const username = localStorage.getItem('anita-username') || 'anonymous_user';\n        const {\n          data: user,\n          error: userError\n        } = await usersApi.getOrCreateUser(username);\n        if (user && !userError) {\n          setCurrentUser(user);\n          console.log('✅ Current user:', user);\n        } else {\n          console.error('❌ Error getting/creating user:', userError);\n        }\n\n        // Load all users\n        const {\n          data: allUsers,\n          error: usersError\n        } = await usersApi.getAllUsers();\n        if (allUsers && !usersError) {\n          setUsers(allUsers);\n          console.log('✅ Loaded users:', allUsers);\n        }\n\n        // Load transactions\n        const {\n          data: transactionsData,\n          error: transactionsError\n        } = await transactionsApi.fetchTransactions();\n        if (transactionsData && !transactionsError) {\n          const transactionsWithDates = transactionsData.map(t => {\n            var _t$users;\n            return {\n              id: t.id.toString(),\n              type: t.type,\n              amount: parseFloat(t.amount),\n              category: t.category,\n              description: t.description,\n              date: new Date(t.date),\n              userId: t.user_id,\n              username: ((_t$users = t.users) === null || _t$users === void 0 ? void 0 : _t$users.username) || 'Unknown'\n            };\n          });\n          setTransactions(transactionsWithDates);\n          console.log('✅ Loaded transactions:', transactionsWithDates);\n        }\n\n        // Load messages\n        let messagesWithDates = [];\n        const {\n          data: messagesData,\n          error: messagesError\n        } = await messagesApi.fetchMessages();\n        if (messagesData && !messagesError) {\n          messagesWithDates = messagesData.map(m => {\n            var _m$users;\n            return {\n              id: m.id.toString(),\n              text: m.content,\n              sender: m.message_type === 'user' ? 'user' : 'anita',\n              timestamp: new Date(m.created_at),\n              userId: m.user_id,\n              username: ((_m$users = m.users) === null || _m$users === void 0 ? void 0 : _m$users.username) || 'Unknown'\n            };\n          });\n          setMessages(messagesWithDates);\n          console.log('✅ Loaded messages:', messagesWithDates);\n        }\n\n        // Add welcome message if no messages exist\n        if (messagesWithDates.length === 0) {\n          const welcomeMessage = {\n            id: 'welcome',\n            text: `Hello ${(user === null || user === void 0 ? void 0 : user.display_name) || 'there'}! I'm ANITA, your finance advisor. Tell me about your income and expenses!`,\n            sender: 'anita',\n            timestamp: new Date(),\n            userId: user === null || user === void 0 ? void 0 : user.id,\n            username: user === null || user === void 0 ? void 0 : user.username\n          };\n          setMessages([welcomeMessage]);\n        }\n      } catch (error) {\n        console.error('❌ Error initializing app:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeApp();\n  }, []);\n\n  // Set up real-time subscriptions\n  useEffect(() => {\n    if (!currentUser) return;\n    console.log('🔄 Setting up real-time subscriptions...');\n\n    // Subscribe to all data changes\n    realtimeManager.subscribeToAll({\n      onUsersChange: payload => {\n        console.log('👥 Users changed:', payload);\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {\n          // Refresh users list\n          usersApi.getAllUsers().then(({\n            data,\n            error\n          }) => {\n            if (data && !error) {\n              setUsers(data);\n            }\n          });\n        }\n      },\n      onTransactionsChange: payload => {\n        console.log('💰 Transactions changed:', payload);\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE' || payload.eventType === 'DELETE') {\n          // Refresh transactions list\n          transactionsApi.fetchTransactions().then(({\n            data,\n            error\n          }) => {\n            if (data && !error) {\n              const transactionsWithDates = data.map(t => {\n                var _t$users2;\n                return {\n                  id: t.id.toString(),\n                  type: t.type,\n                  amount: parseFloat(t.amount),\n                  category: t.category,\n                  description: t.description,\n                  date: new Date(t.date),\n                  userId: t.user_id,\n                  username: ((_t$users2 = t.users) === null || _t$users2 === void 0 ? void 0 : _t$users2.username) || 'Unknown'\n                };\n              });\n              setTransactions(transactionsWithDates);\n            }\n          });\n        }\n      },\n      onMessagesChange: payload => {\n        console.log('💬 Messages changed:', payload);\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE' || payload.eventType === 'DELETE') {\n          // Refresh messages list\n          messagesApi.fetchMessages().then(({\n            data,\n            error\n          }) => {\n            if (data && !error) {\n              const messagesWithDates = data.map(m => {\n                var _m$users2;\n                return {\n                  id: m.id.toString(),\n                  text: m.content,\n                  sender: m.message_type === 'user' ? 'user' : 'anita',\n                  timestamp: new Date(m.created_at),\n                  userId: m.user_id,\n                  username: ((_m$users2 = m.users) === null || _m$users2 === void 0 ? void 0 : _m$users2.username) || 'Unknown'\n                };\n              });\n              setMessages(messagesWithDates);\n            }\n          });\n        }\n      }\n    });\n\n    // Cleanup subscriptions on unmount\n    return () => {\n      realtimeManager.unsubscribeAll();\n    };\n  }, [currentUser]);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('anita-theme', theme);\n  }, [theme]);\n  const handleTransactionAdd = async transaction => {\n    // Transaction is already saved by ChatInterface, this is just for local state updates\n    // Real-time updates will handle the UI refresh\n    console.log('✅ Transaction added to local state:', transaction);\n  };\n  const handleMessageAdd = async message => {\n    if (!currentUser) return;\n    try {\n      const {\n        data,\n        error\n      } = await messagesApi.insertMessage(currentUser.id, message.text, message.sender === 'user' ? 'user' : 'bot');\n      if (error) {\n        console.error('❌ Error adding message:', error);\n        return;\n      }\n      console.log('✅ Message added:', data);\n    } catch (error) {\n      console.error('❌ Error adding message:', error);\n    }\n  };\n  const handleThemeChange = newTheme => {\n    setTheme(newTheme);\n  };\n  const handleUserChange = async username => {\n    try {\n      const {\n        data: user,\n        error\n      } = await usersApi.getOrCreateUser(username);\n      if (user && !error) {\n        setCurrentUser(user);\n        localStorage.setItem('anita-username', username);\n        console.log('✅ Switched to user:', user);\n      } else {\n        console.error('❌ Error switching user:', error);\n      }\n    } catch (error) {\n      console.error('❌ Error switching user:', error);\n    }\n  };\n\n  // Calculate financial summary\n  const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);\n  const totalExpenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);\n  const netBalance = totalIncome - totalExpenses;\n\n  // Get all transactions sorted by date (newest first)\n  const allTransactions = [...transactions].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading ANITA Finance Advisor...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onViewChange: setCurrentView,\n      currentView: currentView,\n      totalBalance: netBalance,\n      monthlyIncome: totalIncome,\n      monthlyExpenses: totalExpenses,\n      recentTransactions: allTransactions,\n      currentUser: currentUser,\n      users: users,\n      onUserChange: handleUserChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentView === 'chat' && /*#__PURE__*/_jsxDEV(ChatInterface, {\n        onTransactionAdd: handleTransactionAdd,\n        onMessageAdd: handleMessageAdd,\n        messages: messages,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), currentView === 'settings' && /*#__PURE__*/_jsxDEV(Settings, {\n        onThemeChange: handleThemeChange,\n        currentTheme: theme,\n        currentUser: currentUser,\n        onUserChange: handleUserChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), currentView === 'finance' && /*#__PURE__*/_jsxDEV(FinancePage, {\n        transactions: transactions,\n        users: users,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"S/8GFX6+gMO0Gtg3rSp1O/wSQqA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatInterface","Settings","FinancePage","transactionsApi","messagesApi","usersApi","realtimeManager","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","transactions","setTransactions","messages","setMessages","users","setUsers","currentUser","setCurrentUser","theme","setTheme","isLoading","setIsLoading","initializeApp","savedTheme","localStorage","getItem","username","data","user","error","userError","getOrCreateUser","console","log","allUsers","usersError","getAllUsers","transactionsData","transactionsError","fetchTransactions","transactionsWithDates","map","t","_t$users","id","toString","type","amount","parseFloat","category","description","date","Date","userId","user_id","messagesWithDates","messagesData","messagesError","fetchMessages","m","_m$users","text","content","sender","message_type","timestamp","created_at","length","welcomeMessage","display_name","subscribeToAll","onUsersChange","payload","eventType","then","onTransactionsChange","_t$users2","onMessagesChange","_m$users2","unsubscribeAll","document","documentElement","setAttribute","setItem","handleTransactionAdd","transaction","handleMessageAdd","message","insertMessage","handleThemeChange","newTheme","handleUserChange","totalIncome","filter","reduce","sum","totalExpenses","netBalance","allTransactions","sort","a","b","getTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onViewChange","totalBalance","monthlyIncome","monthlyExpenses","recentTransactions","onUserChange","onTransactionAdd","onMessageAdd","onThemeChange","currentTheme","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Settings from './components/Settings';\r\nimport FinancePage from './components/FinancePage';\r\nimport { transactionsApi, messagesApi, usersApi, realtimeManager } from './supabase';\r\nimport './App.css';\r\n\r\ntype ViewType = 'chat' | 'settings' | 'finance';\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n  userId?: string;\r\n  username?: string;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n  userId?: string;\r\n  username?: string;\r\n}\r\n\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  display_name: string;\r\n  email?: string;\r\n  created_at: string;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<ViewType>('chat');\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n  const [theme, setTheme] = useState<Theme>('dark');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Initialize user and load data\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Load theme from localStorage\r\n        const savedTheme = localStorage.getItem('anita-theme') as Theme;\r\n        if (savedTheme) {\r\n          setTheme(savedTheme);\r\n        }\r\n\r\n        // Get or create current user\r\n        const username = localStorage.getItem('anita-username') || 'anonymous_user';\r\n        const { data: user, error: userError } = await usersApi.getOrCreateUser(username);\r\n        \r\n        if (user && !userError) {\r\n          setCurrentUser(user);\r\n          console.log('✅ Current user:', user);\r\n        } else {\r\n          console.error('❌ Error getting/creating user:', userError);\r\n        }\r\n\r\n        // Load all users\r\n        const { data: allUsers, error: usersError } = await usersApi.getAllUsers();\r\n        if (allUsers && !usersError) {\r\n          setUsers(allUsers);\r\n          console.log('✅ Loaded users:', allUsers);\r\n        }\r\n\r\n        // Load transactions\r\n        const { data: transactionsData, error: transactionsError } = await transactionsApi.fetchTransactions();\r\n        if (transactionsData && !transactionsError) {\r\n          const transactionsWithDates = transactionsData.map((t: any) => ({\r\n            id: t.id.toString(),\r\n            type: t.type,\r\n            amount: parseFloat(t.amount),\r\n            category: t.category,\r\n            description: t.description,\r\n            date: new Date(t.date),\r\n            userId: t.user_id,\r\n            username: t.users?.username || 'Unknown'\r\n          }));\r\n          setTransactions(transactionsWithDates);\r\n          console.log('✅ Loaded transactions:', transactionsWithDates);\r\n        }\r\n\r\n        // Load messages\r\n        let messagesWithDates: Message[] = [];\r\n        const { data: messagesData, error: messagesError } = await messagesApi.fetchMessages();\r\n        if (messagesData && !messagesError) {\r\n          messagesWithDates = messagesData.map((m: any) => ({\r\n            id: m.id.toString(),\r\n            text: m.content,\r\n            sender: (m.message_type === 'user' ? 'user' : 'anita') as 'user' | 'anita',\r\n            timestamp: new Date(m.created_at),\r\n            userId: m.user_id,\r\n            username: m.users?.username || 'Unknown'\r\n          }));\r\n          setMessages(messagesWithDates);\r\n          console.log('✅ Loaded messages:', messagesWithDates);\r\n        }\r\n\r\n        // Add welcome message if no messages exist\r\n        if (messagesWithDates.length === 0) {\r\n          const welcomeMessage: Message = {\r\n            id: 'welcome',\r\n            text: `Hello ${user?.display_name || 'there'}! I'm ANITA, your finance advisor. Tell me about your income and expenses!`,\r\n            sender: 'anita',\r\n            timestamp: new Date(),\r\n            userId: user?.id,\r\n            username: user?.username\r\n          };\r\n          setMessages([welcomeMessage]);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('❌ Error initializing app:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeApp();\r\n  }, []);\r\n\r\n  // Set up real-time subscriptions\r\n  useEffect(() => {\r\n    if (!currentUser) return;\r\n\r\n    console.log('🔄 Setting up real-time subscriptions...');\r\n\r\n    // Subscribe to all data changes\r\n    realtimeManager.subscribeToAll({\r\n      onUsersChange: (payload: any) => {\r\n        console.log('👥 Users changed:', payload);\r\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {\r\n          // Refresh users list\r\n          usersApi.getAllUsers().then(({ data, error }) => {\r\n            if (data && !error) {\r\n              setUsers(data);\r\n            }\r\n          });\r\n        }\r\n      },\r\n      onTransactionsChange: (payload: any) => {\r\n        console.log('💰 Transactions changed:', payload);\r\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE' || payload.eventType === 'DELETE') {\r\n          // Refresh transactions list\r\n          transactionsApi.fetchTransactions().then(({ data, error }) => {\r\n            if (data && !error) {\r\n              const transactionsWithDates = data.map((t: any) => ({\r\n                id: t.id.toString(),\r\n                type: t.type,\r\n                amount: parseFloat(t.amount),\r\n                category: t.category,\r\n                description: t.description,\r\n                date: new Date(t.date),\r\n                userId: t.user_id,\r\n                username: t.users?.username || 'Unknown'\r\n              }));\r\n              setTransactions(transactionsWithDates);\r\n            }\r\n          });\r\n        }\r\n      },\r\n      onMessagesChange: (payload: any) => {\r\n        console.log('💬 Messages changed:', payload);\r\n        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE' || payload.eventType === 'DELETE') {\r\n          // Refresh messages list\r\n          messagesApi.fetchMessages().then(({ data, error }) => {\r\n            if (data && !error) {\r\n              const messagesWithDates = data.map((m: any) => ({\r\n                id: m.id.toString(),\r\n                text: m.content,\r\n                sender: (m.message_type === 'user' ? 'user' : 'anita') as 'user' | 'anita',\r\n                timestamp: new Date(m.created_at),\r\n                userId: m.user_id,\r\n                username: m.users?.username || 'Unknown'\r\n              }));\r\n              setMessages(messagesWithDates);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Cleanup subscriptions on unmount\r\n    return () => {\r\n      realtimeManager.unsubscribeAll();\r\n    };\r\n  }, [currentUser]);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('anita-theme', theme);\r\n  }, [theme]);\r\n\r\n  const handleTransactionAdd = async (transaction: Transaction) => {\r\n    // Transaction is already saved by ChatInterface, this is just for local state updates\r\n    // Real-time updates will handle the UI refresh\r\n    console.log('✅ Transaction added to local state:', transaction);\r\n  };\r\n\r\n  const handleMessageAdd = async (message: Message) => {\r\n    if (!currentUser) return;\r\n\r\n    try {\r\n      const { data, error } = await messagesApi.insertMessage(\r\n        currentUser.id,\r\n        message.text,\r\n        message.sender === 'user' ? 'user' : 'bot'\r\n      );\r\n\r\n      if (error) {\r\n        console.error('❌ Error adding message:', error);\r\n        return;\r\n      }\r\n\r\n      console.log('✅ Message added:', data);\r\n    } catch (error) {\r\n      console.error('❌ Error adding message:', error);\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  const handleUserChange = async (username: string) => {\r\n    try {\r\n      const { data: user, error } = await usersApi.getOrCreateUser(username);\r\n      \r\n      if (user && !error) {\r\n        setCurrentUser(user);\r\n        localStorage.setItem('anita-username', username);\r\n        console.log('✅ Switched to user:', user);\r\n      } else {\r\n        console.error('❌ Error switching user:', error);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error switching user:', error);\r\n    }\r\n  };\r\n\r\n  // Calculate financial summary\r\n  const totalIncome = transactions\r\n    .filter(t => t.type === 'income')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const totalExpenses = transactions\r\n    .filter(t => t.type === 'expense')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const netBalance = totalIncome - totalExpenses;\r\n\r\n  // Get all transactions sorted by date (newest first)\r\n  const allTransactions = [...transactions]\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"app loading\">\r\n        <div className=\"loading-spinner\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading ANITA Finance Advisor...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar \r\n        onViewChange={setCurrentView} \r\n        currentView={currentView}\r\n        totalBalance={netBalance}\r\n        monthlyIncome={totalIncome}\r\n        monthlyExpenses={totalExpenses}\r\n        recentTransactions={allTransactions}\r\n        currentUser={currentUser}\r\n        users={users}\r\n        onUserChange={handleUserChange}\r\n      />\r\n      <div className=\"main-content\">\r\n        {currentView === 'chat' && (\r\n          <ChatInterface \r\n            onTransactionAdd={handleTransactionAdd} \r\n            onMessageAdd={handleMessageAdd} \r\n            messages={messages}\r\n            currentUser={currentUser}\r\n          />\r\n        )}\r\n        {currentView === 'settings' && (\r\n          <Settings \r\n            onThemeChange={handleThemeChange} \r\n            currentTheme={theme}\r\n            currentUser={currentUser}\r\n            onUserChange={handleUserChange}\r\n          />\r\n        )}\r\n        {currentView === 'finance' && (\r\n          <FinancePage \r\n            transactions={transactions}\r\n            users={users}\r\n            currentUser={currentUser}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}