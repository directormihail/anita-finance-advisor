{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\components\\\\ChatInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport { transactionsApi } from '../supabase';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  onTransactionAdd,\n  onMessageAdd,\n  messages\n}) => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Run test on component mount to verify parsing works\n  useEffect(() => {\n    testParsing();\n  }, []);\n\n  // Test function to verify parsing works correctly\n  const testParsing = () => {\n    const testCases = ['100 income', '50 expense', '$200 salary', '75 spent', 'income 150', 'expense 25', '100',\n    // Standalone number\n    '50',\n    // Standalone number\n    '-25' // Negative standalone number\n    ];\n    console.log('Testing transaction parsing:');\n    testCases.forEach(testCase => {\n      const result = parseTransaction(testCase);\n      console.log(`\"${testCase}\" ->`, result ? `${result.type}: $${result.amount}` : 'No match');\n    });\n  };\n  const parseTransaction = message => {\n    console.log('=== PARSING TRANSACTION ===');\n    console.log('Input message:', `\"${message}\"`);\n    console.log('Message length:', message.length);\n    console.log('Message trimmed:', `\"${message.trim()}\"`);\n\n    // Enhanced regex patterns for better detection\n    const incomePatterns = [\n    // Simple patterns first - number then keyword (most common)\n    /(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|made|received|got|deposited|added|salary|wage|bonus|payment)/i,\n    // Dollar sign with number then keyword\n    /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|received|made|deposited|added)/i,\n    // Standalone numbers (treat as income by default)\n    /^(\\d+(?:\\.\\d{2})?)$/i,\n    // Keyword then number\n    /(?:income|earned|made|received|got|deposited|added)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:from|for|at|as)?\\s*(.+)/i, /(?:salary|wage|bonus|payment|refund|rebate)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:plus|positive|gain)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bank|account)\\s+(?:deposit|credit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:i\\s+have|my\\s+balance\\s+is|i\\s+got)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:freelance|freelancing|gig|side\\s+hustle)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i];\n    const expensePatterns = [\n    // Simple patterns first - number then keyword (most common)\n    /(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|bought|paid|cost|withdrew|deducted|bill|charge)/i,\n    // Dollar sign with number then keyword\n    /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|cost|paid|withdrew|deducted)/i,\n    // Standalone numbers with negative context (treat as expense)\n    /^-(\\d+(?:\\.\\d{2})?)$/i,\n    // Keyword then number\n    /(?:spent|expense|bought|paid|cost|withdrew|deducted)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:on|for|at|for)?\\s*(.+)/i, /(?:purchase|bought|paid|billed)\\s+(?:for\\s+)?(.+?)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:minus|negative|loss)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bank|account)\\s+(?:withdrawal|debit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bill|invoice|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:i\\s+owe|i\\s+need\\s+to\\s+pay|debt\\s+of)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:subscription|monthly|annual)\\s+(?:fee|cost|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i];\n\n    // Check for income\n    console.log('Testing income patterns...');\n    for (let i = 0; i < incomePatterns.length; i++) {\n      const pattern = incomePatterns[i];\n      const match = message.match(pattern);\n      console.log(`Income pattern ${i + 1}:`, pattern.source, 'Match:', match);\n      if (match) {\n        console.log('✅ Income pattern matched:', pattern.source, 'Match groups:', match);\n        // For simple patterns (number first), amount is in match[1]\n        // For complex patterns (keyword first), amount is in match[1] or match[2]\n        let amount;\n        let description;\n        if (pattern.source.startsWith('(\\\\d+') || pattern.source.startsWith('\\\\$(\\\\d+') || pattern.source === '^(\\\\d+(?:\\\\.\\\\d{2})?)$') {\n          // Simple pattern: number first, $number first, or standalone number\n          amount = parseFloat(match[1]);\n          description = 'Income';\n        } else {\n          // Complex pattern: keyword first\n          amount = parseFloat(match[1] || match[2]);\n          description = match[2] || match[1] || 'Income';\n        }\n        console.log('Parsed amount:', amount, 'Description:', description); // Debug log\n\n        return {\n          id: Date.now().toString(),\n          type: 'income',\n          amount: amount,\n          category: 'Income',\n          description: description.trim(),\n          date: new Date()\n        };\n      }\n    }\n\n    // Check for expenses\n    for (const pattern of expensePatterns) {\n      const match = message.match(pattern);\n      if (match) {\n        console.log('Expense pattern matched:', pattern, 'Match groups:', match); // Debug log\n        // For simple patterns (number first), amount is in match[1]\n        // For complex patterns (keyword first), amount is in match[1] or match[2]\n        let amount;\n        let description;\n        if (pattern.source.startsWith('(\\\\d+') || pattern.source.startsWith('\\\\$(\\\\d+') || pattern.source === '^-(\\\\d+(?:\\\\.\\\\d{2})?)$') {\n          // Simple pattern: number first, $number first, or standalone negative number\n          amount = parseFloat(match[1]);\n          description = 'Expense';\n        } else {\n          // Complex pattern: keyword first\n          amount = parseFloat(match[1] || match[2]);\n          description = match[2] || match[1] || 'Expense';\n        }\n        console.log('Parsed amount:', amount, 'Description:', description); // Debug log\n\n        // Try to categorize the expense\n        let category = 'Other';\n        const desc = description.toLowerCase();\n        if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\n          category = 'Food';\n        } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\n          category = 'Transport';\n        } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\n          category = 'Housing';\n        } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\n          category = 'Entertainment';\n        } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\n          category = 'Healthcare';\n        } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\n          category = 'Shopping';\n        } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\n          category = 'Education';\n        }\n        return {\n          id: Date.now().toString(),\n          type: 'expense',\n          amount: amount,\n          category: category,\n          description: description.trim(),\n          date: new Date()\n        };\n      }\n    }\n    return null;\n  };\n  const getAnitaResponse = (userMessage, transaction) => {\n    if (transaction) {\n      if (transaction.type === 'income') {\n        const responses = [`Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`, `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`, `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`, `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`];\n        return responses[Math.floor(Math.random() * responses.length)];\n      } else {\n        const responses = [`Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`, `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`, `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`, `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`];\n        return responses[Math.floor(Math.random() * responses.length)];\n      }\n    }\n    const responses = [\"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\", \"What's the financial tea today? ☕ Share your income or expenses with me!\", \"Spill the financial beans! 💅 I'm here to track your money flow\", \"Let's talk money! 💸 Share what you've earned or spent today\", \"What's happening with your wallet? 💳 Tell me about any transactions!\", \"Money talk time! 💰 Share your income or expenses with me\", \"Let's get financial! 📊 Tell me about your money moves today\", \"What's the financial update? 💅 I'm ready to track your transactions!\"];\n    return responses[Math.floor(Math.random() * responses.length)];\n  };\n  const handleSendMessage = async () => {\n    if (!inputText.trim()) return;\n    const transaction = parseTransaction(inputText);\n    console.log('Parsed transaction:', transaction); // Debug log\n\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date(),\n      transaction: transaction || undefined\n    };\n    onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(userMessage);\n\n    // Save transaction to Supabase if one was parsed\n    if (transaction) {\n      console.log('Saving transaction to Supabase:', transaction); // Debug log\n      try {\n        const {\n          data,\n          error\n        } = await transactionsApi.insertTransaction(transaction);\n        if (error) {\n          console.error('Error saving transaction to Supabase:', error);\n          // Still add to local state even if Supabase fails\n          onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n        } else {\n          console.log('Transaction saved successfully to Supabase:', data); // Debug log\n          // Transaction saved successfully to Supabase\n          onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n        }\n      } catch (error) {\n        console.error('Error saving transaction to Supabase:', error);\n        // Still add to local state even if Supabase fails\n        onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n      }\n    } else {\n      console.log('No transaction parsed from message:', inputText); // Debug log\n    }\n    setInputText('');\n    setIsTyping(true);\n\n    // Simulate ANITA typing\n    setTimeout(() => {\n      const anitaResponse = {\n        id: (Date.now() + 1).toString(),\n        text: getAnitaResponse(inputText, transaction || undefined),\n        sender: 'anita',\n        timestamp: new Date()\n      };\n      onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(anitaResponse);\n      setIsTyping(false);\n    }, 1500);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-title\",\n        children: \"ANITA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: message.sender === 'anita' ? /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 45\n          }, this) : /*#__PURE__*/_jsxDEV(User, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), message.transaction && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `transaction-info ${message.transaction.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-amount\",\n              children: [message.transaction.type === 'income' ? '+' : '-', \"$\", message.transaction.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-desc\",\n              children: message.transaction.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: message.timestamp.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message anita\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask ANITA about your finances...\",\n          rows: 1,\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim() || isTyping,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"w3/JuEn8gyjkL4pH4wvvkLQiNsM=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Send","Bot","User","transactionsApi","jsxDEV","_jsxDEV","ChatInterface","onTransactionAdd","onMessageAdd","messages","_s","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","testParsing","testCases","console","log","forEach","testCase","result","parseTransaction","type","amount","message","length","trim","incomePatterns","expensePatterns","i","pattern","match","source","description","startsWith","parseFloat","id","Date","now","toString","category","date","desc","toLowerCase","includes","getAnitaResponse","userMessage","transaction","responses","Math","floor","random","handleSendMessage","text","sender","timestamp","undefined","data","error","insertTransaction","setTimeout","anitaResponse","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","size","toLocaleTimeString","hour","minute","ref","value","onChange","target","onKeyPress","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Send, Bot, User } from 'lucide-react';\r\nimport { transactionsApi } from '../supabase';\r\nimport './ChatInterface.css';\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface ChatInterfaceProps {\r\n  onTransactionAdd?: (transaction: Transaction) => void;\r\n  onMessageAdd?: (message: Message) => void;\r\n  messages: Message[];\r\n}\r\n\r\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({ onTransactionAdd, onMessageAdd, messages }) => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Run test on component mount to verify parsing works\r\n  useEffect(() => {\r\n    testParsing();\r\n  }, []);\r\n\r\n  // Test function to verify parsing works correctly\r\n  const testParsing = () => {\r\n    const testCases = [\r\n      '100 income',\r\n      '50 expense',\r\n      '$200 salary',\r\n      '75 spent',\r\n      'income 150',\r\n      'expense 25',\r\n      '100',  // Standalone number\r\n      '50',   // Standalone number\r\n      '-25'   // Negative standalone number\r\n    ];\r\n    \r\n    console.log('Testing transaction parsing:');\r\n    testCases.forEach(testCase => {\r\n      const result = parseTransaction(testCase);\r\n      console.log(`\"${testCase}\" ->`, result ? `${result.type}: $${result.amount}` : 'No match');\r\n    });\r\n  };\r\n\r\n  const parseTransaction = (message: string): Transaction | null => {\r\n    console.log('=== PARSING TRANSACTION ===');\r\n    console.log('Input message:', `\"${message}\"`);\r\n    console.log('Message length:', message.length);\r\n    console.log('Message trimmed:', `\"${message.trim()}\"`);\r\n    \r\n    // Enhanced regex patterns for better detection\r\n    const incomePatterns = [\r\n      // Simple patterns first - number then keyword (most common)\r\n      /(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|made|received|got|deposited|added|salary|wage|bonus|payment)/i,\r\n      // Dollar sign with number then keyword\r\n      /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|received|made|deposited|added)/i,\r\n      // Standalone numbers (treat as income by default)\r\n      /^(\\d+(?:\\.\\d{2})?)$/i,\r\n      // Keyword then number\r\n      /(?:income|earned|made|received|got|deposited|added)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:from|for|at|as)?\\s*(.+)/i,\r\n      /(?:salary|wage|bonus|payment|refund|rebate)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:plus|positive|gain)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bank|account)\\s+(?:deposit|credit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:i\\s+have|my\\s+balance\\s+is|i\\s+got)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:freelance|freelancing|gig|side\\s+hustle)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i\r\n    ];\r\n    \r\n    const expensePatterns = [\r\n      // Simple patterns first - number then keyword (most common)\r\n      /(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|bought|paid|cost|withdrew|deducted|bill|charge)/i,\r\n      // Dollar sign with number then keyword\r\n      /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|cost|paid|withdrew|deducted)/i,\r\n      // Standalone numbers with negative context (treat as expense)\r\n      /^-(\\d+(?:\\.\\d{2})?)$/i,\r\n      // Keyword then number\r\n      /(?:spent|expense|bought|paid|cost|withdrew|deducted)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:on|for|at|for)?\\s*(.+)/i,\r\n      /(?:purchase|bought|paid|billed)\\s+(?:for\\s+)?(.+?)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:minus|negative|loss)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bank|account)\\s+(?:withdrawal|debit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bill|invoice|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:i\\s+owe|i\\s+need\\s+to\\s+pay|debt\\s+of)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:subscription|monthly|annual)\\s+(?:fee|cost|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i\r\n    ];\r\n    \r\n    // Check for income\r\n    console.log('Testing income patterns...');\r\n    for (let i = 0; i < incomePatterns.length; i++) {\r\n      const pattern = incomePatterns[i];\r\n      const match = message.match(pattern);\r\n      console.log(`Income pattern ${i + 1}:`, pattern.source, 'Match:', match);\r\n      if (match) {\r\n        console.log('✅ Income pattern matched:', pattern.source, 'Match groups:', match);\r\n        // For simple patterns (number first), amount is in match[1]\r\n        // For complex patterns (keyword first), amount is in match[1] or match[2]\r\n        let amount: number;\r\n        let description: string;\r\n        \r\n        if (pattern.source.startsWith('(\\\\d+') || pattern.source.startsWith('\\\\$(\\\\d+') || pattern.source === '^(\\\\d+(?:\\\\.\\\\d{2})?)$') {\r\n          // Simple pattern: number first, $number first, or standalone number\r\n          amount = parseFloat(match[1]);\r\n          description = 'Income';\r\n        } else {\r\n          // Complex pattern: keyword first\r\n          amount = parseFloat(match[1] || match[2]);\r\n          description = match[2] || match[1] || 'Income';\r\n        }\r\n        \r\n        console.log('Parsed amount:', amount, 'Description:', description); // Debug log\r\n        \r\n        return {\r\n          id: Date.now().toString(),\r\n          type: 'income',\r\n          amount: amount,\r\n          category: 'Income',\r\n          description: description.trim(),\r\n          date: new Date()\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Check for expenses\r\n    for (const pattern of expensePatterns) {\r\n      const match = message.match(pattern);\r\n      if (match) {\r\n        console.log('Expense pattern matched:', pattern, 'Match groups:', match); // Debug log\r\n        // For simple patterns (number first), amount is in match[1]\r\n        // For complex patterns (keyword first), amount is in match[1] or match[2]\r\n        let amount: number;\r\n        let description: string;\r\n        \r\n        if (pattern.source.startsWith('(\\\\d+') || pattern.source.startsWith('\\\\$(\\\\d+') || pattern.source === '^-(\\\\d+(?:\\\\.\\\\d{2})?)$') {\r\n          // Simple pattern: number first, $number first, or standalone negative number\r\n          amount = parseFloat(match[1]);\r\n          description = 'Expense';\r\n        } else {\r\n          // Complex pattern: keyword first\r\n          amount = parseFloat(match[1] || match[2]);\r\n          description = match[2] || match[1] || 'Expense';\r\n        }\r\n        \r\n        console.log('Parsed amount:', amount, 'Description:', description); // Debug log\r\n        \r\n        // Try to categorize the expense\r\n        let category = 'Other';\r\n        const desc = description.toLowerCase();\r\n        if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\r\n          category = 'Food';\r\n        } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\r\n          category = 'Transport';\r\n        } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\r\n          category = 'Housing';\r\n        } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\r\n          category = 'Entertainment';\r\n        } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\r\n          category = 'Healthcare';\r\n        } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\r\n          category = 'Shopping';\r\n        } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\r\n          category = 'Education';\r\n        }\r\n        \r\n        return {\r\n          id: Date.now().toString(),\r\n          type: 'expense',\r\n          amount: amount,\r\n          category: category,\r\n          description: description.trim(),\r\n          date: new Date()\r\n        };\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  const getAnitaResponse = (userMessage: string, transaction?: Transaction): string => {\r\n    if (transaction) {\r\n      if (transaction.type === 'income') {\r\n        const responses = [\r\n          `Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`,\r\n          `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`,\r\n          `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`,\r\n          `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      } else {\r\n        const responses = [\r\n          `Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`,\r\n          `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`,\r\n          `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`,\r\n          `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      }\r\n    }\r\n    \r\n    const responses = [\r\n      \"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\",\r\n      \"What's the financial tea today? ☕ Share your income or expenses with me!\",\r\n      \"Spill the financial beans! 💅 I'm here to track your money flow\",\r\n      \"Let's talk money! 💸 Share what you've earned or spent today\",\r\n      \"What's happening with your wallet? 💳 Tell me about any transactions!\",\r\n      \"Money talk time! 💰 Share your income or expenses with me\",\r\n      \"Let's get financial! 📊 Tell me about your money moves today\",\r\n      \"What's the financial update? 💅 I'm ready to track your transactions!\"\r\n    ];\r\n    \r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const transaction = parseTransaction(inputText);\r\n    console.log('Parsed transaction:', transaction); // Debug log\r\n    \r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n      transaction: transaction || undefined\r\n    };\r\n\r\n    onMessageAdd?.(userMessage);\r\n    \r\n    // Save transaction to Supabase if one was parsed\r\n    if (transaction) {\r\n      console.log('Saving transaction to Supabase:', transaction); // Debug log\r\n      try {\r\n        const { data, error } = await transactionsApi.insertTransaction(transaction);\r\n        if (error) {\r\n          console.error('Error saving transaction to Supabase:', error);\r\n          // Still add to local state even if Supabase fails\r\n          onTransactionAdd?.(transaction);\r\n        } else {\r\n          console.log('Transaction saved successfully to Supabase:', data); // Debug log\r\n          // Transaction saved successfully to Supabase\r\n          onTransactionAdd?.(transaction);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error saving transaction to Supabase:', error);\r\n        // Still add to local state even if Supabase fails\r\n        onTransactionAdd?.(transaction);\r\n      }\r\n    } else {\r\n      console.log('No transaction parsed from message:', inputText); // Debug log\r\n    }\r\n    \r\n    setInputText('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate ANITA typing\r\n    setTimeout(() => {\r\n      const anitaResponse: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: getAnitaResponse(inputText, transaction || undefined),\r\n        sender: 'anita',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      onMessageAdd?.(anitaResponse);\r\n      setIsTyping(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-header\">\r\n        <h1 className=\"main-title\">ANITA</h1>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`message ${message.sender}`}>\r\n            <div className=\"message-avatar\">\r\n              {message.sender === 'anita' ? <Bot size={20} /> : <User size={20} />}\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"message-text\">{message.text}</div>\r\n              {message.transaction && (\r\n                <div className={`transaction-info ${message.transaction.type}`}>\r\n                  <span className=\"transaction-amount\">\r\n                    {message.transaction.type === 'income' ? '+' : '-'}${message.transaction.amount}\r\n                  </span>\r\n                  <span className=\"transaction-desc\">{message.transaction.description}</span>\r\n                </div>\r\n              )}\r\n              <div className=\"message-time\">\r\n                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {isTyping && (\r\n          <div className=\"message anita\">\r\n            <div className=\"message-avatar\">\r\n              <Bot size={20} />\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <div className=\"chat-input\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Ask ANITA about your finances...\"\r\n            rows={1}\r\n            className=\"input-field\"\r\n          />\r\n          <button \r\n            onClick={handleSendMessage}\r\n            disabled={!inputText.trim() || isTyping}\r\n            className=\"send-button\"\r\n          >\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}