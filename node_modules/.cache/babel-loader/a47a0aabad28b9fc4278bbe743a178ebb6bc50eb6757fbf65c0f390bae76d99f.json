{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\components\\\\ChatInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  onTransactionAdd,\n  onMessageAdd,\n  messages\n}) => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const parseTransaction = message => {\n    // Enhanced regex patterns for better detection\n    const incomePatterns = [/(?:income|earned|made|received|got|deposited|added)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:from|for|at|as)?\\s*(.+)/i, /(?:salary|wage|bonus|payment|refund|rebate)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|received|made|deposited|added)/i, /(?:plus|positive|gain)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bank|account)\\s+(?:deposit|credit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:i\\s+have|my\\s+balance\\s+is|i\\s+got)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:freelance|freelancing|gig|side\\s+hustle)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i];\n    const expensePatterns = [/(?:spent|expense|bought|paid|cost|withdrew|deducted)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:on|for|at|for)?\\s*(.+)/i, /(?:purchase|bought|paid|billed)\\s+(?:for\\s+)?(.+?)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|cost|paid|withdrew|deducted)/i, /(?:minus|negative|loss)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bank|account)\\s+(?:withdrawal|debit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:bill|invoice|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:i\\s+owe|i\\s+need\\s+to\\s+pay|debt\\s+of)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i, /(?:subscription|monthly|annual)\\s+(?:fee|cost|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i];\n\n    // Check for income\n    for (const pattern of incomePatterns) {\n      const match = message.match(pattern);\n      if (match) {\n        const amount = parseFloat(match[1] || match[2]);\n        const description = match[2] || match[1] || 'Income';\n        return {\n          id: Date.now().toString(),\n          type: 'income',\n          amount: amount,\n          category: 'Income',\n          description: description.trim(),\n          date: new Date()\n        };\n      }\n    }\n\n    // Check for expenses\n    for (const pattern of expensePatterns) {\n      const match = message.match(pattern);\n      if (match) {\n        const amount = parseFloat(match[1] || match[2]);\n        const description = match[2] || match[1] || 'Expense';\n\n        // Try to categorize the expense\n        let category = 'Other';\n        const desc = description.toLowerCase();\n        if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\n          category = 'Food';\n        } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\n          category = 'Transport';\n        } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\n          category = 'Housing';\n        } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\n          category = 'Entertainment';\n        } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\n          category = 'Healthcare';\n        } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\n          category = 'Shopping';\n        } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\n          category = 'Education';\n        }\n        return {\n          id: Date.now().toString(),\n          type: 'expense',\n          amount: amount,\n          category: category,\n          description: description.trim(),\n          date: new Date()\n        };\n      }\n    }\n    return null;\n  };\n  const getAnitaResponse = (userMessage, transaction) => {\n    // Get recent conversation context\n    const recentMessages = messages.slice(-6); // Last 6 messages for context\n    const hasRecentTransactions = recentMessages.some(m => m.transaction);\n    const recentTransactionCount = recentMessages.filter(m => m.transaction).length;\n    if (transaction) {\n      if (transaction.type === 'income') {\n        const responses = [`Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`, `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`, `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`, `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`];\n\n        // Add contextual responses based on recent activity\n        if (recentTransactionCount > 3) {\n          responses.push(`Another one! 💰 $${transaction.amount} income from \"${transaction.description}\" added. You're on fire today! 🔥`);\n        }\n        if (hasRecentTransactions) {\n          responses.push(`Great addition! 💚 $${transaction.amount} from \"${transaction.description}\" is now part of your financial story! 📈`);\n        }\n        return responses[Math.floor(Math.random() * responses.length)];\n      } else {\n        const responses = [`Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`, `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`, `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`, `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`];\n\n        // Add contextual responses based on recent activity\n        if (recentTransactionCount > 3) {\n          responses.push(`Another expense logged! 💸 $${transaction.amount} for \"${transaction.description}\". I'm keeping track of everything! 📝`);\n        }\n        if (hasRecentTransactions) {\n          responses.push(`Tracked! 💳 $${transaction.amount} spent on \"${transaction.description}\" is now part of your financial journey! 🛤️`);\n        }\n        return responses[Math.floor(Math.random() * responses.length)];\n      }\n    }\n\n    // Contextual responses based on conversation history\n    const hasLongConversation = messages.length > 10;\n    const hasManyTransactions = messages.filter(m => m.transaction).length > 5;\n    let responses = [\"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\", \"What's the financial tea today? ☕ Share your income or expenses with me!\", \"Spill the financial beans! 💅 I'm here to track your money flow\", \"Let's talk money! 💸 Share what you've earned or spent today\", \"What's happening with your wallet? 💳 Tell me about any transactions!\", \"Money talk time! 💰 Share your income or expenses with me\", \"Let's get financial! 📊 Tell me about your money moves today\", \"What's the financial update? 💅 I'm ready to track your transactions!\"];\n\n    // Add contextual responses based on conversation history\n    if (hasLongConversation) {\n      responses.push(\"I remember our conversation! 💭 What's the latest with your finances?\");\n      responses.push(\"Back for more financial tracking? 💰 I'm here and ready!\");\n    }\n    if (hasManyTransactions) {\n      responses.push(\"I've been tracking your transactions! 📊 What's new in your financial world?\");\n      responses.push(\"Your financial data is looking good! 💚 Any updates to share?\");\n    }\n\n    // Check for specific conversation patterns\n    const lastUserMessage = messages.filter(m => m.sender === 'user').slice(-1)[0];\n    if (lastUserMessage && lastUserMessage.text.toLowerCase().includes('thank')) {\n      responses.push(\"You're welcome! 💅 I'm here whenever you need financial tracking help!\");\n    }\n    if (lastUserMessage && lastUserMessage.text.toLowerCase().includes('help')) {\n      responses.push(\"I'm here to help! 💪 You can tell me about income, expenses, or ask about your financial data!\");\n    }\n    return responses[Math.floor(Math.random() * responses.length)];\n  };\n  const handleSendMessage = async () => {\n    if (!inputText.trim()) return;\n    const transaction = parseTransaction(inputText);\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date(),\n      transaction: transaction || undefined\n    };\n    onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(userMessage);\n    if (transaction) {\n      onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n    }\n    setInputText('');\n    setIsTyping(true);\n\n    // Simulate ANITA typing\n    setTimeout(() => {\n      const anitaResponse = {\n        id: (Date.now() + 1).toString(),\n        text: getAnitaResponse(inputText, transaction || undefined),\n        sender: 'anita',\n        timestamp: new Date()\n      };\n      onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(anitaResponse);\n      setIsTyping(false);\n    }, 1500);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-title\",\n        children: \"ANITA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: message.sender === 'anita' ? /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 45\n          }, this) : /*#__PURE__*/_jsxDEV(User, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this), message.transaction && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `transaction-info ${message.transaction.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-amount\",\n              children: [message.transaction.type === 'income' ? '+' : '-', \"$\", message.transaction.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-desc\",\n              children: message.transaction.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: message.timestamp.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message anita\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask ANITA about your finances...\",\n          rows: 1,\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim() || isTyping,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"5fjmnZ1R3JmH/pzHPEhD9iv3+KQ=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Send","Bot","User","jsxDEV","_jsxDEV","ChatInterface","onTransactionAdd","onMessageAdd","messages","_s","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","parseTransaction","message","incomePatterns","expensePatterns","pattern","match","amount","parseFloat","description","id","Date","now","toString","type","category","trim","date","desc","toLowerCase","includes","getAnitaResponse","userMessage","transaction","recentMessages","slice","hasRecentTransactions","some","m","recentTransactionCount","filter","length","responses","push","Math","floor","random","hasLongConversation","hasManyTransactions","lastUserMessage","sender","text","handleSendMessage","timestamp","undefined","setTimeout","anitaResponse","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","size","toLocaleTimeString","hour","minute","ref","value","onChange","target","onKeyPress","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Send, Bot, User } from 'lucide-react';\r\nimport './ChatInterface.css';\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface ChatInterfaceProps {\r\n  onTransactionAdd?: (transaction: Transaction) => void;\r\n  onMessageAdd?: (message: Message) => void;\r\n  onClearConversation?: () => void;\r\n  messages: Message[];\r\n}\r\n\r\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({ onTransactionAdd, onMessageAdd, messages }) => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const parseTransaction = (message: string): Transaction | null => {\r\n    // Enhanced regex patterns for better detection\r\n    const incomePatterns = [\r\n      /(?:income|earned|made|received|got|deposited|added)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:from|for|at|as)?\\s*(.+)/i,\r\n      /(?:salary|wage|bonus|payment|refund|rebate)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:income|earned|received|made|deposited|added)/i,\r\n      /(?:plus|positive|gain)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bank|account)\\s+(?:deposit|credit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:i\\s+have|my\\s+balance\\s+is|i\\s+got)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:freelance|freelancing|gig|side\\s+hustle)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i\r\n    ];\r\n    \r\n    const expensePatterns = [\r\n      /(?:spent|expense|bought|paid|cost|withdrew|deducted)\\s+\\$?(\\d+(?:\\.\\d{2})?)\\s*(?:on|for|at|for)?\\s*(.+)/i,\r\n      /(?:purchase|bought|paid|billed)\\s+(?:for\\s+)?(.+?)\\s+(?:for\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /\\$(\\d+(?:\\.\\d{2})?)\\s+(?:spent|expense|cost|paid|withdrew|deducted)/i,\r\n      /(?:minus|negative|loss)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bank|account)\\s+(?:withdrawal|debit)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:bill|invoice|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:i\\s+owe|i\\s+need\\s+to\\s+pay|debt\\s+of)\\s+\\$?(\\d+(?:\\.\\d{2})?)/i,\r\n      /(?:subscription|monthly|annual)\\s+(?:fee|cost|charge)\\s+(?:of\\s+)?\\$?(\\d+(?:\\.\\d{2})?)/i\r\n    ];\r\n    \r\n    // Check for income\r\n    for (const pattern of incomePatterns) {\r\n      const match = message.match(pattern);\r\n      if (match) {\r\n        const amount = parseFloat(match[1] || match[2]);\r\n        const description = match[2] || match[1] || 'Income';\r\n        \r\n        return {\r\n          id: Date.now().toString(),\r\n          type: 'income',\r\n          amount: amount,\r\n          category: 'Income',\r\n          description: description.trim(),\r\n          date: new Date()\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Check for expenses\r\n    for (const pattern of expensePatterns) {\r\n      const match = message.match(pattern);\r\n      if (match) {\r\n        const amount = parseFloat(match[1] || match[2]);\r\n        const description = match[2] || match[1] || 'Expense';\r\n        \r\n        // Try to categorize the expense\r\n        let category = 'Other';\r\n        const desc = description.toLowerCase();\r\n        if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\r\n          category = 'Food';\r\n        } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\r\n          category = 'Transport';\r\n        } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\r\n          category = 'Housing';\r\n        } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\r\n          category = 'Entertainment';\r\n        } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\r\n          category = 'Healthcare';\r\n        } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\r\n          category = 'Shopping';\r\n        } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\r\n          category = 'Education';\r\n        }\r\n        \r\n        return {\r\n          id: Date.now().toString(),\r\n          type: 'expense',\r\n          amount: amount,\r\n          category: category,\r\n          description: description.trim(),\r\n          date: new Date()\r\n        };\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  const getAnitaResponse = (userMessage: string, transaction?: Transaction): string => {\r\n    // Get recent conversation context\r\n    const recentMessages = messages.slice(-6); // Last 6 messages for context\r\n    const hasRecentTransactions = recentMessages.some(m => m.transaction);\r\n    const recentTransactionCount = recentMessages.filter(m => m.transaction).length;\r\n    \r\n    if (transaction) {\r\n      if (transaction.type === 'income') {\r\n        const responses = [\r\n          `Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`,\r\n          `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`,\r\n          `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`,\r\n          `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`\r\n        ];\r\n        \r\n        // Add contextual responses based on recent activity\r\n        if (recentTransactionCount > 3) {\r\n          responses.push(`Another one! 💰 $${transaction.amount} income from \"${transaction.description}\" added. You're on fire today! 🔥`);\r\n        }\r\n        if (hasRecentTransactions) {\r\n          responses.push(`Great addition! 💚 $${transaction.amount} from \"${transaction.description}\" is now part of your financial story! 📈`);\r\n        }\r\n        \r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      } else {\r\n        const responses = [\r\n          `Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`,\r\n          `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`,\r\n          `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`,\r\n          `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`\r\n        ];\r\n        \r\n        // Add contextual responses based on recent activity\r\n        if (recentTransactionCount > 3) {\r\n          responses.push(`Another expense logged! 💸 $${transaction.amount} for \"${transaction.description}\". I'm keeping track of everything! 📝`);\r\n        }\r\n        if (hasRecentTransactions) {\r\n          responses.push(`Tracked! 💳 $${transaction.amount} spent on \"${transaction.description}\" is now part of your financial journey! 🛤️`);\r\n        }\r\n        \r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      }\r\n    }\r\n    \r\n    // Contextual responses based on conversation history\r\n    const hasLongConversation = messages.length > 10;\r\n    const hasManyTransactions = messages.filter(m => m.transaction).length > 5;\r\n    \r\n    let responses = [\r\n      \"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\",\r\n      \"What's the financial tea today? ☕ Share your income or expenses with me!\",\r\n      \"Spill the financial beans! 💅 I'm here to track your money flow\",\r\n      \"Let's talk money! 💸 Share what you've earned or spent today\",\r\n      \"What's happening with your wallet? 💳 Tell me about any transactions!\",\r\n      \"Money talk time! 💰 Share your income or expenses with me\",\r\n      \"Let's get financial! 📊 Tell me about your money moves today\",\r\n      \"What's the financial update? 💅 I'm ready to track your transactions!\"\r\n    ];\r\n    \r\n    // Add contextual responses based on conversation history\r\n    if (hasLongConversation) {\r\n      responses.push(\"I remember our conversation! 💭 What's the latest with your finances?\");\r\n      responses.push(\"Back for more financial tracking? 💰 I'm here and ready!\");\r\n    }\r\n    \r\n    if (hasManyTransactions) {\r\n      responses.push(\"I've been tracking your transactions! 📊 What's new in your financial world?\");\r\n      responses.push(\"Your financial data is looking good! 💚 Any updates to share?\");\r\n    }\r\n    \r\n    // Check for specific conversation patterns\r\n    const lastUserMessage = messages.filter(m => m.sender === 'user').slice(-1)[0];\r\n    if (lastUserMessage && lastUserMessage.text.toLowerCase().includes('thank')) {\r\n      responses.push(\"You're welcome! 💅 I'm here whenever you need financial tracking help!\");\r\n    }\r\n    \r\n    if (lastUserMessage && lastUserMessage.text.toLowerCase().includes('help')) {\r\n      responses.push(\"I'm here to help! 💪 You can tell me about income, expenses, or ask about your financial data!\");\r\n    }\r\n    \r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const transaction = parseTransaction(inputText);\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n      transaction: transaction || undefined\r\n    };\r\n\r\n    onMessageAdd?.(userMessage);\r\n    \r\n    if (transaction) {\r\n      onTransactionAdd?.(transaction);\r\n    }\r\n    \r\n    setInputText('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate ANITA typing\r\n    setTimeout(() => {\r\n      const anitaResponse: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: getAnitaResponse(inputText, transaction || undefined),\r\n        sender: 'anita',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      onMessageAdd?.(anitaResponse);\r\n      setIsTyping(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-header\">\r\n        <h1 className=\"main-title\">ANITA</h1>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`message ${message.sender}`}>\r\n            <div className=\"message-avatar\">\r\n              {message.sender === 'anita' ? <Bot size={20} /> : <User size={20} />}\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"message-text\">{message.text}</div>\r\n              {message.transaction && (\r\n                <div className={`transaction-info ${message.transaction.type}`}>\r\n                  <span className=\"transaction-amount\">\r\n                    {message.transaction.type === 'income' ? '+' : '-'}${message.transaction.amount}\r\n                  </span>\r\n                  <span className=\"transaction-desc\">{message.transaction.description}</span>\r\n                </div>\r\n              )}\r\n              <div className=\"message-time\">\r\n                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {isTyping && (\r\n          <div className=\"message anita\">\r\n            <div className=\"message-avatar\">\r\n              <Bot size={20} />\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <div className=\"chat-input\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Ask ANITA about your finances...\"\r\n            rows={1}\r\n            className=\"input-field\"\r\n          />\r\n          <button \r\n            onClick={handleSendMessage}\r\n            disabled={!inputText.trim() || isTyping}\r\n            className=\"send-button\"\r\n          >\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}