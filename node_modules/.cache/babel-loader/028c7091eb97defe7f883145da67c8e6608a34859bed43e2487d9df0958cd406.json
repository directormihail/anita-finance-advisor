{"ast":null,"code":"// ANITA Finance Advisor - Supabase Client\n// This file provides the Supabase client for direct database operations\n\nimport { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n// Transaction operations\nexport async function saveTransaction(transaction, userId) {\n  const {\n    data,\n    error\n  } = await supabase.from('transactions').insert([{\n    user_id: userId,\n    type: transaction.type,\n    amount: transaction.amount,\n    category: transaction.category,\n    description: transaction.description\n  }]).select();\n  if (error) {\n    console.error('Supabase insert error:', error);\n    throw error;\n  }\n  return data;\n}\nexport async function fetchTransactions(userId) {\n  const {\n    data,\n    error\n  } = await supabase.from('transactions').select('*').eq('user_id', userId).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('Supabase fetch error:', error);\n    throw error;\n  }\n  return data || [];\n}\nexport async function saveMessage(message, userId) {\n  const {\n    data,\n    error\n  } = await supabase.from('messages').insert([{\n    user_id: userId,\n    content: message.content,\n    message_type: message.message_type\n  }]).select();\n  if (error) {\n    console.error('Supabase message insert error:', error);\n    throw error;\n  }\n  return data;\n}\nexport async function fetchMessages(userId) {\n  const {\n    data,\n    error\n  } = await supabase.from('messages').select('*').eq('user_id', userId).order('created_at', {\n    ascending: true\n  });\n  if (error) {\n    console.error('Supabase messages fetch error:', error);\n    throw error;\n  }\n  return data || [];\n}\nexport async function getOrCreateDefaultUser() {\n  // First try to get existing default user\n  const {\n    data: existingUser,\n    error: fetchError\n  } = await supabase.from('users').select('*').eq('username', 'default_user').single();\n  if (existingUser && !fetchError) {\n    return existingUser;\n  }\n\n  // Create new default user if none exists\n  const {\n    data: newUser,\n    error: createError\n  } = await supabase.from('users').insert([{\n    username: 'default_user',\n    email: 'default@anita.com',\n    display_name: 'Default User'\n  }]).select().single();\n  if (createError) {\n    console.error('Error creating default user:', createError);\n    throw createError;\n  }\n  return newUser;\n}\n\n// Real-time subscription helper\nexport function subscribeToTransactions(userId, callback) {\n  const channel = supabase.channel('public:transactions').on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'transactions',\n    filter: `user_id=eq.${userId}`\n  }, payload => {\n    console.log('New transaction received:', payload.new);\n    callback(payload.new);\n  }).subscribe();\n  return () => {\n    supabase.removeChannel(channel);\n  };\n}","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","saveTransaction","transaction","userId","data","error","from","insert","user_id","type","amount","category","description","select","console","fetchTransactions","eq","order","ascending","saveMessage","message","content","message_type","fetchMessages","getOrCreateDefaultUser","existingUser","fetchError","single","newUser","createError","username","email","display_name","subscribeToTransactions","callback","channel","on","event","schema","table","filter","payload","log","new","subscribe","removeChannel"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabaseClient.ts"],"sourcesContent":["// ANITA Finance Advisor - Supabase Client\r\n// This file provides the Supabase client for direct database operations\r\n\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\nexport interface Transaction {\r\n  id?: string;\r\n  user_id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category?: string;\r\n  description?: string;\r\n  created_at?: string;\r\n}\r\n\r\nexport interface Message {\r\n  id?: string;\r\n  user_id: string;\r\n  content: string;\r\n  message_type: 'user' | 'bot';\r\n  created_at?: string;\r\n}\r\n\r\n// Transaction operations\r\nexport async function saveTransaction(transaction: Omit<Transaction, 'id' | 'created_at'>, userId: string) {\r\n  const { data, error } = await supabase\r\n    .from('transactions')\r\n    .insert([{\r\n      user_id: userId,\r\n      type: transaction.type,\r\n      amount: transaction.amount,\r\n      category: transaction.category,\r\n      description: transaction.description\r\n    }])\r\n    .select();\r\n  \r\n  if (error) {\r\n    console.error('Supabase insert error:', error);\r\n    throw error;\r\n  }\r\n  \r\n  return data;\r\n}\r\n\r\nexport async function fetchTransactions(userId: string): Promise<Transaction[]> {\r\n  const { data, error } = await supabase\r\n    .from('transactions')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('created_at', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Supabase fetch error:', error);\r\n    throw error;\r\n  }\r\n  \r\n  return data || [];\r\n}\r\n\r\nexport async function saveMessage(message: Omit<Message, 'id' | 'created_at'>, userId: string) {\r\n  const { data, error } = await supabase\r\n    .from('messages')\r\n    .insert([{\r\n      user_id: userId,\r\n      content: message.content,\r\n      message_type: message.message_type\r\n    }])\r\n    .select();\r\n  \r\n  if (error) {\r\n    console.error('Supabase message insert error:', error);\r\n    throw error;\r\n  }\r\n  \r\n  return data;\r\n}\r\n\r\nexport async function fetchMessages(userId: string): Promise<Message[]> {\r\n  const { data, error } = await supabase\r\n    .from('messages')\r\n    .select('*')\r\n    .eq('user_id', userId)\r\n    .order('created_at', { ascending: true });\r\n  \r\n  if (error) {\r\n    console.error('Supabase messages fetch error:', error);\r\n    throw error;\r\n  }\r\n  \r\n  return data || [];\r\n}\r\n\r\nexport async function getOrCreateDefaultUser() {\r\n  // First try to get existing default user\r\n  const { data: existingUser, error: fetchError } = await supabase\r\n    .from('users')\r\n    .select('*')\r\n    .eq('username', 'default_user')\r\n    .single();\r\n  \r\n  if (existingUser && !fetchError) {\r\n    return existingUser;\r\n  }\r\n  \r\n  // Create new default user if none exists\r\n  const { data: newUser, error: createError } = await supabase\r\n    .from('users')\r\n    .insert([{\r\n      username: 'default_user',\r\n      email: 'default@anita.com',\r\n      display_name: 'Default User'\r\n    }])\r\n    .select()\r\n    .single();\r\n  \r\n  if (createError) {\r\n    console.error('Error creating default user:', createError);\r\n    throw createError;\r\n  }\r\n  \r\n  return newUser;\r\n}\r\n\r\n// Real-time subscription helper\r\nexport function subscribeToTransactions(userId: string, callback: (transaction: Transaction) => void) {\r\n  const channel = supabase\r\n    .channel('public:transactions')\r\n    .on('postgres_changes', \r\n      { \r\n        event: 'INSERT', \r\n        schema: 'public', \r\n        table: 'transactions',\r\n        filter: `user_id=eq.${userId}`\r\n      }, \r\n      (payload) => {\r\n        console.log('New transaction received:', payload.new);\r\n        callback(payload.new as Transaction);\r\n      }\r\n    )\r\n    .subscribe();\r\n  \r\n  return () => {\r\n    supabase.removeChannel(channel);\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}