{"ast":null,"code":"var _MCPSyncService;\n// ANITA Finance Advisor - MCP Sync Service\n// This service automatically syncs app data to Supabase via MCP\n\nexport class MCPSyncService {\n  constructor() {\n    this.syncQueue = [];\n    this.isProcessing = false;\n  }\n  static getInstance() {\n    if (!MCPSyncService.instance) {\n      MCPSyncService.instance = new MCPSyncService();\n    }\n    return MCPSyncService.instance;\n  }\n\n  // Add data to sync queue\n  addToSyncQueue(type, data) {\n    this.syncQueue.push({\n      type,\n      data,\n      timestamp: Date.now()\n    });\n    this.processSyncQueue();\n  }\n\n  // Process the sync queue\n  async processSyncQueue() {\n    if (this.isProcessing || this.syncQueue.length === 0) return;\n    this.isProcessing = true;\n    console.log('üîÑ Processing MCP sync queue...');\n    try {\n      // Process all items in the queue\n      while (this.syncQueue.length > 0) {\n        const item = this.syncQueue.shift();\n        await this.syncItem(item);\n      }\n    } catch (error) {\n      console.error('‚ùå Error processing sync queue:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  // Sync individual item\n  async syncItem(item) {\n    console.log(`üì° Syncing ${item.type} to Supabase via MCP:`, item.data);\n\n    // This is where the MCP assistant would handle the actual database operations\n    // For now, we'll just log the data that needs to be synced\n    if (item.type === 'transaction') {\n      console.log('üíæ Transaction ready for MCP Supabase save:', {\n        user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n        type: item.data.type,\n        amount: item.data.amount,\n        category: item.data.category,\n        description: item.data.description\n      });\n    } else if (item.type === 'message') {\n      console.log('üíæ Message ready for MCP Supabase save:', {\n        user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\n        content: item.data.text,\n        message_type: item.data.sender === 'anita' ? 'bot' : 'user'\n      });\n    }\n  }\n\n  // Get current data from localStorage\n  getCurrentData() {\n    const transactions = this.getTransactionsFromStorage();\n    const messages = this.getMessagesFromStorage();\n    return {\n      transactions,\n      messages\n    };\n  }\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        return JSON.parse(saved);\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        return JSON.parse(saved);\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\n_MCPSyncService = MCPSyncService;\nMCPSyncService.instance = void 0;\nexport const mcpSyncService = MCPSyncService.getInstance();","map":{"version":3,"names":["MCPSyncService","constructor","syncQueue","isProcessing","getInstance","instance","addToSyncQueue","type","data","push","timestamp","Date","now","processSyncQueue","length","console","log","item","shift","syncItem","error","user_id","amount","category","description","content","text","message_type","sender","getCurrentData","transactions","getTransactionsFromStorage","messages","getMessagesFromStorage","saved","localStorage","getItem","JSON","parse","_MCPSyncService","mcpSyncService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/mcpSync.ts"],"sourcesContent":["// ANITA Finance Advisor - MCP Sync Service\r\n// This service automatically syncs app data to Supabase via MCP\r\n\r\nexport interface SyncData {\r\n  transactions: any[];\r\n  messages: any[];\r\n}\r\n\r\nexport class MCPSyncService {\r\n  private static instance: MCPSyncService;\r\n  private syncQueue: any[] = [];\r\n  private isProcessing = false;\r\n\r\n  static getInstance(): MCPSyncService {\r\n    if (!MCPSyncService.instance) {\r\n      MCPSyncService.instance = new MCPSyncService();\r\n    }\r\n    return MCPSyncService.instance;\r\n  }\r\n\r\n  // Add data to sync queue\r\n  addToSyncQueue(type: 'transaction' | 'message', data: any) {\r\n    this.syncQueue.push({ type, data, timestamp: Date.now() });\r\n    this.processSyncQueue();\r\n  }\r\n\r\n  // Process the sync queue\r\n  private async processSyncQueue() {\r\n    if (this.isProcessing || this.syncQueue.length === 0) return;\r\n\r\n    this.isProcessing = true;\r\n    console.log('üîÑ Processing MCP sync queue...');\r\n\r\n    try {\r\n      // Process all items in the queue\r\n      while (this.syncQueue.length > 0) {\r\n        const item = this.syncQueue.shift();\r\n        await this.syncItem(item);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error processing sync queue:', error);\r\n    } finally {\r\n      this.isProcessing = false;\r\n    }\r\n  }\r\n\r\n  // Sync individual item\r\n  private async syncItem(item: any) {\r\n    console.log(`üì° Syncing ${item.type} to Supabase via MCP:`, item.data);\r\n    \r\n    // This is where the MCP assistant would handle the actual database operations\r\n    // For now, we'll just log the data that needs to be synced\r\n    if (item.type === 'transaction') {\r\n      console.log('üíæ Transaction ready for MCP Supabase save:', {\r\n        user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n        type: item.data.type,\r\n        amount: item.data.amount,\r\n        category: item.data.category,\r\n        description: item.data.description\r\n      });\r\n    } else if (item.type === 'message') {\r\n      console.log('üíæ Message ready for MCP Supabase save:', {\r\n        user_id: 'f04c9ae6-31d6-4ab2-963e-12920d27894d',\r\n        content: item.data.text,\r\n        message_type: item.data.sender === 'anita' ? 'bot' : 'user'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get current data from localStorage\r\n  getCurrentData(): SyncData {\r\n    const transactions = this.getTransactionsFromStorage();\r\n    const messages = this.getMessagesFromStorage();\r\n    return { transactions, messages };\r\n  }\r\n\r\n  private getTransactionsFromStorage(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        return JSON.parse(saved);\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getMessagesFromStorage(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        return JSON.parse(saved);\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const mcpSyncService = MCPSyncService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}