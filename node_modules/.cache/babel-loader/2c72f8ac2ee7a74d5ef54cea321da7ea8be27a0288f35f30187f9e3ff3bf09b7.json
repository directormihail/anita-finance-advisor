{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatInterface from './components/ChatInterface';\nimport Settings from './components/Settings';\nimport FinancePage from './components/FinancePage';\nimport { transactionsApi } from './supabase';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentView, setCurrentView] = useState('chat');\n  const [transactions, setTransactions] = useState([]);\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hey! Any new expenses or incomes today?\",\n    sender: 'anita',\n    timestamp: new Date()\n  }]);\n  const [theme, setTheme] = useState('dark');\n\n  // Load theme, transactions, and messages on mount\n  useEffect(() => {\n    const loadData = async () => {\n      // Load theme from localStorage\n      const savedTheme = localStorage.getItem('anita-theme');\n      if (savedTheme) {\n        setTheme(savedTheme);\n      }\n\n      // Load transactions from Supabase\n      try {\n        console.log('🔄 Loading transactions from Supabase...');\n        const {\n          data,\n          error\n        } = await transactionsApi.fetchTransactions();\n        if (error) {\n          console.error('❌ Error loading transactions from Supabase:', error);\n          // Fallback to localStorage if Supabase fails\n          const savedTransactions = localStorage.getItem('anita-transactions');\n          if (savedTransactions) {\n            try {\n              const parsed = JSON.parse(savedTransactions);\n              const transactionsWithDates = parsed.map(t => ({\n                ...t,\n                date: new Date(t.date)\n              }));\n              setTransactions(transactionsWithDates);\n              console.log('📱 Loaded transactions from localStorage fallback');\n            } catch (error) {\n              console.error('Error loading transactions from localStorage:', error);\n            }\n          }\n        } else {\n          // Convert Supabase data to local format\n          const transactionsWithDates = (data || []).map(t => ({\n            id: t.id.toString(),\n            type: t.type,\n            amount: parseFloat(t.amount),\n            category: t.category,\n            description: t.description,\n            date: new Date(t.date)\n          }));\n          setTransactions(transactionsWithDates);\n          console.log(`✅ Loaded ${transactionsWithDates.length} transactions from Supabase`);\n        }\n      } catch (error) {\n        console.error('❌ Error loading transactions:', error);\n        // Fallback to localStorage\n        const savedTransactions = localStorage.getItem('anita-transactions');\n        if (savedTransactions) {\n          try {\n            const parsed = JSON.parse(savedTransactions);\n            const transactionsWithDates = parsed.map(t => ({\n              ...t,\n              date: new Date(t.date)\n            }));\n            setTransactions(transactionsWithDates);\n            console.log('📱 Loaded transactions from localStorage fallback');\n          } catch (error) {\n            console.error('Error loading transactions from localStorage:', error);\n          }\n        }\n      }\n\n      // Load messages from localStorage (keeping this local for now)\n      const savedMessages = localStorage.getItem('anita-messages');\n      if (savedMessages) {\n        try {\n          const parsed = JSON.parse(savedMessages);\n          const messagesWithDates = parsed.map(m => ({\n            ...m,\n            timestamp: new Date(m.timestamp)\n          }));\n          setMessages(messagesWithDates);\n        } catch (error) {\n          console.error('Error loading messages from localStorage:', error);\n        }\n      }\n    };\n    loadData();\n  }, []);\n\n  // Auto-refresh transactions from Supabase every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshTransactionsFromSupabase();\n    }, 30000); // 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('anita-theme', theme);\n  }, [theme]);\n  const handleTransactionAdd = async transaction => {\n    // Transaction is already saved by ChatInterface, this is just for local state updates\n    // Real-time updates will handle the UI refresh\n    console.log('✅ Transaction added to local state:', transaction);\n  };\n  const handleMessageAdd = async message => {\n    if (!currentUser) return;\n    try {\n      const {\n        data,\n        error\n      } = await messagesApi.insertMessage(currentUser.id, message.text, message.sender === 'user' ? 'user' : 'bot');\n      if (error) {\n        console.error('❌ Error adding message:', error);\n        return;\n      }\n      console.log('✅ Message added:', data);\n    } catch (error) {\n      console.error('❌ Error adding message:', error);\n    }\n  };\n  const handleThemeChange = newTheme => {\n    setTheme(newTheme);\n  };\n  const handleUserChange = async username => {\n    try {\n      const {\n        data: user,\n        error\n      } = await usersApi.getOrCreateUser(username);\n      if (user && !error) {\n        setCurrentUser(user);\n        localStorage.setItem('anita-username', username);\n        console.log('✅ Switched to user:', user);\n      } else {\n        console.error('❌ Error switching user:', error);\n      }\n    } catch (error) {\n      console.error('❌ Error switching user:', error);\n    }\n  };\n\n  // Calculate financial summary\n  const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);\n  const totalExpenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);\n  const netBalance = totalIncome - totalExpenses;\n\n  // Get all transactions sorted by date (newest first)\n  const allTransactions = [...transactions].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading ANITA Finance Advisor...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onViewChange: setCurrentView,\n      currentView: currentView,\n      totalBalance: netBalance,\n      monthlyIncome: totalIncome,\n      monthlyExpenses: totalExpenses,\n      recentTransactions: allTransactions,\n      currentUser: currentUser,\n      users: users,\n      onUserChange: handleUserChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentView === 'chat' && /*#__PURE__*/_jsxDEV(ChatInterface, {\n        onTransactionAdd: handleTransactionAdd,\n        onMessageAdd: handleMessageAdd,\n        messages: messages,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), currentView === 'settings' && /*#__PURE__*/_jsxDEV(Settings, {\n        onThemeChange: handleThemeChange,\n        currentTheme: theme,\n        currentUser: currentUser,\n        onUserChange: handleUserChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), currentView === 'finance' && /*#__PURE__*/_jsxDEV(FinancePage, {\n        transactions: transactions,\n        users: users,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"YMlA3PX4BSQGNslSGpqjX8mL/eM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatInterface","Settings","FinancePage","transactionsApi","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","transactions","setTransactions","messages","setMessages","id","text","sender","timestamp","Date","theme","setTheme","loadData","savedTheme","localStorage","getItem","console","log","data","error","fetchTransactions","savedTransactions","parsed","JSON","parse","transactionsWithDates","map","t","date","toString","type","amount","parseFloat","category","description","length","savedMessages","messagesWithDates","m","interval","setInterval","refreshTransactionsFromSupabase","clearInterval","document","documentElement","setAttribute","setItem","handleTransactionAdd","transaction","handleMessageAdd","message","currentUser","messagesApi","insertMessage","handleThemeChange","newTheme","handleUserChange","username","user","usersApi","getOrCreateUser","setCurrentUser","totalIncome","filter","reduce","sum","totalExpenses","netBalance","allTransactions","sort","a","b","getTime","isLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onViewChange","totalBalance","monthlyIncome","monthlyExpenses","recentTransactions","users","onUserChange","onTransactionAdd","onMessageAdd","onThemeChange","currentTheme","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Settings from './components/Settings';\r\nimport FinancePage from './components/FinancePage';\r\nimport { transactionsApi } from './supabase';\r\nimport './App.css';\r\n\r\ntype ViewType = 'chat' | 'settings' | 'finance';\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<ViewType>('chat');\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hey! Any new expenses or incomes today?\",\r\n      sender: 'anita',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [theme, setTheme] = useState<Theme>('dark');\r\n\r\n  // Load theme, transactions, and messages on mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      // Load theme from localStorage\r\n      const savedTheme = localStorage.getItem('anita-theme') as Theme;\r\n      if (savedTheme) {\r\n        setTheme(savedTheme);\r\n      }\r\n\r\n      // Load transactions from Supabase\r\n      try {\r\n        console.log('🔄 Loading transactions from Supabase...');\r\n        const { data, error } = await transactionsApi.fetchTransactions();\r\n        if (error) {\r\n          console.error('❌ Error loading transactions from Supabase:', error);\r\n          // Fallback to localStorage if Supabase fails\r\n          const savedTransactions = localStorage.getItem('anita-transactions');\r\n          if (savedTransactions) {\r\n            try {\r\n              const parsed = JSON.parse(savedTransactions);\r\n              const transactionsWithDates = parsed.map((t: any) => ({\r\n                ...t,\r\n                date: new Date(t.date)\r\n              }));\r\n              setTransactions(transactionsWithDates);\r\n              console.log('📱 Loaded transactions from localStorage fallback');\r\n            } catch (error) {\r\n              console.error('Error loading transactions from localStorage:', error);\r\n            }\r\n          }\r\n        } else {\r\n          // Convert Supabase data to local format\r\n          const transactionsWithDates = (data || []).map((t: any) => ({\r\n            id: t.id.toString(),\r\n            type: t.type,\r\n            amount: parseFloat(t.amount),\r\n            category: t.category,\r\n            description: t.description,\r\n            date: new Date(t.date)\r\n          }));\r\n          setTransactions(transactionsWithDates);\r\n          console.log(`✅ Loaded ${transactionsWithDates.length} transactions from Supabase`);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error loading transactions:', error);\r\n        // Fallback to localStorage\r\n        const savedTransactions = localStorage.getItem('anita-transactions');\r\n        if (savedTransactions) {\r\n          try {\r\n            const parsed = JSON.parse(savedTransactions);\r\n            const transactionsWithDates = parsed.map((t: any) => ({\r\n              ...t,\r\n              date: new Date(t.date)\r\n            }));\r\n            setTransactions(transactionsWithDates);\r\n            console.log('📱 Loaded transactions from localStorage fallback');\r\n          } catch (error) {\r\n            console.error('Error loading transactions from localStorage:', error);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load messages from localStorage (keeping this local for now)\r\n      const savedMessages = localStorage.getItem('anita-messages');\r\n      if (savedMessages) {\r\n        try {\r\n          const parsed = JSON.parse(savedMessages);\r\n          const messagesWithDates = parsed.map((m: any) => ({\r\n            ...m,\r\n            timestamp: new Date(m.timestamp)\r\n          }));\r\n          setMessages(messagesWithDates);\r\n        } catch (error) {\r\n          console.error('Error loading messages from localStorage:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Auto-refresh transactions from Supabase every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      refreshTransactionsFromSupabase();\r\n    }, 30000); // 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('anita-theme', theme);\r\n  }, [theme]);\r\n\r\n  const handleTransactionAdd = async (transaction: Transaction) => {\r\n    // Transaction is already saved by ChatInterface, this is just for local state updates\r\n    // Real-time updates will handle the UI refresh\r\n    console.log('✅ Transaction added to local state:', transaction);\r\n  };\r\n\r\n  const handleMessageAdd = async (message: Message) => {\r\n    if (!currentUser) return;\r\n\r\n    try {\r\n      const { data, error } = await messagesApi.insertMessage(\r\n        currentUser.id,\r\n        message.text,\r\n        message.sender === 'user' ? 'user' : 'bot'\r\n      );\r\n\r\n      if (error) {\r\n        console.error('❌ Error adding message:', error);\r\n        return;\r\n      }\r\n\r\n      console.log('✅ Message added:', data);\r\n    } catch (error) {\r\n      console.error('❌ Error adding message:', error);\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  const handleUserChange = async (username: string) => {\r\n    try {\r\n      const { data: user, error } = await usersApi.getOrCreateUser(username);\r\n      \r\n      if (user && !error) {\r\n        setCurrentUser(user);\r\n        localStorage.setItem('anita-username', username);\r\n        console.log('✅ Switched to user:', user);\r\n      } else {\r\n        console.error('❌ Error switching user:', error);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error switching user:', error);\r\n    }\r\n  };\r\n\r\n  // Calculate financial summary\r\n  const totalIncome = transactions\r\n    .filter(t => t.type === 'income')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const totalExpenses = transactions\r\n    .filter(t => t.type === 'expense')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const netBalance = totalIncome - totalExpenses;\r\n\r\n  // Get all transactions sorted by date (newest first)\r\n  const allTransactions = [...transactions]\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"app loading\">\r\n        <div className=\"loading-spinner\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading ANITA Finance Advisor...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar \r\n        onViewChange={setCurrentView} \r\n        currentView={currentView}\r\n        totalBalance={netBalance}\r\n        monthlyIncome={totalIncome}\r\n        monthlyExpenses={totalExpenses}\r\n        recentTransactions={allTransactions}\r\n        currentUser={currentUser}\r\n        users={users}\r\n        onUserChange={handleUserChange}\r\n      />\r\n      <div className=\"main-content\">\r\n        {currentView === 'chat' && (\r\n          <ChatInterface \r\n            onTransactionAdd={handleTransactionAdd} \r\n            onMessageAdd={handleMessageAdd} \r\n            messages={messages}\r\n            currentUser={currentUser}\r\n          />\r\n        )}\r\n        {currentView === 'settings' && (\r\n          <Settings \r\n            onThemeChange={handleThemeChange} \r\n            currentTheme={theme}\r\n            currentUser={currentUser}\r\n            onUserChange={handleUserChange}\r\n          />\r\n        )}\r\n        {currentView === 'finance' && (\r\n          <FinancePage \r\n            transactions={transactions}\r\n            users={users}\r\n            currentUser={currentUser}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}