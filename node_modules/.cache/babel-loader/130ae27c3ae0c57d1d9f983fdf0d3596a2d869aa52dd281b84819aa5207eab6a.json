{"ast":null,"code":"var _DirectSupabaseService;\n// ANITA Finance Advisor - Direct Supabase Service\n// This service directly saves data to Supabase using MCP calls\n\nexport class DirectSupabaseService {\n  constructor() {\n    this.userId = 'f04c9ae6-31d6-4ab2-963e-12920d27894d';\n  }\n  static getInstance() {\n    if (!DirectSupabaseService.instance) {\n      DirectSupabaseService.instance = new DirectSupabaseService();\n    }\n    return DirectSupabaseService.instance;\n  }\n\n  // Save transaction to both localStorage and Supabase\n  async saveTransaction(transaction) {\n    try {\n      console.log('üîÑ Saving transaction:', transaction);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getTransactionsFromStorage();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n\n      // Prepare data for Supabase\n      const transactionData = {\n        user_id: this.userId,\n        type: transaction.type,\n        amount: transaction.amount,\n        category: transaction.category,\n        description: transaction.description\n      };\n      console.log('üíæ Transaction data for Supabase:', transactionData);\n\n      // Store in a special queue for the MCP assistant to process\n      this.addToSupabaseQueue('transaction', transactionData);\n    } catch (error) {\n      console.error('‚ùå Error saving transaction:', error);\n    }\n  }\n\n  // Save message to both localStorage and Supabase\n  async saveMessage(message) {\n    try {\n      console.log('üîÑ Saving message:', message.text);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getMessagesFromStorage();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n\n      // Prepare data for Supabase\n      const messageData = {\n        user_id: this.userId,\n        content: message.text,\n        message_type: message.sender === 'anita' ? 'bot' : 'user'\n      };\n      console.log('üíæ Message data for Supabase:', messageData);\n\n      // Store in a special queue for the MCP assistant to process\n      this.addToSupabaseQueue('message', messageData);\n    } catch (error) {\n      console.error('‚ùå Error saving message:', error);\n    }\n  }\n\n  // Get transactions from localStorage\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n\n  // Get messages from localStorage\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n\n  // Add to Supabase queue\n  addToSupabaseQueue(type, data) {\n    const queueItem = {\n      type,\n      data,\n      timestamp: Date.now(),\n      id: Date.now().toString()\n    };\n    const existing = this.getSupabaseQueue();\n    existing.push(queueItem);\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(existing));\n    console.log('üì¶ Added to Supabase queue:', queueItem);\n\n    // Show a visual indicator that data is queued\n    this.showQueueIndicator();\n  }\n  getSupabaseQueue() {\n    try {\n      const saved = localStorage.getItem('anita-supabase-queue');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading Supabase queue:', error);\n      return [];\n    }\n  }\n  showQueueIndicator() {\n    // Create a visual indicator that data is being processed\n    const indicator = document.createElement('div');\n    indicator.id = 'supabase-sync-indicator';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = 'üì° Syncing to database...';\n\n    // Remove existing indicator\n    const existing = document.getElementById('supabase-sync-indicator');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n\n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 3000);\n  }\n\n  // Get queued data for MCP processing\n  getQueuedData() {\n    return this.getSupabaseQueue();\n  }\n\n  // Clear processed data from queue\n  clearProcessedData(processedIds) {\n    const queue = this.getSupabaseQueue();\n    const remaining = queue.filter(item => !processedIds.includes(item.id));\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(remaining));\n    console.log('üßπ Cleared processed data from queue');\n  }\n}\n\n// Export singleton instance\n_DirectSupabaseService = DirectSupabaseService;\nDirectSupabaseService.instance = void 0;\nexport const directSupabaseService = DirectSupabaseService.getInstance();","map":{"version":3,"names":["DirectSupabaseService","constructor","userId","getInstance","instance","saveTransaction","transaction","console","log","existing","getTransactionsFromStorage","updated","localStorage","setItem","JSON","stringify","transactionData","user_id","type","amount","category","description","addToSupabaseQueue","error","saveMessage","message","text","getMessagesFromStorage","messageData","content","message_type","sender","saved","getItem","parsed","parse","map","t","date","Date","m","timestamp","data","queueItem","now","id","toString","getSupabaseQueue","push","showQueueIndicator","indicator","document","createElement","style","cssText","textContent","getElementById","remove","body","appendChild","setTimeout","parentNode","removeChild","getQueuedData","clearProcessedData","processedIds","queue","remaining","filter","item","includes","_DirectSupabaseService","directSupabaseService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/directSupabaseService.ts"],"sourcesContent":["// ANITA Finance Advisor - Direct Supabase Service\r\n// This service directly saves data to Supabase using MCP calls\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport class DirectSupabaseService {\r\n  private static instance: DirectSupabaseService;\r\n  private userId = 'f04c9ae6-31d6-4ab2-963e-12920d27894d';\r\n\r\n  static getInstance(): DirectSupabaseService {\r\n    if (!DirectSupabaseService.instance) {\r\n      DirectSupabaseService.instance = new DirectSupabaseService();\r\n    }\r\n    return DirectSupabaseService.instance;\r\n  }\r\n\r\n  // Save transaction to both localStorage and Supabase\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Saving transaction:', transaction);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const transactionData = {\r\n        user_id: this.userId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description\r\n      };\r\n      \r\n      console.log('üíæ Transaction data for Supabase:', transactionData);\r\n      \r\n      // Store in a special queue for the MCP assistant to process\r\n      this.addToSupabaseQueue('transaction', transactionData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  // Save message to both localStorage and Supabase\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Saving message:', message.text);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const messageData = {\r\n        user_id: this.userId,\r\n        content: message.text,\r\n        message_type: message.sender === 'anita' ? 'bot' : 'user'\r\n      };\r\n      \r\n      console.log('üíæ Message data for Supabase:', messageData);\r\n      \r\n      // Store in a special queue for the MCP assistant to process\r\n      this.addToSupabaseQueue('message', messageData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  // Get transactions from localStorage\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get messages from localStorage\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add to Supabase queue\r\n  private addToSupabaseQueue(type: string, data: any) {\r\n    const queueItem = {\r\n      type,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: Date.now().toString()\r\n    };\r\n    \r\n    const existing = this.getSupabaseQueue();\r\n    existing.push(queueItem);\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(existing));\r\n    \r\n    console.log('üì¶ Added to Supabase queue:', queueItem);\r\n    \r\n    // Show a visual indicator that data is queued\r\n    this.showQueueIndicator();\r\n  }\r\n\r\n  private getSupabaseQueue(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-supabase-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading Supabase queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private showQueueIndicator() {\r\n    // Create a visual indicator that data is being processed\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'supabase-sync-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = 'üì° Syncing to database...';\r\n    \r\n    // Remove existing indicator\r\n    const existing = document.getElementById('supabase-sync-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  // Get queued data for MCP processing\r\n  getQueuedData(): any[] {\r\n    return this.getSupabaseQueue();\r\n  }\r\n\r\n  // Clear processed data from queue\r\n  clearProcessedData(processedIds: string[]) {\r\n    const queue = this.getSupabaseQueue();\r\n    const remaining = queue.filter(item => !processedIds.includes(item.id));\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(remaining));\r\n    console.log('üßπ Cleared processed data from queue');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const directSupabaseService = DirectSupabaseService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}