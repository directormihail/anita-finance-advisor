{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://yourproject.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Messages table CRUD operations\nexport const messagesApi = {\n  // Insert a new message\n  async insertMessage(user, content) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').insert([{\n        user,\n        content\n      }]).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error inserting message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Fetch all messages\n  async fetchMessages() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select('*').order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Update a message\n  async updateMessage(id, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').update(updates).eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Delete a message\n  async deleteMessage(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').delete().eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  }\n};\n\n// Generic table operations for future use\nexport const createTableApi = tableName => ({\n  async insert(record) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).insert([record]).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error inserting into ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async fetchAll() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).select('*').order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error fetching from ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async update(id, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).update(updates).eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error updating ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async delete(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).delete().eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error deleting from ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  }\n});","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","messagesApi","insertMessage","user","content","data","error","from","insert","select","console","fetchMessages","order","ascending","updateMessage","id","updates","update","eq","deleteMessage","delete","createTableApi","tableName","record","fetchAll"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://yourproject.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\n// Messages table CRUD operations\r\nexport const messagesApi = {\r\n  // Insert a new message\r\n  async insertMessage(user, content) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .insert([\r\n          { user, content }\r\n        ])\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error inserting message:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Fetch all messages\r\n  async fetchMessages() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Update a message\r\n  async updateMessage(id, updates) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error updating message:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Delete a message\r\n  async deleteMessage(id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error deleting message:', error)\r\n      return { data: null, error }\r\n    }\r\n  }\r\n}\r\n\r\n// Generic table operations for future use\r\nexport const createTableApi = (tableName) => ({\r\n  async insert(record) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .insert([record])\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error inserting into ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async fetchAll() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .select('*')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error fetching from ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async update(id, updates) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error updating ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async delete(id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .delete()\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error deleting from ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}