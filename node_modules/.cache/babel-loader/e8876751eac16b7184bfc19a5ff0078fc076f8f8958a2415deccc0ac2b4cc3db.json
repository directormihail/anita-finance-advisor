{"ast":null,"code":"import _objectSpread from\"C:/Users/dzm13/anita-finance-advisor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import Sidebar from'./components/Sidebar';import ChatInterface from'./components/ChatInterface';import Settings from'./components/Settings';import FinancePage from'./components/FinancePage';import{fetchTransactions,fetchMessages,saveMessage,getOrCreateDefaultUser,subscribeToTransactions}from'./supabaseClient';import'./MessageRecorder.js';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[currentView,setCurrentView]=useState('chat');const[transactions,setTransactions]=useState([]);const[messages,setMessages]=useState([{id:'1',text:\"Hey! Any new expenses or incomes today?\",sender:'anita',timestamp:new Date()}]);const[theme,setTheme]=useState('dark');const[currentUserId,setCurrentUserId]=useState(null);// Load theme, transactions, and messages on mount\nuseEffect(()=>{const loadData=async()=>{// Load theme from localStorage\nconst savedTheme=localStorage.getItem('anita-theme');if(savedTheme){setTheme(savedTheme);}// Get or create default user\ntry{console.log('🔄 Getting/creating default user...');const{data:user,error:userError}=await getOrCreateDefaultUser();if(userError){console.error('❌ Error getting/creating user:',userError);}else{setCurrentUserId(user.id);console.log('✅ User ready:',user.username);}}catch(error){console.error('❌ Error with user management:',error);}// Load transactions from Supabase (will be loaded after user is set)\n// This will be handled in the useEffect that depends on currentUserId\n// Load messages from Supabase (will be loaded after user is set)\n// This will be handled in the useEffect that depends on currentUserId\n};loadData();},[]);// Load transactions and messages when user ID is available\nuseEffect(()=>{if(!currentUserId)return;const loadUserData=async()=>{// Load transactions from Supabase\ntry{console.log('🔄 Loading transactions from Supabase...');const data=await fetchTransactions(currentUserId);// Convert Supabase data to local format\nconst transactionsWithDates=data.map(t=>({id:t.id.toString(),type:t.type,amount:parseFloat(t.amount),category:t.category,description:t.description,date:new Date(t.created_at)}));setTransactions(transactionsWithDates);console.log(\"\\u2705 Loaded \".concat(transactionsWithDates.length,\" transactions from Supabase\"));}catch(error){console.error('❌ Error loading transactions:',error);// Fallback to localStorage\nconst savedTransactions=localStorage.getItem('anita-transactions');if(savedTransactions){try{const parsed=JSON.parse(savedTransactions);const transactionsWithDates=parsed.map(t=>_objectSpread(_objectSpread({},t),{},{date:new Date(t.date)}));setTransactions(transactionsWithDates);console.log('📱 Loaded transactions from localStorage fallback');}catch(error){console.error('Error loading transactions from localStorage:',error);}}}// Load messages from Supabase\ntry{console.log('🔄 Loading messages from Supabase...');const data=await fetchMessages(currentUserId);// Convert Supabase data to local format\nconst messagesWithDates=data.map(m=>({id:m.id.toString(),text:m.content,sender:m.message_type==='bot'?'anita':'user',timestamp:new Date(m.created_at)}));setMessages(messagesWithDates);console.log(\"\\u2705 Loaded \".concat(messagesWithDates.length,\" messages from Supabase\"));}catch(error){console.error('❌ Error loading messages:',error);// Fallback to localStorage\nconst savedMessages=localStorage.getItem('anita-messages');if(savedMessages){try{const parsed=JSON.parse(savedMessages);const messagesWithDates=parsed.map(m=>_objectSpread(_objectSpread({},m),{},{timestamp:new Date(m.timestamp)}));setMessages(messagesWithDates);console.log('📱 Loaded messages from localStorage fallback');}catch(error){console.error('Error loading messages from localStorage:',error);}}}};loadUserData();},[currentUserId]);// Function to refresh transactions from Supabase\nconst refreshTransactionsFromSupabase=useCallback(async()=>{if(!currentUserId)return;// Don't refresh if no user ID\ntry{console.log('🔄 Refreshing transactions from Supabase...');const data=await fetchTransactions(currentUserId);// Convert Supabase data to local format\nconst transactionsWithDates=data.map(t=>({id:t.id.toString(),type:t.type,amount:parseFloat(t.amount),category:t.category,description:t.description,date:new Date(t.created_at)}));setTransactions(transactionsWithDates);console.log(\"\\u2705 Refreshed \".concat(transactionsWithDates.length,\" transactions from Supabase\"));}catch(error){console.error('❌ Error refreshing transactions:',error);}},[currentUserId]);// Real-time subscription for transactions\nuseEffect(()=>{if(!currentUserId)return;const unsubscribe=subscribeToTransactions(currentUserId,newTransaction=>{console.log('🔄 New transaction received via real-time subscription:',newTransaction);// Convert and add the new transaction to local state\nconst transaction={id:newTransaction.id,type:newTransaction.type,amount:parseFloat(newTransaction.amount.toString()),category:newTransaction.category||'',description:newTransaction.description||'',date:new Date(newTransaction.created_at)};setTransactions(prev=>[transaction,...prev]);});return()=>{unsubscribe();};},[currentUserId]);// Apply theme to document\nuseEffect(()=>{document.documentElement.setAttribute('data-theme',theme);localStorage.setItem('anita-theme',theme);},[theme]);const handleTransactionAdd=transaction=>{const newTransactions=[...transactions,transaction];setTransactions(newTransactions);// Save to localStorage as backup\nlocalStorage.setItem('anita-transactions',JSON.stringify(newTransactions));console.log('✅ Transaction added to local state:',transaction);};const handleMessageAdd=async message=>{const newMessages=[...messages,message];setMessages(newMessages);// Save to Supabase\nif(currentUserId){try{console.log('🔄 Saving message to Supabase:',message.text);await saveMessage({user_id:currentUserId,content:message.text,message_type:message.sender==='anita'?'bot':'user'},currentUserId);console.log('✅ Message saved successfully to Supabase');// Also save to localStorage as backup\nlocalStorage.setItem('anita-messages',JSON.stringify(newMessages));}catch(error){console.error('❌ Error saving message to Supabase:',error);// Still save to localStorage as backup\nlocalStorage.setItem('anita-messages',JSON.stringify(newMessages));}}else{// No user ID, just save to localStorage\nlocalStorage.setItem('anita-messages',JSON.stringify(newMessages));}// Record message using the message recorder\nif(window.anitaMessageRecorder){window.anitaMessageRecorder.recordMessage(message.text,message.sender==='anita'?'bot':'user',{transaction:message.transaction,originalId:message.id});}};const handleThemeChange=newTheme=>{setTheme(newTheme);};// Calculate financial summary\nconst totalIncome=transactions.filter(t=>t.type==='income').reduce((sum,t)=>sum+t.amount,0);const totalExpenses=transactions.filter(t=>t.type==='expense').reduce((sum,t)=>sum+t.amount,0);const netBalance=totalIncome-totalExpenses;// Get all transactions sorted by date (newest first)\nconst allTransactions=[...transactions].sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Sidebar,{onViewChange:setCurrentView,currentView:currentView,totalBalance:netBalance,monthlyIncome:totalIncome,monthlyExpenses:totalExpenses,recentTransactions:allTransactions}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[currentView==='chat'&&/*#__PURE__*/_jsx(ChatInterface,{onTransactionAdd:handleTransactionAdd,onMessageAdd:handleMessageAdd,messages:messages,currentUserId:currentUserId}),currentView==='settings'&&/*#__PURE__*/_jsx(Settings,{onThemeChange:handleThemeChange,currentTheme:theme}),currentView==='finance'&&/*#__PURE__*/_jsx(FinancePage,{currentUserId:currentUserId})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Sidebar","ChatInterface","Settings","FinancePage","fetchTransactions","fetchMessages","saveMessage","getOrCreateDefaultUser","subscribeToTransactions","jsx","_jsx","jsxs","_jsxs","App","currentView","setCurrentView","transactions","setTransactions","messages","setMessages","id","text","sender","timestamp","Date","theme","setTheme","currentUserId","setCurrentUserId","loadData","savedTheme","localStorage","getItem","console","log","data","user","error","userError","username","loadUserData","transactionsWithDates","map","t","toString","type","amount","parseFloat","category","description","date","created_at","concat","length","savedTransactions","parsed","JSON","parse","_objectSpread","messagesWithDates","m","content","message_type","savedMessages","refreshTransactionsFromSupabase","unsubscribe","newTransaction","transaction","prev","document","documentElement","setAttribute","setItem","handleTransactionAdd","newTransactions","stringify","handleMessageAdd","message","newMessages","user_id","window","anitaMessageRecorder","recordMessage","originalId","handleThemeChange","newTheme","totalIncome","filter","reduce","sum","totalExpenses","netBalance","allTransactions","sort","a","b","getTime","className","children","onViewChange","totalBalance","monthlyIncome","monthlyExpenses","recentTransactions","onTransactionAdd","onMessageAdd","onThemeChange","currentTheme"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Settings from './components/Settings';\r\nimport FinancePage from './components/FinancePage';\r\nimport { fetchTransactions, fetchMessages, saveMessage, getOrCreateDefaultUser, subscribeToTransactions } from './supabaseClient';\r\nimport './MessageRecorder.js';\r\nimport './App.css';\r\n\r\ntype ViewType = 'chat' | 'settings' | 'finance';\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<ViewType>('chat');\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hey! Any new expenses or incomes today?\",\r\n      sender: 'anita',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [theme, setTheme] = useState<Theme>('dark');\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n\r\n  // Load theme, transactions, and messages on mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      // Load theme from localStorage\r\n      const savedTheme = localStorage.getItem('anita-theme') as Theme;\r\n      if (savedTheme) {\r\n        setTheme(savedTheme);\r\n      }\r\n\r\n      // Get or create default user\r\n      try {\r\n        console.log('🔄 Getting/creating default user...');\r\n        const { data: user, error: userError } = await getOrCreateDefaultUser();\r\n        if (userError) {\r\n          console.error('❌ Error getting/creating user:', userError);\r\n        } else {\r\n          setCurrentUserId(user.id);\r\n          console.log('✅ User ready:', user.username);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error with user management:', error);\r\n      }\r\n\r\n      // Load transactions from Supabase (will be loaded after user is set)\r\n      // This will be handled in the useEffect that depends on currentUserId\r\n\r\n      // Load messages from Supabase (will be loaded after user is set)\r\n      // This will be handled in the useEffect that depends on currentUserId\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Load transactions and messages when user ID is available\r\n  useEffect(() => {\r\n    if (!currentUserId) return;\r\n\r\n    const loadUserData = async () => {\r\n      // Load transactions from Supabase\r\n      try {\r\n        console.log('🔄 Loading transactions from Supabase...');\r\n        const data = await fetchTransactions(currentUserId);\r\n        \r\n        // Convert Supabase data to local format\r\n        const transactionsWithDates = data.map((t: any) => ({\r\n          id: t.id.toString(),\r\n          type: t.type,\r\n          amount: parseFloat(t.amount),\r\n          category: t.category,\r\n          description: t.description,\r\n          date: new Date(t.created_at)\r\n        }));\r\n        setTransactions(transactionsWithDates);\r\n        console.log(`✅ Loaded ${transactionsWithDates.length} transactions from Supabase`);\r\n      } catch (error) {\r\n        console.error('❌ Error loading transactions:', error);\r\n        // Fallback to localStorage\r\n        const savedTransactions = localStorage.getItem('anita-transactions');\r\n        if (savedTransactions) {\r\n          try {\r\n            const parsed = JSON.parse(savedTransactions);\r\n            const transactionsWithDates = parsed.map((t: any) => ({\r\n              ...t,\r\n              date: new Date(t.date)\r\n            }));\r\n            setTransactions(transactionsWithDates);\r\n            console.log('📱 Loaded transactions from localStorage fallback');\r\n          } catch (error) {\r\n            console.error('Error loading transactions from localStorage:', error);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load messages from Supabase\r\n      try {\r\n        console.log('🔄 Loading messages from Supabase...');\r\n        const data = await fetchMessages(currentUserId);\r\n        \r\n        // Convert Supabase data to local format\r\n        const messagesWithDates = data.map((m: any) => ({\r\n          id: m.id.toString(),\r\n          text: m.content,\r\n          sender: (m.message_type === 'bot' ? 'anita' : 'user') as 'user' | 'anita',\r\n          timestamp: new Date(m.created_at)\r\n        }));\r\n        setMessages(messagesWithDates);\r\n        console.log(`✅ Loaded ${messagesWithDates.length} messages from Supabase`);\r\n      } catch (error) {\r\n        console.error('❌ Error loading messages:', error);\r\n        // Fallback to localStorage\r\n        const savedMessages = localStorage.getItem('anita-messages');\r\n        if (savedMessages) {\r\n          try {\r\n            const parsed = JSON.parse(savedMessages);\r\n            const messagesWithDates = parsed.map((m: any) => ({\r\n              ...m,\r\n              timestamp: new Date(m.timestamp)\r\n            }));\r\n            setMessages(messagesWithDates);\r\n            console.log('📱 Loaded messages from localStorage fallback');\r\n          } catch (error) {\r\n            console.error('Error loading messages from localStorage:', error);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    loadUserData();\r\n  }, [currentUserId]);\r\n\r\n  // Function to refresh transactions from Supabase\r\n  const refreshTransactionsFromSupabase = useCallback(async () => {\r\n    if (!currentUserId) return; // Don't refresh if no user ID\r\n    \r\n    try {\r\n      console.log('🔄 Refreshing transactions from Supabase...');\r\n      const data = await fetchTransactions(currentUserId);\r\n      \r\n      // Convert Supabase data to local format\r\n      const transactionsWithDates = data.map((t: any) => ({\r\n        id: t.id.toString(),\r\n        type: t.type,\r\n        amount: parseFloat(t.amount),\r\n        category: t.category,\r\n        description: t.description,\r\n        date: new Date(t.created_at)\r\n      }));\r\n      \r\n      setTransactions(transactionsWithDates);\r\n      console.log(`✅ Refreshed ${transactionsWithDates.length} transactions from Supabase`);\r\n    } catch (error) {\r\n      console.error('❌ Error refreshing transactions:', error);\r\n    }\r\n  }, [currentUserId]);\r\n\r\n  // Real-time subscription for transactions\r\n  useEffect(() => {\r\n    if (!currentUserId) return;\r\n\r\n    const unsubscribe = subscribeToTransactions(currentUserId, (newTransaction) => {\r\n      console.log('🔄 New transaction received via real-time subscription:', newTransaction);\r\n      // Convert and add the new transaction to local state\r\n      const transaction = {\r\n        id: newTransaction.id!,\r\n        type: newTransaction.type,\r\n        amount: parseFloat(newTransaction.amount.toString()),\r\n        category: newTransaction.category || '',\r\n        description: newTransaction.description || '',\r\n        date: new Date(newTransaction.created_at!)\r\n      };\r\n      \r\n      setTransactions(prev => [transaction, ...prev]);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [currentUserId]);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('anita-theme', theme);\r\n  }, [theme]);\r\n\r\n  const handleTransactionAdd = (transaction: Transaction) => {\r\n    const newTransactions = [...transactions, transaction];\r\n    setTransactions(newTransactions);\r\n    // Save to localStorage as backup\r\n    localStorage.setItem('anita-transactions', JSON.stringify(newTransactions));\r\n    console.log('✅ Transaction added to local state:', transaction);\r\n  };\r\n\r\n  const handleMessageAdd = async (message: Message) => {\r\n    const newMessages = [...messages, message];\r\n    setMessages(newMessages);\r\n    \r\n    // Save to Supabase\r\n    if (currentUserId) {\r\n      try {\r\n        console.log('🔄 Saving message to Supabase:', message.text);\r\n        await saveMessage({\r\n          user_id: currentUserId,\r\n          content: message.text,\r\n          message_type: message.sender === 'anita' ? 'bot' : 'user'\r\n        }, currentUserId);\r\n        \r\n        console.log('✅ Message saved successfully to Supabase');\r\n        // Also save to localStorage as backup\r\n        localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n      } catch (error) {\r\n        console.error('❌ Error saving message to Supabase:', error);\r\n        // Still save to localStorage as backup\r\n        localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n      }\r\n    } else {\r\n      // No user ID, just save to localStorage\r\n      localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n    }\r\n    \r\n    // Record message using the message recorder\r\n    if (window.anitaMessageRecorder) {\r\n      window.anitaMessageRecorder.recordMessage(\r\n        message.text, \r\n        message.sender === 'anita' ? 'bot' : 'user',\r\n        {\r\n          transaction: message.transaction,\r\n          originalId: message.id\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  // Calculate financial summary\r\n  const totalIncome = transactions\r\n    .filter(t => t.type === 'income')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const totalExpenses = transactions\r\n    .filter(t => t.type === 'expense')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const netBalance = totalIncome - totalExpenses;\r\n  \r\n  // Get all transactions sorted by date (newest first)\r\n  const allTransactions = [...transactions]\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar \r\n        onViewChange={setCurrentView} \r\n        currentView={currentView}\r\n        totalBalance={netBalance}\r\n        monthlyIncome={totalIncome}\r\n        monthlyExpenses={totalExpenses}\r\n        recentTransactions={allTransactions}\r\n      />\r\n      <div className=\"main-content\">\r\n        {currentView === 'chat' && (\r\n          <ChatInterface \r\n            onTransactionAdd={handleTransactionAdd} \r\n            onMessageAdd={handleMessageAdd} \r\n            messages={messages}\r\n            currentUserId={currentUserId}\r\n          />\r\n        )}\r\n        {currentView === 'settings' && <Settings onThemeChange={handleThemeChange} currentTheme={theme} />}\r\n        {currentView === 'finance' && <FinancePage currentUserId={currentUserId} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}