{"ast":null,"code":"var _LocalStorageService;\n// ANITA Finance Advisor - Local Storage Service\n// This service handles all data operations using localStorage\n\n// Local storage service\nexport class LocalStorageService {\n  static getInstance() {\n    if (!LocalStorageService.instance) {\n      LocalStorageService.instance = new LocalStorageService();\n    }\n    return LocalStorageService.instance;\n  }\n\n  // Transaction operations\n  saveTransaction(transaction) {\n    try {\n      const existing = this.getTransactions();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n      console.log('‚úÖ Transaction saved to localStorage:', transaction);\n    } catch (error) {\n      console.error('‚ùå Error saving transaction:', error);\n    }\n  }\n  getTransactions() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n\n  // Message operations\n  saveMessage(message) {\n    try {\n      const existing = this.getMessages();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n      console.log('‚úÖ Message saved to localStorage:', message.text);\n    } catch (error) {\n      console.error('‚ùå Error saving message:', error);\n    }\n  }\n  getMessages() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n\n  // Clear all data\n  clearAllData() {\n    localStorage.removeItem('anita-transactions');\n    localStorage.removeItem('anita-messages');\n    localStorage.removeItem('anita-theme');\n    console.log('üóëÔ∏è All data cleared from localStorage');\n  }\n}\n\n// Export singleton instance\n_LocalStorageService = LocalStorageService;\nLocalStorageService.instance = void 0;\nexport const storageService = LocalStorageService.getInstance();","map":{"version":3,"names":["LocalStorageService","getInstance","instance","saveTransaction","transaction","existing","getTransactions","updated","localStorage","setItem","JSON","stringify","console","log","error","saved","getItem","parsed","parse","map","t","date","Date","saveMessage","message","getMessages","text","m","timestamp","clearAllData","removeItem","_LocalStorageService","storageService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/databaseService.ts"],"sourcesContent":["// ANITA Finance Advisor - Local Storage Service\r\n// This service handles all data operations using localStorage\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\n// Local storage service\r\nexport class LocalStorageService {\r\n  private static instance: LocalStorageService;\r\n\r\n  static getInstance(): LocalStorageService {\r\n    if (!LocalStorageService.instance) {\r\n      LocalStorageService.instance = new LocalStorageService();\r\n    }\r\n    return LocalStorageService.instance;\r\n  }\r\n\r\n  // Transaction operations\r\n  saveTransaction(transaction: Transaction): void {\r\n    try {\r\n      const existing = this.getTransactions();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      console.log('‚úÖ Transaction saved to localStorage:', transaction);\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  getTransactions(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Message operations\r\n  saveMessage(message: Message): void {\r\n    try {\r\n      const existing = this.getMessages();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      console.log('‚úÖ Message saved to localStorage:', message.text);\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  getMessages(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Clear all data\r\n  clearAllData(): void {\r\n    localStorage.removeItem('anita-transactions');\r\n    localStorage.removeItem('anita-messages');\r\n    localStorage.removeItem('anita-theme');\r\n    console.log('üóëÔ∏è All data cleared from localStorage');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const storageService = LocalStorageService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}