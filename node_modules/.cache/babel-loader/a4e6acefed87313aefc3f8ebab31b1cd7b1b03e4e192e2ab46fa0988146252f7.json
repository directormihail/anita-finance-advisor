{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  realtime: {\n    params: {\n      eventsPerSecond: 10\n    }\n  }\n});\n\n// Users API\nexport const usersApi = {\n  // Get or create user by username\n  async getOrCreateUser(username, displayName = null) {\n    try {\n      // First try to find existing user\n      const {\n        data: existingUser,\n        error: findError\n      } = await supabase.from('users').select('*').eq('username', username).single();\n      if (existingUser && !findError) {\n        return {\n          data: existingUser,\n          error: null\n        };\n      }\n\n      // Create new user if not found\n      const {\n        data,\n        error\n      } = await supabase.from('users').insert([{\n        username,\n        display_name: displayName || username\n      }]).select().single();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error getting/creating user:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Get all users\n  async getAllUsers() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('users').select('*').order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Subscribe to users changes\n  subscribeToUsers(callback) {\n    return supabase.channel('users_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'users'\n    }, callback).subscribe();\n  }\n};\n\n// Transactions API with real-time support\nexport const transactionsApi = {\n  // Insert a new transaction\n  async insertTransaction(transaction) {\n    try {\n      console.log('Attempting to insert transaction:', transaction);\n      const insertData = {\n        user_id: transaction.userId,\n        type: transaction.type,\n        amount: transaction.amount,\n        category: transaction.category,\n        description: transaction.description,\n        date: transaction.date.toISOString()\n      };\n      console.log('Insert data:', insertData);\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').insert([insertData]).select(`\n          *,\n          users!inner(username, display_name)\n        `);\n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      console.log('Transaction inserted successfully:', data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error inserting transaction:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Fetch all transactions with user info\n  async fetchTransactions() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').select(`\n          *,\n          users!inner(username, display_name)\n        `).order('date', {\n        ascending: false\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Fetch transactions for a specific user\n  async fetchUserTransactions(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').select(`\n          *,\n          users!inner(username, display_name)\n        `).eq('user_id', userId).order('date', {\n        ascending: false\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Update a transaction\n  async updateTransaction(id, updates) {\n    try {\n      const updateData = {\n        ...updates\n      };\n      if (updates.date) {\n        updateData.date = updates.date.toISOString();\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').update(updateData).eq('id', id).select(`\n          *,\n          users!inner(username, display_name)\n        `);\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Delete a transaction\n  async deleteTransaction(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').delete().eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Get financial summary for all users\n  async getFinancialSummary() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_financial_summary').select('*').order('net_balance', {\n        ascending: false\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error getting financial summary:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Get financial summary for a specific user\n  async getUserFinancialSummary(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_financial_summary').select('*').eq('user_id', userId).single();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error getting user financial summary:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Subscribe to transactions changes\n  subscribeToTransactions(callback) {\n    return supabase.channel('transactions_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'transactions'\n    }, callback).subscribe();\n  },\n  // Subscribe to user-specific transactions\n  subscribeToUserTransactions(userId, callback) {\n    return supabase.channel(`user_transactions_${userId}`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'transactions',\n      filter: `user_id=eq.${userId}`\n    }, callback).subscribe();\n  }\n};\n\n// Messages API with real-time support\nexport const messagesApi = {\n  // Insert a new message\n  async insertMessage(userId, content, messageType = 'user') {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').insert([{\n        user_id: userId,\n        content,\n        message_type: messageType\n      }]).select(`\n          *,\n          users!inner(username, display_name)\n        `);\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error inserting message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Fetch all messages with user info\n  async fetchMessages() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select(`\n          *,\n          users!inner(username, display_name)\n        `).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Fetch messages for a specific user\n  async fetchUserMessages(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select(`\n          *,\n          users!inner(username, display_name)\n        `).eq('user_id', userId).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching user messages:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Update a message\n  async updateMessage(id, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').update(updates).eq('id', id).select(`\n          *,\n          users!inner(username, display_name)\n        `);\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Delete a message\n  async deleteMessage(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').delete().eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  // Subscribe to messages changes\n  subscribeToMessages(callback) {\n    return supabase.channel('messages_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'messages'\n    }, callback).subscribe();\n  },\n  // Subscribe to user-specific messages\n  subscribeToUserMessages(userId, callback) {\n    return supabase.channel(`user_messages_${userId}`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'messages',\n      filter: `user_id=eq.${userId}`\n    }, callback).subscribe();\n  }\n};\n\n// Real-time subscription manager\nexport class RealtimeManager {\n  constructor() {\n    this.subscriptions = new Map();\n  }\n\n  // Subscribe to all data changes\n  subscribeToAll(callbacks) {\n    const {\n      onUsersChange,\n      onTransactionsChange,\n      onMessagesChange\n    } = callbacks;\n    if (onUsersChange) {\n      const usersSub = usersApi.subscribeToUsers(onUsersChange);\n      this.subscriptions.set('users', usersSub);\n    }\n    if (onTransactionsChange) {\n      const transactionsSub = transactionsApi.subscribeToTransactions(onTransactionsChange);\n      this.subscriptions.set('transactions', transactionsSub);\n    }\n    if (onMessagesChange) {\n      const messagesSub = messagesApi.subscribeToMessages(onMessagesChange);\n      this.subscriptions.set('messages', messagesSub);\n    }\n  }\n\n  // Subscribe to user-specific data\n  subscribeToUser(userId, callbacks) {\n    const {\n      onTransactionsChange,\n      onMessagesChange\n    } = callbacks;\n    if (onTransactionsChange) {\n      const transactionsSub = transactionsApi.subscribeToUserTransactions(userId, onTransactionsChange);\n      this.subscriptions.set(`user_transactions_${userId}`, transactionsSub);\n    }\n    if (onMessagesChange) {\n      const messagesSub = messagesApi.subscribeToUserMessages(userId, onMessagesChange);\n      this.subscriptions.set(`user_messages_${userId}`, messagesSub);\n    }\n  }\n\n  // Unsubscribe from all subscriptions\n  unsubscribeAll() {\n    this.subscriptions.forEach((subscription, key) => {\n      supabase.removeChannel(subscription);\n    });\n    this.subscriptions.clear();\n  }\n\n  // Unsubscribe from specific subscription\n  unsubscribe(key) {\n    const subscription = this.subscriptions.get(key);\n    if (subscription) {\n      supabase.removeChannel(subscription);\n      this.subscriptions.delete(key);\n    }\n  }\n}\n\n// Export a default realtime manager instance\nexport const realtimeManager = new RealtimeManager();\n\n// Generic table operations for future use\nexport const createTableApi = tableName => ({\n  async insert(record) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).insert([record]).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error inserting into ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async fetchAll() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).select('*').order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error fetching from ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async update(id, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).update(updates).eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error updating ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  async delete(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).delete().eq('id', id).select();\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error deleting from ${tableName}:`, error);\n      return {\n        data: null,\n        error\n      };\n    }\n  }\n});","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","realtime","params","eventsPerSecond","usersApi","getOrCreateUser","username","displayName","data","existingUser","error","findError","from","select","eq","single","insert","display_name","console","getAllUsers","order","ascending","subscribeToUsers","callback","channel","on","event","schema","table","subscribe","transactionsApi","insertTransaction","transaction","log","insertData","user_id","userId","type","amount","category","description","date","toISOString","fetchTransactions","fetchUserTransactions","updateTransaction","id","updates","updateData","update","deleteTransaction","delete","getFinancialSummary","getUserFinancialSummary","subscribeToTransactions","subscribeToUserTransactions","filter","messagesApi","insertMessage","content","messageType","message_type","fetchMessages","fetchUserMessages","updateMessage","deleteMessage","subscribeToMessages","subscribeToUserMessages","RealtimeManager","constructor","subscriptions","Map","subscribeToAll","callbacks","onUsersChange","onTransactionsChange","onMessagesChange","usersSub","set","transactionsSub","messagesSub","subscribeToUser","unsubscribeAll","forEach","subscription","key","removeChannel","clear","unsubscribe","get","realtimeManager","createTableApi","tableName","record","fetchAll"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  realtime: {\r\n    params: {\r\n      eventsPerSecond: 10\r\n    }\r\n  }\r\n})\r\n\r\n// Users API\r\nexport const usersApi = {\r\n  // Get or create user by username\r\n  async getOrCreateUser(username, displayName = null) {\r\n    try {\r\n      // First try to find existing user\r\n      const { data: existingUser, error: findError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', username)\r\n        .single()\r\n\r\n      if (existingUser && !findError) {\r\n        return { data: existingUser, error: null }\r\n      }\r\n\r\n      // Create new user if not found\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .insert([{\r\n          username,\r\n          display_name: displayName || username\r\n        }])\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error getting/creating user:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Get all users\r\n  async getAllUsers() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .order('created_at', { ascending: true })\r\n\r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Subscribe to users changes\r\n  subscribeToUsers(callback) {\r\n    return supabase\r\n      .channel('users_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'users' }, \r\n        callback\r\n      )\r\n      .subscribe()\r\n  }\r\n}\r\n\r\n// Transactions API with real-time support\r\nexport const transactionsApi = {\r\n  // Insert a new transaction\r\n  async insertTransaction(transaction) {\r\n    try {\r\n      console.log('Attempting to insert transaction:', transaction);\r\n      const insertData = {\r\n        user_id: transaction.userId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description,\r\n        date: transaction.date.toISOString()\r\n      };\r\n      console.log('Insert data:', insertData);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .insert([insertData])\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n      \r\n      if (error) {\r\n        console.error('Supabase error:', error);\r\n        throw error;\r\n      }\r\n      console.log('Transaction inserted successfully:', data);\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error inserting transaction:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Fetch all transactions with user info\r\n  async fetchTransactions() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n        .order('date', { ascending: false })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Fetch transactions for a specific user\r\n  async fetchUserTransactions(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n        .eq('user_id', userId)\r\n        .order('date', { ascending: false })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching user transactions:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Update a transaction\r\n  async updateTransaction(id, updates) {\r\n    try {\r\n      const updateData = { ...updates }\r\n      if (updates.date) {\r\n        updateData.date = updates.date.toISOString()\r\n      }\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .update(updateData)\r\n        .eq('id', id)\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Delete a transaction\r\n  async deleteTransaction(id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .delete()\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error deleting transaction:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Get financial summary for all users\r\n  async getFinancialSummary() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_financial_summary')\r\n        .select('*')\r\n        .order('net_balance', { ascending: false })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error getting financial summary:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Get financial summary for a specific user\r\n  async getUserFinancialSummary(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_financial_summary')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error getting user financial summary:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Subscribe to transactions changes\r\n  subscribeToTransactions(callback) {\r\n    return supabase\r\n      .channel('transactions_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'transactions' }, \r\n        callback\r\n      )\r\n      .subscribe()\r\n  },\r\n\r\n  // Subscribe to user-specific transactions\r\n  subscribeToUserTransactions(userId, callback) {\r\n    return supabase\r\n      .channel(`user_transactions_${userId}`)\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'transactions',\r\n          filter: `user_id=eq.${userId}`\r\n        }, \r\n        callback\r\n      )\r\n      .subscribe()\r\n  }\r\n}\r\n\r\n// Messages API with real-time support\r\nexport const messagesApi = {\r\n  // Insert a new message\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .insert([{\r\n          user_id: userId,\r\n          content,\r\n          message_type: messageType\r\n        }])\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error inserting message:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Fetch all messages with user info\r\n  async fetchMessages() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Fetch messages for a specific user\r\n  async fetchUserMessages(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching user messages:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Update a message\r\n  async updateMessage(id, updates) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select(`\r\n          *,\r\n          users!inner(username, display_name)\r\n        `)\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error updating message:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Delete a message\r\n  async deleteMessage(id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error deleting message:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  // Subscribe to messages changes\r\n  subscribeToMessages(callback) {\r\n    return supabase\r\n      .channel('messages_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'messages' }, \r\n        callback\r\n      )\r\n      .subscribe()\r\n  },\r\n\r\n  // Subscribe to user-specific messages\r\n  subscribeToUserMessages(userId, callback) {\r\n    return supabase\r\n      .channel(`user_messages_${userId}`)\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'messages',\r\n          filter: `user_id=eq.${userId}`\r\n        }, \r\n        callback\r\n      )\r\n      .subscribe()\r\n  }\r\n}\r\n\r\n// Real-time subscription manager\r\nexport class RealtimeManager {\r\n  constructor() {\r\n    this.subscriptions = new Map()\r\n  }\r\n\r\n  // Subscribe to all data changes\r\n  subscribeToAll(callbacks) {\r\n    const { onUsersChange, onTransactionsChange, onMessagesChange } = callbacks\r\n\r\n    if (onUsersChange) {\r\n      const usersSub = usersApi.subscribeToUsers(onUsersChange)\r\n      this.subscriptions.set('users', usersSub)\r\n    }\r\n\r\n    if (onTransactionsChange) {\r\n      const transactionsSub = transactionsApi.subscribeToTransactions(onTransactionsChange)\r\n      this.subscriptions.set('transactions', transactionsSub)\r\n    }\r\n\r\n    if (onMessagesChange) {\r\n      const messagesSub = messagesApi.subscribeToMessages(onMessagesChange)\r\n      this.subscriptions.set('messages', messagesSub)\r\n    }\r\n  }\r\n\r\n  // Subscribe to user-specific data\r\n  subscribeToUser(userId, callbacks) {\r\n    const { onTransactionsChange, onMessagesChange } = callbacks\r\n\r\n    if (onTransactionsChange) {\r\n      const transactionsSub = transactionsApi.subscribeToUserTransactions(userId, onTransactionsChange)\r\n      this.subscriptions.set(`user_transactions_${userId}`, transactionsSub)\r\n    }\r\n\r\n    if (onMessagesChange) {\r\n      const messagesSub = messagesApi.subscribeToUserMessages(userId, onMessagesChange)\r\n      this.subscriptions.set(`user_messages_${userId}`, messagesSub)\r\n    }\r\n  }\r\n\r\n  // Unsubscribe from all subscriptions\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach((subscription, key) => {\r\n      supabase.removeChannel(subscription)\r\n    })\r\n    this.subscriptions.clear()\r\n  }\r\n\r\n  // Unsubscribe from specific subscription\r\n  unsubscribe(key) {\r\n    const subscription = this.subscriptions.get(key)\r\n    if (subscription) {\r\n      supabase.removeChannel(subscription)\r\n      this.subscriptions.delete(key)\r\n    }\r\n  }\r\n}\r\n\r\n// Export a default realtime manager instance\r\nexport const realtimeManager = new RealtimeManager()\r\n\r\n// Generic table operations for future use\r\nexport const createTableApi = (tableName) => ({\r\n  async insert(record) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .insert([record])\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error inserting into ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async fetchAll() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .select('*')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error fetching from ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async update(id, updates) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error updating ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  async delete(id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(tableName)\r\n        .delete()\r\n        .eq('id', id)\r\n        .select()\r\n      \r\n      if (error) throw error\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error(`Error deleting from ${tableName}:`, error)\r\n      return { data: null, error }\r\n    }\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}