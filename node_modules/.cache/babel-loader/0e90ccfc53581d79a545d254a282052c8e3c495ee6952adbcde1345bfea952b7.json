{"ast":null,"code":"var _APIService;\n// ANITA Finance Advisor - API Service\n// This service handles direct communication with Supabase via MCP\n\nexport class APIService {\n  constructor() {\n    this.userId = 'f04c9ae6-31d6-4ab2-963e-12920d27894d';\n  }\n  static getInstance() {\n    if (!APIService.instance) {\n      APIService.instance = new APIService();\n    }\n    return APIService.instance;\n  }\n\n  // Save transaction to Supabase\n  async saveTransaction(transaction) {\n    try {\n      console.log('üîÑ Saving transaction to Supabase:', transaction);\n\n      // Store in localStorage first\n      const existing = this.getTransactionsFromStorage();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n\n      // Prepare data for MCP\n      const transactionData = {\n        user_id: this.userId,\n        type: transaction.type,\n        amount: transaction.amount,\n        category: transaction.category,\n        description: transaction.description\n      };\n      console.log('üíæ Transaction data ready for MCP:', transactionData);\n\n      // Store in MCP queue for processing\n      this.addToMCPQueue('transaction', transactionData);\n    } catch (error) {\n      console.error('‚ùå Error saving transaction:', error);\n    }\n  }\n\n  // Save message to Supabase\n  async saveMessage(message) {\n    try {\n      console.log('üîÑ Saving message to Supabase:', message.text);\n\n      // Store in localStorage first\n      const existing = this.getMessagesFromStorage();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n\n      // Prepare data for MCP\n      const messageData = {\n        user_id: this.userId,\n        content: message.text,\n        message_type: message.sender === 'anita' ? 'bot' : 'user'\n      };\n      console.log('üíæ Message data ready for MCP:', messageData);\n\n      // Store in MCP queue for processing\n      this.addToMCPQueue('message', messageData);\n    } catch (error) {\n      console.error('‚ùå Error saving message:', error);\n    }\n  }\n\n  // Get transactions from localStorage\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n\n  // Get messages from localStorage\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n\n  // Add to MCP queue\n  addToMCPQueue(type, data) {\n    const mcpData = {\n      type,\n      data,\n      timestamp: Date.now(),\n      processed: false\n    };\n    const existing = this.getMCPQueue();\n    existing.push(mcpData);\n    localStorage.setItem('anita-mcp-queue', JSON.stringify(existing));\n    console.log('üì¶ Data added to MCP queue:', mcpData);\n  }\n  getMCPQueue() {\n    try {\n      const saved = localStorage.getItem('anita-mcp-queue');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading MCP queue:', error);\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\n_APIService = APIService;\nAPIService.instance = void 0;\nexport const apiService = APIService.getInstance();","map":{"version":3,"names":["APIService","constructor","userId","getInstance","instance","saveTransaction","transaction","console","log","existing","getTransactionsFromStorage","updated","localStorage","setItem","JSON","stringify","transactionData","user_id","type","amount","category","description","addToMCPQueue","error","saveMessage","message","text","getMessagesFromStorage","messageData","content","message_type","sender","saved","getItem","parsed","parse","map","t","date","Date","m","timestamp","data","mcpData","now","processed","getMCPQueue","push","_APIService","apiService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/apiService.ts"],"sourcesContent":["// ANITA Finance Advisor - API Service\r\n// This service handles direct communication with Supabase via MCP\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport class APIService {\r\n  private static instance: APIService;\r\n  private userId = 'f04c9ae6-31d6-4ab2-963e-12920d27894d';\r\n\r\n  static getInstance(): APIService {\r\n    if (!APIService.instance) {\r\n      APIService.instance = new APIService();\r\n    }\r\n    return APIService.instance;\r\n  }\r\n\r\n  // Save transaction to Supabase\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Saving transaction to Supabase:', transaction);\r\n      \r\n      // Store in localStorage first\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      \r\n      // Prepare data for MCP\r\n      const transactionData = {\r\n        user_id: this.userId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description\r\n      };\r\n      \r\n      console.log('üíæ Transaction data ready for MCP:', transactionData);\r\n      \r\n      // Store in MCP queue for processing\r\n      this.addToMCPQueue('transaction', transactionData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  // Save message to Supabase\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Saving message to Supabase:', message.text);\r\n      \r\n      // Store in localStorage first\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      \r\n      // Prepare data for MCP\r\n      const messageData = {\r\n        user_id: this.userId,\r\n        content: message.text,\r\n        message_type: message.sender === 'anita' ? 'bot' : 'user'\r\n      };\r\n      \r\n      console.log('üíæ Message data ready for MCP:', messageData);\r\n      \r\n      // Store in MCP queue for processing\r\n      this.addToMCPQueue('message', messageData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  // Get transactions from localStorage\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get messages from localStorage\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add to MCP queue\r\n  private addToMCPQueue(type: string, data: any) {\r\n    const mcpData = {\r\n      type,\r\n      data,\r\n      timestamp: Date.now(),\r\n      processed: false\r\n    };\r\n    \r\n    const existing = this.getMCPQueue();\r\n    existing.push(mcpData);\r\n    localStorage.setItem('anita-mcp-queue', JSON.stringify(existing));\r\n    \r\n    console.log('üì¶ Data added to MCP queue:', mcpData);\r\n  }\r\n\r\n  private getMCPQueue(): any[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-mcp-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading MCP queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const apiService = APIService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}