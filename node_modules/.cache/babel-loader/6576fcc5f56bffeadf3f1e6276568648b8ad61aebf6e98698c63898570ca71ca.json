{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Local database fallback\nclass LocalDatabase {\n  constructor() {\n    this.dataFile = 'anita-local-data.json';\n    this.loadData();\n  }\n  loadData() {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        // Browser environment\n        const data = localStorage.getItem('anita-local-data');\n        if (data) {\n          this.data = JSON.parse(data);\n        } else {\n          this.data = this.getDefaultData();\n          this.saveData();\n        }\n      } else {\n        // Node environment - use default data for now\n        this.data = this.getDefaultData();\n      }\n    } catch (error) {\n      console.error('Error loading local data:', error);\n      this.data = this.getDefaultData();\n    }\n  }\n  getDefaultData() {\n    return {\n      users: [{\n        id: '00000000-0000-0000-0000-000000000001',\n        username: 'default_user',\n        email: 'default@anita.com',\n        display_name: 'Default User',\n        created_at: new Date().toISOString()\n      }],\n      transactions: [],\n      messages: [{\n        id: '1',\n        user_id: '00000000-0000-0000-0000-000000000001',\n        content: 'Hey! Any new expenses or incomes today?',\n        message_type: 'bot',\n        created_at: new Date().toISOString()\n      }]\n    };\n  }\n  saveData() {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        // Browser environment\n        localStorage.setItem('anita-local-data', JSON.stringify(this.data));\n      } else {\n        // Node environment - data is already in memory\n        console.log('Data saved to memory (Node environment)');\n      }\n    } catch (error) {\n      console.error('Error saving local data:', error);\n    }\n  }\n\n  // User operations\n  async getOrCreateDefaultUser() {\n    const defaultUser = this.data.users.find(u => u.username === 'default_user');\n    if (defaultUser) {\n      return {\n        data: defaultUser,\n        error: null\n      };\n    }\n    const newUser = {\n      id: '00000000-0000-0000-0000-000000000001',\n      username: 'default_user',\n      email: 'default@anita.com',\n      display_name: 'Default User',\n      created_at: new Date().toISOString()\n    };\n    this.data.users.push(newUser);\n    this.saveData();\n    return {\n      data: newUser,\n      error: null\n    };\n  }\n\n  // Transaction operations\n  async insertTransaction(transaction, userId) {\n    const newTransaction = {\n      id: Date.now().toString(),\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\n      ...transaction,\n      created_at: new Date().toISOString()\n    };\n    this.data.transactions.push(newTransaction);\n    this.saveData();\n    return {\n      data: [newTransaction],\n      error: null\n    };\n  }\n  async fetchTransactions(userId) {\n    const userTransactions = this.data.transactions.filter(t => t.user_id === (userId || '00000000-0000-0000-0000-000000000001'));\n    return {\n      data: userTransactions,\n      error: null\n    };\n  }\n\n  // Message operations\n  async insertMessage(userId, content, messageType = 'user') {\n    const newMessage = {\n      id: Date.now().toString(),\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\n      content,\n      message_type: messageType,\n      created_at: new Date().toISOString()\n    };\n    this.data.messages.push(newMessage);\n    this.saveData();\n    return {\n      data: [newMessage],\n      error: null\n    };\n  }\n  async fetchMessages(userId) {\n    const userMessages = this.data.messages.filter(m => m.user_id === (userId || '00000000-0000-0000-0000-000000000001'));\n    return {\n      data: userMessages,\n      error: null\n    };\n  }\n}\n\n// Create local database instance\nconst localDb = new LocalDatabase();\n\n// User management API\nexport const usersApi = {\n  // Get or create a default user for demo purposes\n  async getOrCreateDefaultUser() {\n    try {\n      // First try Supabase\n      const {\n        data: existingUser,\n        error: fetchError\n      } = await supabase.from('users').select('*').eq('username', 'default_user').single();\n      if (existingUser && !fetchError) {\n        return {\n          data: existingUser,\n          error: null\n        };\n      }\n\n      // If user doesn't exist, create it\n      const {\n        data: newUser,\n        error: createError\n      } = await supabase.from('users').insert([{\n        username: 'default_user',\n        email: 'default@anita.com',\n        display_name: 'Default User'\n      }]).select().single();\n      if (createError) {\n        console.log('Supabase user creation failed, using local database');\n        return await localDb.getOrCreateDefaultUser();\n      }\n      return {\n        data: newUser,\n        error: null\n      };\n    } catch (error) {\n      console.log('Supabase connection failed, using local database');\n      return await localDb.getOrCreateDefaultUser();\n    }\n  }\n};\n\n// Messages table CRUD operations\nexport const messagesApi = {\n  // Insert a new message\n  async insertMessage(userId, content, messageType = 'user') {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').insert([{\n        user_id: userId || '00000000-0000-0000-0000-000000000001',\n        content,\n        message_type: messageType\n      }]).select();\n      if (error) {\n        console.log('Supabase message insertion failed, using local database');\n        return await localDb.insertMessage(userId, content, messageType);\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.log('Supabase connection failed, using local database');\n      return await localDb.insertMessage(userId, content, messageType);\n    }\n  },\n  // Fetch all messages for a user\n  async fetchMessages(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select('*').eq('user_id', userId || '00000000-0000-0000-0000-000000000001').order('created_at', {\n        ascending: true\n      });\n      if (error) {\n        console.log('Supabase message fetching failed, using local database');\n        return await localDb.fetchMessages(userId);\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.log('Supabase connection failed, using local database');\n      return await localDb.fetchMessages(userId);\n    }\n  }\n};\n\n// Transactions table CRUD operations\nexport const transactionsApi = {\n  // Insert a new transaction\n  async insertTransaction(transaction, userId) {\n    try {\n      console.log('Attempting to insert transaction:', transaction);\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\n      const insertData = {\n        user_id: defaultUserId,\n        type: transaction.type,\n        amount: transaction.amount,\n        category: transaction.category,\n        description: transaction.description,\n        date: transaction.date.toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').insert([insertData]).select();\n      if (error) {\n        console.log('Supabase transaction insertion failed, using local database');\n        return await localDb.insertTransaction(transaction, userId);\n      }\n      console.log('Transaction inserted successfully:', data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.log('Supabase connection failed, using local database');\n      return await localDb.insertTransaction(transaction, userId);\n    }\n  },\n  // Fetch all transactions\n  async fetchTransactions(userId) {\n    try {\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').select('*').eq('user_id', defaultUserId).order('date', {\n        ascending: false\n      });\n      if (error) {\n        console.log('Supabase transaction fetching failed, using local database');\n        return await localDb.fetchTransactions(userId);\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.log('Supabase connection failed, using local database');\n      return await localDb.fetchTransactions(userId);\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","LocalDatabase","constructor","dataFile","loadData","window","localStorage","data","getItem","JSON","parse","getDefaultData","saveData","error","console","users","id","username","email","display_name","created_at","Date","toISOString","transactions","messages","user_id","content","message_type","setItem","stringify","log","getOrCreateDefaultUser","defaultUser","find","u","newUser","push","insertTransaction","transaction","userId","newTransaction","now","toString","fetchTransactions","userTransactions","filter","t","insertMessage","messageType","newMessage","fetchMessages","userMessages","m","localDb","usersApi","existingUser","fetchError","from","select","eq","single","createError","insert","messagesApi","order","ascending","transactionsApi","defaultUserId","insertData","type","amount","category","description","date"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\n// Local database fallback\r\nclass LocalDatabase {\r\n  constructor() {\r\n    this.dataFile = 'anita-local-data.json';\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        // Browser environment\r\n        const data = localStorage.getItem('anita-local-data');\r\n        if (data) {\r\n          this.data = JSON.parse(data);\r\n        } else {\r\n          this.data = this.getDefaultData();\r\n          this.saveData();\r\n        }\r\n      } else {\r\n        // Node environment - use default data for now\r\n        this.data = this.getDefaultData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading local data:', error);\r\n      this.data = this.getDefaultData();\r\n    }\r\n  }\r\n\r\n  getDefaultData() {\r\n    return {\r\n      users: [\r\n        {\r\n          id: '00000000-0000-0000-0000-000000000001',\r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User',\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ],\r\n      transactions: [],\r\n      messages: [\r\n        {\r\n          id: '1',\r\n          user_id: '00000000-0000-0000-0000-000000000001',\r\n          content: 'Hey! Any new expenses or incomes today?',\r\n          message_type: 'bot',\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  saveData() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        // Browser environment\r\n        localStorage.setItem('anita-local-data', JSON.stringify(this.data));\r\n      } else {\r\n        // Node environment - data is already in memory\r\n        console.log('Data saved to memory (Node environment)');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving local data:', error);\r\n    }\r\n  }\r\n\r\n  // User operations\r\n  async getOrCreateDefaultUser() {\r\n    const defaultUser = this.data.users.find(u => u.username === 'default_user');\r\n    if (defaultUser) {\r\n      return { data: defaultUser, error: null };\r\n    }\r\n    \r\n    const newUser = {\r\n      id: '00000000-0000-0000-0000-000000000001',\r\n      username: 'default_user',\r\n      email: 'default@anita.com',\r\n      display_name: 'Default User',\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.users.push(newUser);\r\n    this.saveData();\r\n    return { data: newUser, error: null };\r\n  }\r\n\r\n  // Transaction operations\r\n  async insertTransaction(transaction, userId) {\r\n    const newTransaction = {\r\n      id: Date.now().toString(),\r\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n      ...transaction,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.transactions.push(newTransaction);\r\n    this.saveData();\r\n    return { data: [newTransaction], error: null };\r\n  }\r\n\r\n  async fetchTransactions(userId) {\r\n    const userTransactions = this.data.transactions.filter(\r\n      t => t.user_id === (userId || '00000000-0000-0000-0000-000000000001')\r\n    );\r\n    return { data: userTransactions, error: null };\r\n  }\r\n\r\n  // Message operations\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n      content,\r\n      message_type: messageType,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    this.data.messages.push(newMessage);\r\n    this.saveData();\r\n    return { data: [newMessage], error: null };\r\n  }\r\n\r\n  async fetchMessages(userId) {\r\n    const userMessages = this.data.messages.filter(\r\n      m => m.user_id === (userId || '00000000-0000-0000-0000-000000000001')\r\n    );\r\n    return { data: userMessages, error: null };\r\n  }\r\n}\r\n\r\n// Create local database instance\r\nconst localDb = new LocalDatabase();\r\n\r\n// User management API\r\nexport const usersApi = {\r\n  // Get or create a default user for demo purposes\r\n  async getOrCreateDefaultUser() {\r\n    try {\r\n      // First try Supabase\r\n      const { data: existingUser, error: fetchError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', 'default_user')\r\n        .single()\r\n      \r\n      if (existingUser && !fetchError) {\r\n        return { data: existingUser, error: null }\r\n      }\r\n      \r\n      // If user doesn't exist, create it\r\n      const { data: newUser, error: createError } = await supabase\r\n        .from('users')\r\n        .insert([{\r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User'\r\n        }])\r\n        .select()\r\n        .single()\r\n      \r\n      if (createError) {\r\n        console.log('Supabase user creation failed, using local database');\r\n        return await localDb.getOrCreateDefaultUser();\r\n      }\r\n      return { data: newUser, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.getOrCreateDefaultUser();\r\n    }\r\n  }\r\n}\r\n\r\n// Messages table CRUD operations\r\nexport const messagesApi = {\r\n  // Insert a new message\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .insert([\r\n          { \r\n            user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n            content,\r\n            message_type: messageType\r\n          }\r\n        ])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.log('Supabase message insertion failed, using local database');\r\n        return await localDb.insertMessage(userId, content, messageType);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.insertMessage(userId, content, messageType);\r\n    }\r\n  },\r\n\r\n  // Fetch all messages for a user\r\n  async fetchMessages(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .eq('user_id', userId || '00000000-0000-0000-0000-000000000001')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) {\r\n        console.log('Supabase message fetching failed, using local database');\r\n        return await localDb.fetchMessages(userId);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.fetchMessages(userId);\r\n    }\r\n  }\r\n}\r\n\r\n// Transactions table CRUD operations\r\nexport const transactionsApi = {\r\n  // Insert a new transaction\r\n  async insertTransaction(transaction, userId) {\r\n    try {\r\n      console.log('Attempting to insert transaction:', transaction);\r\n      \r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\r\n      \r\n      const insertData = {\r\n        user_id: defaultUserId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description,\r\n        date: transaction.date.toISOString()\r\n      };\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .insert([insertData])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.log('Supabase transaction insertion failed, using local database');\r\n        return await localDb.insertTransaction(transaction, userId);\r\n      }\r\n      console.log('Transaction inserted successfully:', data);\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.insertTransaction(transaction, userId);\r\n    }\r\n  },\r\n\r\n  // Fetch all transactions\r\n  async fetchTransactions(userId) {\r\n    try {\r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .eq('user_id', defaultUserId)\r\n        .order('date', { ascending: false })\r\n      \r\n      if (error) {\r\n        console.log('Supabase transaction fetching failed, using local database');\r\n        return await localDb.fetchTransactions(userId);\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.log('Supabase connection failed, using local database');\r\n      return await localDb.fetchTransactions(userId);\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}