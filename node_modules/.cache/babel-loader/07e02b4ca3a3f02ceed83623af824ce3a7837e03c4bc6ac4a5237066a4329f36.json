{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatInterface from './components/ChatInterface';\nimport Settings from './components/Settings';\nimport FinancePage from './components/FinancePage';\nimport { fetchTransactions, fetchMessages, saveMessage, getOrCreateDefaultUser } from './supabaseClient';\nimport './MessageRecorder.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentView, setCurrentView] = useState('chat');\n  const [transactions, setTransactions] = useState([]);\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hey! Any new expenses or incomes today?\",\n    sender: 'anita',\n    timestamp: new Date()\n  }]);\n  const [theme, setTheme] = useState('dark');\n  const [currentUserId, setCurrentUserId] = useState(null);\n\n  // Load theme, transactions, and messages on mount\n  useEffect(() => {\n    const loadData = async () => {\n      // Load theme from localStorage\n      const savedTheme = localStorage.getItem('anita-theme');\n      if (savedTheme) {\n        setTheme(savedTheme);\n      }\n\n      // Get or create default user\n      try {\n        console.log('🔄 Getting/creating default user...');\n        const {\n          data: user,\n          error: userError\n        } = await getOrCreateDefaultUser();\n        if (userError) {\n          console.error('❌ Error getting/creating user:', userError);\n        } else {\n          setCurrentUserId(user.id);\n          console.log('✅ User ready:', user.username);\n        }\n      } catch (error) {\n        console.error('❌ Error with user management:', error);\n      }\n\n      // Load transactions from Supabase (will be loaded after user is set)\n      // This will be handled in the useEffect that depends on currentUserId\n\n      // Load messages from Supabase (will be loaded after user is set)\n      // This will be handled in the useEffect that depends on currentUserId\n    };\n    loadData();\n  }, []);\n\n  // Load transactions and messages when user ID is available\n  useEffect(() => {\n    if (!currentUserId) return;\n    const loadUserData = async () => {\n      // Load transactions from Supabase\n      try {\n        console.log('🔄 Loading transactions from Supabase...');\n        const data = await fetchTransactions(currentUserId);\n\n        // Convert Supabase data to local format\n        const transactionsWithDates = data.map(t => ({\n          id: t.id.toString(),\n          type: t.type,\n          amount: parseFloat(t.amount),\n          category: t.category,\n          description: t.description,\n          date: new Date(t.created_at)\n        }));\n        setTransactions(transactionsWithDates);\n        console.log(`✅ Loaded ${transactionsWithDates.length} transactions from Supabase`);\n      } catch (error) {\n        console.error('❌ Error loading transactions:', error);\n        // Fallback to localStorage\n        const savedTransactions = localStorage.getItem('anita-transactions');\n        if (savedTransactions) {\n          try {\n            const parsed = JSON.parse(savedTransactions);\n            const transactionsWithDates = parsed.map(t => ({\n              ...t,\n              date: new Date(t.date)\n            }));\n            setTransactions(transactionsWithDates);\n            console.log('📱 Loaded transactions from localStorage fallback');\n          } catch (error) {\n            console.error('Error loading transactions from localStorage:', error);\n          }\n        }\n      }\n\n      // Load messages from Supabase\n      try {\n        console.log('🔄 Loading messages from Supabase...');\n        const data = await fetchMessages(currentUserId);\n\n        // Convert Supabase data to local format\n        const messagesWithDates = data.map(m => ({\n          id: m.id.toString(),\n          text: m.content,\n          sender: m.message_type === 'bot' ? 'anita' : 'user',\n          timestamp: new Date(m.created_at)\n        }));\n        setMessages(messagesWithDates);\n        console.log(`✅ Loaded ${messagesWithDates.length} messages from Supabase`);\n      } catch (error) {\n        console.error('❌ Error loading messages:', error);\n        // Fallback to localStorage\n        const savedMessages = localStorage.getItem('anita-messages');\n        if (savedMessages) {\n          try {\n            const parsed = JSON.parse(savedMessages);\n            const messagesWithDates = parsed.map(m => ({\n              ...m,\n              timestamp: new Date(m.timestamp)\n            }));\n            setMessages(messagesWithDates);\n            console.log('📱 Loaded messages from localStorage fallback');\n          } catch (error) {\n            console.error('Error loading messages from localStorage:', error);\n          }\n        }\n      }\n    };\n    loadUserData();\n  }, [currentUserId]);\n\n  // Function to refresh transactions from Supabase\n  const refreshTransactionsFromSupabase = useCallback(async () => {\n    if (!currentUserId) return; // Don't refresh if no user ID\n\n    try {\n      console.log('🔄 Refreshing transactions from Supabase...');\n      const data = await fetchTransactions(currentUserId);\n\n      // Convert Supabase data to local format\n      const transactionsWithDates = data.map(t => ({\n        id: t.id.toString(),\n        type: t.type,\n        amount: parseFloat(t.amount),\n        category: t.category,\n        description: t.description,\n        date: new Date(t.created_at)\n      }));\n      setTransactions(transactionsWithDates);\n      console.log(`✅ Refreshed ${transactionsWithDates.length} transactions from Supabase`);\n    } catch (error) {\n      console.error('❌ Error refreshing transactions:', error);\n    }\n  }, [currentUserId]);\n\n  // Auto-refresh transactions from Supabase every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshTransactionsFromSupabase();\n    }, 30000); // 30 seconds\n\n    return () => clearInterval(interval);\n  }, [refreshTransactionsFromSupabase]);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('anita-theme', theme);\n  }, [theme]);\n  const handleTransactionAdd = transaction => {\n    const newTransactions = [...transactions, transaction];\n    setTransactions(newTransactions);\n    // Save to localStorage as backup\n    localStorage.setItem('anita-transactions', JSON.stringify(newTransactions));\n    console.log('✅ Transaction added to local state:', transaction);\n  };\n  const handleMessageAdd = async message => {\n    const newMessages = [...messages, message];\n    setMessages(newMessages);\n\n    // Save to Supabase\n    if (currentUserId) {\n      try {\n        console.log('🔄 Saving message to Supabase:', message.text);\n        const supabaseMessage = {\n          id: message.id,\n          content: message.text,\n          message_type: message.sender === 'anita' ? 'bot' : 'user'\n        };\n        const {\n          data,\n          error\n        } = await saveMessage(supabaseMessage, currentUserId);\n        if (error) {\n          console.error('❌ Error saving message to Supabase:', error);\n          // Still save to localStorage as backup\n          localStorage.setItem('anita-messages', JSON.stringify(newMessages));\n        } else {\n          console.log('✅ Message saved successfully to Supabase');\n          // Also save to localStorage as backup\n          localStorage.setItem('anita-messages', JSON.stringify(newMessages));\n        }\n      } catch (error) {\n        console.error('❌ Error saving message to Supabase:', error);\n        // Still save to localStorage as backup\n        localStorage.setItem('anita-messages', JSON.stringify(newMessages));\n      }\n    } else {\n      // No user ID, just save to localStorage\n      localStorage.setItem('anita-messages', JSON.stringify(newMessages));\n    }\n\n    // Record message using the message recorder\n    if (window.anitaMessageRecorder) {\n      window.anitaMessageRecorder.recordMessage(message.text, message.sender === 'anita' ? 'bot' : 'user', {\n        transaction: message.transaction,\n        originalId: message.id\n      });\n    }\n  };\n  const handleThemeChange = newTheme => {\n    setTheme(newTheme);\n  };\n\n  // Calculate financial summary\n  const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);\n  const totalExpenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);\n  const netBalance = totalIncome - totalExpenses;\n\n  // Get all transactions sorted by date (newest first)\n  const allTransactions = [...transactions].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onViewChange: setCurrentView,\n      currentView: currentView,\n      totalBalance: netBalance,\n      monthlyIncome: totalIncome,\n      monthlyExpenses: totalExpenses,\n      recentTransactions: allTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentView === 'chat' && /*#__PURE__*/_jsxDEV(ChatInterface, {\n        onTransactionAdd: handleTransactionAdd,\n        onMessageAdd: handleMessageAdd,\n        messages: messages,\n        currentUserId: currentUserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), currentView === 'settings' && /*#__PURE__*/_jsxDEV(Settings, {\n        onThemeChange: handleThemeChange,\n        currentTheme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 40\n      }, this), currentView === 'finance' && /*#__PURE__*/_jsxDEV(FinancePage, {\n        currentUserId: currentUserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nCKjbBMRJgzmWJFVDw/THi9oAf4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Sidebar","ChatInterface","Settings","FinancePage","fetchTransactions","fetchMessages","saveMessage","getOrCreateDefaultUser","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","transactions","setTransactions","messages","setMessages","id","text","sender","timestamp","Date","theme","setTheme","currentUserId","setCurrentUserId","loadData","savedTheme","localStorage","getItem","console","log","data","user","error","userError","username","loadUserData","transactionsWithDates","map","t","toString","type","amount","parseFloat","category","description","date","created_at","length","savedTransactions","parsed","JSON","parse","messagesWithDates","m","content","message_type","savedMessages","refreshTransactionsFromSupabase","interval","setInterval","clearInterval","document","documentElement","setAttribute","setItem","handleTransactionAdd","transaction","newTransactions","stringify","handleMessageAdd","message","newMessages","supabaseMessage","window","anitaMessageRecorder","recordMessage","originalId","handleThemeChange","newTheme","totalIncome","filter","reduce","sum","totalExpenses","netBalance","allTransactions","sort","a","b","getTime","className","children","onViewChange","totalBalance","monthlyIncome","monthlyExpenses","recentTransactions","fileName","_jsxFileName","lineNumber","columnNumber","onTransactionAdd","onMessageAdd","onThemeChange","currentTheme","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Settings from './components/Settings';\r\nimport FinancePage from './components/FinancePage';\r\nimport { fetchTransactions, fetchMessages, saveMessage, getOrCreateDefaultUser, subscribeToTransactions } from './supabaseClient';\r\nimport './MessageRecorder.js';\r\nimport './App.css';\r\n\r\ntype ViewType = 'chat' | 'settings' | 'finance';\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<ViewType>('chat');\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hey! Any new expenses or incomes today?\",\r\n      sender: 'anita',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [theme, setTheme] = useState<Theme>('dark');\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n\r\n  // Load theme, transactions, and messages on mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      // Load theme from localStorage\r\n      const savedTheme = localStorage.getItem('anita-theme') as Theme;\r\n      if (savedTheme) {\r\n        setTheme(savedTheme);\r\n      }\r\n\r\n      // Get or create default user\r\n      try {\r\n        console.log('🔄 Getting/creating default user...');\r\n        const { data: user, error: userError } = await getOrCreateDefaultUser();\r\n        if (userError) {\r\n          console.error('❌ Error getting/creating user:', userError);\r\n        } else {\r\n          setCurrentUserId(user.id);\r\n          console.log('✅ User ready:', user.username);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error with user management:', error);\r\n      }\r\n\r\n      // Load transactions from Supabase (will be loaded after user is set)\r\n      // This will be handled in the useEffect that depends on currentUserId\r\n\r\n      // Load messages from Supabase (will be loaded after user is set)\r\n      // This will be handled in the useEffect that depends on currentUserId\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Load transactions and messages when user ID is available\r\n  useEffect(() => {\r\n    if (!currentUserId) return;\r\n\r\n    const loadUserData = async () => {\r\n      // Load transactions from Supabase\r\n      try {\r\n        console.log('🔄 Loading transactions from Supabase...');\r\n        const data = await fetchTransactions(currentUserId);\r\n        \r\n        // Convert Supabase data to local format\r\n        const transactionsWithDates = data.map((t: any) => ({\r\n          id: t.id.toString(),\r\n          type: t.type,\r\n          amount: parseFloat(t.amount),\r\n          category: t.category,\r\n          description: t.description,\r\n          date: new Date(t.created_at)\r\n        }));\r\n        setTransactions(transactionsWithDates);\r\n        console.log(`✅ Loaded ${transactionsWithDates.length} transactions from Supabase`);\r\n      } catch (error) {\r\n        console.error('❌ Error loading transactions:', error);\r\n        // Fallback to localStorage\r\n        const savedTransactions = localStorage.getItem('anita-transactions');\r\n        if (savedTransactions) {\r\n          try {\r\n            const parsed = JSON.parse(savedTransactions);\r\n            const transactionsWithDates = parsed.map((t: any) => ({\r\n              ...t,\r\n              date: new Date(t.date)\r\n            }));\r\n            setTransactions(transactionsWithDates);\r\n            console.log('📱 Loaded transactions from localStorage fallback');\r\n          } catch (error) {\r\n            console.error('Error loading transactions from localStorage:', error);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Load messages from Supabase\r\n      try {\r\n        console.log('🔄 Loading messages from Supabase...');\r\n        const data = await fetchMessages(currentUserId);\r\n        \r\n        // Convert Supabase data to local format\r\n        const messagesWithDates = data.map((m: any) => ({\r\n          id: m.id.toString(),\r\n          text: m.content,\r\n          sender: (m.message_type === 'bot' ? 'anita' : 'user') as 'user' | 'anita',\r\n          timestamp: new Date(m.created_at)\r\n        }));\r\n        setMessages(messagesWithDates);\r\n        console.log(`✅ Loaded ${messagesWithDates.length} messages from Supabase`);\r\n      } catch (error) {\r\n        console.error('❌ Error loading messages:', error);\r\n        // Fallback to localStorage\r\n        const savedMessages = localStorage.getItem('anita-messages');\r\n        if (savedMessages) {\r\n          try {\r\n            const parsed = JSON.parse(savedMessages);\r\n            const messagesWithDates = parsed.map((m: any) => ({\r\n              ...m,\r\n              timestamp: new Date(m.timestamp)\r\n            }));\r\n            setMessages(messagesWithDates);\r\n            console.log('📱 Loaded messages from localStorage fallback');\r\n          } catch (error) {\r\n            console.error('Error loading messages from localStorage:', error);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    loadUserData();\r\n  }, [currentUserId]);\r\n\r\n  // Function to refresh transactions from Supabase\r\n  const refreshTransactionsFromSupabase = useCallback(async () => {\r\n    if (!currentUserId) return; // Don't refresh if no user ID\r\n    \r\n    try {\r\n      console.log('🔄 Refreshing transactions from Supabase...');\r\n      const data = await fetchTransactions(currentUserId);\r\n      \r\n      // Convert Supabase data to local format\r\n      const transactionsWithDates = data.map((t: any) => ({\r\n        id: t.id.toString(),\r\n        type: t.type,\r\n        amount: parseFloat(t.amount),\r\n        category: t.category,\r\n        description: t.description,\r\n        date: new Date(t.created_at)\r\n      }));\r\n      \r\n      setTransactions(transactionsWithDates);\r\n      console.log(`✅ Refreshed ${transactionsWithDates.length} transactions from Supabase`);\r\n    } catch (error) {\r\n      console.error('❌ Error refreshing transactions:', error);\r\n    }\r\n  }, [currentUserId]);\r\n\r\n  // Auto-refresh transactions from Supabase every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      refreshTransactionsFromSupabase();\r\n    }, 30000); // 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [refreshTransactionsFromSupabase]);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('anita-theme', theme);\r\n  }, [theme]);\r\n\r\n  const handleTransactionAdd = (transaction: Transaction) => {\r\n    const newTransactions = [...transactions, transaction];\r\n    setTransactions(newTransactions);\r\n    // Save to localStorage as backup\r\n    localStorage.setItem('anita-transactions', JSON.stringify(newTransactions));\r\n    console.log('✅ Transaction added to local state:', transaction);\r\n  };\r\n\r\n  const handleMessageAdd = async (message: Message) => {\r\n    const newMessages = [...messages, message];\r\n    setMessages(newMessages);\r\n    \r\n    // Save to Supabase\r\n    if (currentUserId) {\r\n      try {\r\n        console.log('🔄 Saving message to Supabase:', message.text);\r\n        const supabaseMessage = {\r\n          id: message.id,\r\n          content: message.text,\r\n          message_type: message.sender === 'anita' ? 'bot' : 'user' as 'bot' | 'user'\r\n        };\r\n        \r\n        const { data, error } = await saveMessage(supabaseMessage, currentUserId);\r\n        if (error) {\r\n          console.error('❌ Error saving message to Supabase:', error);\r\n          // Still save to localStorage as backup\r\n          localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n        } else {\r\n          console.log('✅ Message saved successfully to Supabase');\r\n          // Also save to localStorage as backup\r\n          localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error saving message to Supabase:', error);\r\n        // Still save to localStorage as backup\r\n        localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n      }\r\n    } else {\r\n      // No user ID, just save to localStorage\r\n      localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n    }\r\n    \r\n    // Record message using the message recorder\r\n    if (window.anitaMessageRecorder) {\r\n      window.anitaMessageRecorder.recordMessage(\r\n        message.text, \r\n        message.sender === 'anita' ? 'bot' : 'user',\r\n        {\r\n          transaction: message.transaction,\r\n          originalId: message.id\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  // Calculate financial summary\r\n  const totalIncome = transactions\r\n    .filter(t => t.type === 'income')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const totalExpenses = transactions\r\n    .filter(t => t.type === 'expense')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const netBalance = totalIncome - totalExpenses;\r\n  \r\n  // Get all transactions sorted by date (newest first)\r\n  const allTransactions = [...transactions]\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar \r\n        onViewChange={setCurrentView} \r\n        currentView={currentView}\r\n        totalBalance={netBalance}\r\n        monthlyIncome={totalIncome}\r\n        monthlyExpenses={totalExpenses}\r\n        recentTransactions={allTransactions}\r\n      />\r\n      <div className=\"main-content\">\r\n        {currentView === 'chat' && (\r\n          <ChatInterface \r\n            onTransactionAdd={handleTransactionAdd} \r\n            onMessageAdd={handleMessageAdd} \r\n            messages={messages}\r\n            currentUserId={currentUserId}\r\n          />\r\n        )}\r\n        {currentView === 'settings' && <Settings onThemeChange={handleThemeChange} currentTheme={theme} />}\r\n        {currentView === 'finance' && <FinancePage currentUserId={currentUserId} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}