{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// User management API\nexport const usersApi = {\n  // Get or create a default user for demo purposes\n  async getOrCreateDefaultUser() {\n    try {\n      // First try to get the default user\n      const {\n        data: existingUser,\n        error: fetchError\n      } = await supabase.from('users').select('*').eq('username', 'default_user').single();\n      if (existingUser && !fetchError) {\n        return {\n          data: existingUser,\n          error: null\n        };\n      }\n\n      // If user doesn't exist, create it\n      const {\n        data: newUser,\n        error: createError\n      } = await supabase.from('users').insert([{\n        username: 'default_user',\n        email: 'default@anita.com',\n        display_name: 'Default User'\n      }]).select().single();\n      if (createError) {\n        console.error('Error creating user:', createError);\n        // Return a default user object for local fallback\n        return {\n          data: {\n            id: '00000000-0000-0000-0000-000000000001',\n            username: 'default_user',\n            email: 'default@anita.com',\n            display_name: 'Default User'\n          },\n          error: null\n        };\n      }\n      return {\n        data: newUser,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error getting/creating default user:', error);\n      // Return a default user object for local fallback\n      return {\n        data: {\n          id: '00000000-0000-0000-0000-000000000001',\n          username: 'default_user',\n          email: 'default@anita.com',\n          display_name: 'Default User'\n        },\n        error: null\n      };\n    }\n  }\n};\n\n// Messages table CRUD operations\nexport const messagesApi = {\n  // Insert a new message\n  async insertMessage(userId, content, messageType = 'user') {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').insert([{\n        user_id: userId || '00000000-0000-0000-0000-000000000001',\n        content,\n        message_type: messageType\n      }]).select();\n      if (error) {\n        console.error('Error inserting message:', error);\n        return {\n          data: null,\n          error: null\n        }; // Return success for local fallback\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error inserting message:', error);\n      return {\n        data: null,\n        error: null\n      }; // Return success for local fallback\n    }\n  },\n  // Fetch all messages for a user\n  async fetchMessages(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select('*').eq('user_id', userId || '00000000-0000-0000-0000-000000000001').order('created_at', {\n        ascending: true\n      });\n      if (error) {\n        console.error('Error fetching messages:', error);\n        return {\n          data: [],\n          error: null\n        }; // Return empty array for local fallback\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return {\n        data: [],\n        error: null\n      }; // Return empty array for local fallback\n    }\n  }\n};\n\n// Transactions table CRUD operations\nexport const transactionsApi = {\n  // Insert a new transaction\n  async insertTransaction(transaction, userId) {\n    try {\n      console.log('Attempting to insert transaction:', transaction);\n\n      // For now, use a default user ID if none provided\n      // In production, this should come from authentication\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001'; // Default user ID\n\n      const insertData = {\n        user_id: defaultUserId,\n        type: transaction.type,\n        amount: transaction.amount,\n        category: transaction.category,\n        description: transaction.description,\n        date: transaction.date.toISOString()\n      };\n      console.log('Insert data:', insertData);\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').insert([insertData]).select();\n      if (error) {\n        console.error('Supabase error:', error);\n        // Return success anyway to allow local fallback\n        return {\n          data: [{\n            id: Date.now(),\n            ...insertData\n          }],\n          error: null\n        };\n      }\n      console.log('Transaction inserted successfully:', data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error inserting transaction:', error);\n      // Return success anyway to allow local fallback\n      return {\n        data: [{\n          id: Date.now(),\n          ...transaction\n        }],\n        error: null\n      };\n    }\n  },\n  // Fetch all transactions\n  async fetchTransactions(userId) {\n    try {\n      // For now, use a default user ID if none provided\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\n      const {\n        data,\n        error\n      } = await supabase.from('transactions').select('*').eq('user_id', defaultUserId).order('date', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Supabase fetch error:', error);\n        // Return empty array to allow local fallback\n        return {\n          data: [],\n          error: null\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      // Return empty array to allow local fallback\n      return {\n        data: [],\n        error: null\n      };\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","usersApi","getOrCreateDefaultUser","data","existingUser","error","fetchError","from","select","eq","single","newUser","createError","insert","username","email","display_name","console","id","messagesApi","insertMessage","userId","content","messageType","user_id","message_type","fetchMessages","order","ascending","transactionsApi","insertTransaction","transaction","log","defaultUserId","insertData","type","amount","category","description","date","toISOString","Date","now","fetchTransactions"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://kzregiqxflrvaxytdet.supabase.co'\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtlenJlZ2lxZnhscnZheHl0ZGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2OTY5MTgsImV4cCI6MjA3MzI3MjkxOH0.X4QWu0W31Kv_8KGQ6h_n4PYnQOMTX85CYbWJVbv2AxM'\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\n// User management API\r\nexport const usersApi = {\r\n  // Get or create a default user for demo purposes\r\n  async getOrCreateDefaultUser() {\r\n    try {\r\n      // First try to get the default user\r\n      const { data: existingUser, error: fetchError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', 'default_user')\r\n        .single()\r\n      \r\n      if (existingUser && !fetchError) {\r\n        return { data: existingUser, error: null }\r\n      }\r\n      \r\n      // If user doesn't exist, create it\r\n      const { data: newUser, error: createError } = await supabase\r\n        .from('users')\r\n        .insert([{\r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User'\r\n        }])\r\n        .select()\r\n        .single()\r\n      \r\n      if (createError) {\r\n        console.error('Error creating user:', createError);\r\n        // Return a default user object for local fallback\r\n        return { \r\n          data: { \r\n            id: '00000000-0000-0000-0000-000000000001', \r\n            username: 'default_user',\r\n            email: 'default@anita.com',\r\n            display_name: 'Default User'\r\n          }, \r\n          error: null \r\n        }\r\n      }\r\n      return { data: newUser, error: null }\r\n    } catch (error) {\r\n      console.error('Error getting/creating default user:', error)\r\n      // Return a default user object for local fallback\r\n      return { \r\n        data: { \r\n          id: '00000000-0000-0000-0000-000000000001', \r\n          username: 'default_user',\r\n          email: 'default@anita.com',\r\n          display_name: 'Default User'\r\n        }, \r\n        error: null \r\n      }\r\n    }\r\n  },\r\n\r\n}\r\n\r\n// Messages table CRUD operations\r\nexport const messagesApi = {\r\n  // Insert a new message\r\n  async insertMessage(userId, content, messageType = 'user') {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .insert([\r\n          { \r\n            user_id: userId || '00000000-0000-0000-0000-000000000001',\r\n            content,\r\n            message_type: messageType\r\n          }\r\n        ])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.error('Error inserting message:', error);\r\n        return { data: null, error: null } // Return success for local fallback\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error inserting message:', error)\r\n      return { data: null, error: null } // Return success for local fallback\r\n    }\r\n  },\r\n\r\n  // Fetch all messages for a user\r\n  async fetchMessages(userId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .eq('user_id', userId || '00000000-0000-0000-0000-000000000001')\r\n        .order('created_at', { ascending: true })\r\n      \r\n      if (error) {\r\n        console.error('Error fetching messages:', error);\r\n        return { data: [], error: null } // Return empty array for local fallback\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error)\r\n      return { data: [], error: null } // Return empty array for local fallback\r\n    }\r\n  }\r\n}\r\n\r\n// Transactions table CRUD operations\r\nexport const transactionsApi = {\r\n  // Insert a new transaction\r\n  async insertTransaction(transaction, userId) {\r\n    try {\r\n      console.log('Attempting to insert transaction:', transaction);\r\n      \r\n      // For now, use a default user ID if none provided\r\n      // In production, this should come from authentication\r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001'; // Default user ID\r\n      \r\n      const insertData = {\r\n        user_id: defaultUserId,\r\n        type: transaction.type,\r\n        amount: transaction.amount,\r\n        category: transaction.category,\r\n        description: transaction.description,\r\n        date: transaction.date.toISOString()\r\n      };\r\n      console.log('Insert data:', insertData);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .insert([insertData])\r\n        .select()\r\n      \r\n      if (error) {\r\n        console.error('Supabase error:', error);\r\n        // Return success anyway to allow local fallback\r\n        return { data: [{ id: Date.now(), ...insertData }], error: null }\r\n      }\r\n      console.log('Transaction inserted successfully:', data);\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error inserting transaction:', error)\r\n      // Return success anyway to allow local fallback\r\n      return { data: [{ id: Date.now(), ...transaction }], error: null }\r\n    }\r\n  },\r\n\r\n  // Fetch all transactions\r\n  async fetchTransactions(userId) {\r\n    try {\r\n      // For now, use a default user ID if none provided\r\n      const defaultUserId = userId || '00000000-0000-0000-0000-000000000001';\r\n      \r\n      const { data, error } = await supabase\r\n        .from('transactions')\r\n        .select('*')\r\n        .eq('user_id', defaultUserId)\r\n        .order('date', { ascending: false })\r\n      \r\n      if (error) {\r\n        console.error('Supabase fetch error:', error);\r\n        // Return empty array to allow local fallback\r\n        return { data: [], error: null }\r\n      }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error)\r\n      // Return empty array to allow local fallback\r\n      return { data: [], error: null }\r\n    }\r\n  },\r\n\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}