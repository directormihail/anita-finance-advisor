{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    // Event callbacks\n    this.onTransactionAddedCallback = void 0;\n    this.onTransactionUpdatedCallback = void 0;\n    this.onTransactionDeletedCallback = void 0;\n    this.onMessageAddedCallback = void 0;\n    this.onUserUpdatedCallback = void 0;\n    this.onDataRefreshedCallback = void 0;\n    this.onConnectionChangeCallback = void 0;\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = io('http://localhost:3001', {\n          transports: ['websocket', 'polling'],\n          timeout: 20000\n        });\n        this.socket.on('connect', () => {\n          var _this$onConnectionCha;\n          console.log('‚úÖ Connected to Socket.IO server');\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          (_this$onConnectionCha = this.onConnectionChangeCallback) === null || _this$onConnectionCha === void 0 ? void 0 : _this$onConnectionCha.call(this, true);\n          resolve();\n        });\n        this.socket.on('disconnect', reason => {\n          var _this$onConnectionCha2;\n          console.log('‚ùå Disconnected from Socket.IO server:', reason);\n          this.isConnected = false;\n          (_this$onConnectionCha2 = this.onConnectionChangeCallback) === null || _this$onConnectionCha2 === void 0 ? void 0 : _this$onConnectionCha2.call(this, false);\n          if (reason === 'io server disconnect') {\n            // Server initiated disconnect, don't reconnect\n            return;\n          }\n          this.attemptReconnect();\n        });\n        this.socket.on('connect_error', error => {\n          var _this$onConnectionCha3;\n          console.error('‚ùå Socket.IO connection error:', error);\n          this.isConnected = false;\n          (_this$onConnectionCha3 = this.onConnectionChangeCallback) === null || _this$onConnectionCha3 === void 0 ? void 0 : _this$onConnectionCha3.call(this, false);\n          this.attemptReconnect();\n          reject(error);\n        });\n\n        // Data event handlers\n        this.socket.on('initialData', data => {\n          var _this$onDataRefreshed;\n          console.log('üìä Received initial data:', data);\n          (_this$onDataRefreshed = this.onDataRefreshedCallback) === null || _this$onDataRefreshed === void 0 ? void 0 : _this$onDataRefreshed.call(this, data);\n        });\n        this.socket.on('transactionAdded', transaction => {\n          var _this$onTransactionAd;\n          console.log('‚ûï Transaction added:', transaction);\n          (_this$onTransactionAd = this.onTransactionAddedCallback) === null || _this$onTransactionAd === void 0 ? void 0 : _this$onTransactionAd.call(this, transaction);\n        });\n        this.socket.on('transactionUpdated', transaction => {\n          var _this$onTransactionUp;\n          console.log('üîÑ Transaction updated:', transaction);\n          (_this$onTransactionUp = this.onTransactionUpdatedCallback) === null || _this$onTransactionUp === void 0 ? void 0 : _this$onTransactionUp.call(this, transaction);\n        });\n        this.socket.on('transactionDeleted', transactionId => {\n          var _this$onTransactionDe;\n          console.log('üóëÔ∏è Transaction deleted:', transactionId);\n          (_this$onTransactionDe = this.onTransactionDeletedCallback) === null || _this$onTransactionDe === void 0 ? void 0 : _this$onTransactionDe.call(this, transactionId);\n        });\n        this.socket.on('messageAdded', message => {\n          var _this$onMessageAddedC;\n          console.log('üí¨ Message added:', message);\n          (_this$onMessageAddedC = this.onMessageAddedCallback) === null || _this$onMessageAddedC === void 0 ? void 0 : _this$onMessageAddedC.call(this, message);\n        });\n        this.socket.on('userUpdated', user => {\n          var _this$onUserUpdatedCa;\n          console.log('üë§ User updated:', user);\n          (_this$onUserUpdatedCa = this.onUserUpdatedCallback) === null || _this$onUserUpdatedCa === void 0 ? void 0 : _this$onUserUpdatedCa.call(this, user);\n        });\n        this.socket.on('dataRefreshed', data => {\n          var _this$onDataRefreshed2;\n          console.log('üîÑ Data refreshed:', data);\n          (_this$onDataRefreshed2 = this.onDataRefreshedCallback) === null || _this$onDataRefreshed2 === void 0 ? void 0 : _this$onDataRefreshed2.call(this, data);\n        });\n      } catch (error) {\n        console.error('‚ùå Error connecting to Socket.IO server:', error);\n        reject(error);\n      }\n    });\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('‚ùå Max reconnection attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n    console.log(`üîÑ Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    setTimeout(() => {\n      if (!this.isConnected) {\n        this.connect().catch(console.error);\n      }\n    }, delay);\n  }\n  disconnect() {\n    if (this.socket) {\n      var _this$onConnectionCha4;\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      (_this$onConnectionCha4 = this.onConnectionChangeCallback) === null || _this$onConnectionCha4 === void 0 ? void 0 : _this$onConnectionCha4.call(this, false);\n    }\n  }\n\n  // Transaction methods\n  addTransaction(transaction) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('addTransaction', transaction);\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot add transaction');\n    }\n  }\n  updateTransaction(transaction) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('updateTransaction', transaction);\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot update transaction');\n    }\n  }\n  deleteTransaction(transactionId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('deleteTransaction', transactionId);\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot delete transaction');\n    }\n  }\n\n  // Message methods\n  addMessage(message) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('addMessage', message);\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot add message');\n    }\n  }\n\n  // User methods\n  updateUser(user) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('updateUser', user);\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot update user');\n    }\n  }\n\n  // Data refresh\n  refreshData() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('refreshData');\n    } else {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot refresh data');\n    }\n  }\n\n  // Event listeners\n  onTransactionAdded(callback) {\n    this.onTransactionAddedCallback = callback;\n  }\n  onTransactionUpdated(callback) {\n    this.onTransactionUpdatedCallback = callback;\n  }\n  onTransactionDeleted(callback) {\n    this.onTransactionDeletedCallback = callback;\n  }\n  onMessageAdded(callback) {\n    this.onMessageAddedCallback = callback;\n  }\n  onUserUpdated(callback) {\n    this.onUserUpdatedCallback = callback;\n  }\n  onDataRefreshed(callback) {\n    this.onDataRefreshedCallback = callback;\n  }\n  onConnectionChange(callback) {\n    this.onConnectionChangeCallback = callback;\n  }\n\n  // Getters\n  get connected() {\n    return this.isConnected;\n  }\n  get socketId() {\n    var _this$socket;\n    return (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id;\n  }\n}\n\n// Export singleton instance\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","reconnectAttempts","maxReconnectAttempts","reconnectDelay","onTransactionAddedCallback","onTransactionUpdatedCallback","onTransactionDeletedCallback","onMessageAddedCallback","onUserUpdatedCallback","onDataRefreshedCallback","onConnectionChangeCallback","connect","Promise","resolve","reject","transports","timeout","on","_this$onConnectionCha","console","log","call","reason","_this$onConnectionCha2","attemptReconnect","error","_this$onConnectionCha3","data","_this$onDataRefreshed","transaction","_this$onTransactionAd","_this$onTransactionUp","transactionId","_this$onTransactionDe","message","_this$onMessageAddedC","user","_this$onUserUpdatedCa","_this$onDataRefreshed2","delay","Math","pow","setTimeout","catch","disconnect","_this$onConnectionCha4","addTransaction","emit","warn","updateTransaction","deleteTransaction","addMessage","updateUser","refreshData","onTransactionAdded","callback","onTransactionUpdated","onTransactionDeleted","onMessageAdded","onUserUpdated","onDataRefreshed","onConnectionChange","connected","socketId","_this$socket","id","socketService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  email?: string;\r\n  createdAt: Date;\r\n}\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private isConnected = false;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectDelay = 1000;\r\n\r\n  // Event callbacks\r\n  private onTransactionAddedCallback?: (transaction: Transaction) => void;\r\n  private onTransactionUpdatedCallback?: (transaction: Transaction) => void;\r\n  private onTransactionDeletedCallback?: (transactionId: string) => void;\r\n  private onMessageAddedCallback?: (message: Message) => void;\r\n  private onUserUpdatedCallback?: (user: User) => void;\r\n  private onDataRefreshedCallback?: (data: { transactions: Transaction[], messages: Message[], users: User[] }) => void;\r\n  private onConnectionChangeCallback?: (connected: boolean) => void;\r\n\r\n  connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.socket = io('http://localhost:3001', {\r\n          transports: ['websocket', 'polling'],\r\n          timeout: 20000,\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n          console.log('‚úÖ Connected to Socket.IO server');\r\n          this.isConnected = true;\r\n          this.reconnectAttempts = 0;\r\n          this.onConnectionChangeCallback?.(true);\r\n          resolve();\r\n        });\r\n\r\n        this.socket.on('disconnect', (reason) => {\r\n          console.log('‚ùå Disconnected from Socket.IO server:', reason);\r\n          this.isConnected = false;\r\n          this.onConnectionChangeCallback?.(false);\r\n          \r\n          if (reason === 'io server disconnect') {\r\n            // Server initiated disconnect, don't reconnect\r\n            return;\r\n          }\r\n          \r\n          this.attemptReconnect();\r\n        });\r\n\r\n        this.socket.on('connect_error', (error) => {\r\n          console.error('‚ùå Socket.IO connection error:', error);\r\n          this.isConnected = false;\r\n          this.onConnectionChangeCallback?.(false);\r\n          this.attemptReconnect();\r\n          reject(error);\r\n        });\r\n\r\n        // Data event handlers\r\n        this.socket.on('initialData', (data) => {\r\n          console.log('üìä Received initial data:', data);\r\n          this.onDataRefreshedCallback?.(data);\r\n        });\r\n\r\n        this.socket.on('transactionAdded', (transaction) => {\r\n          console.log('‚ûï Transaction added:', transaction);\r\n          this.onTransactionAddedCallback?.(transaction);\r\n        });\r\n\r\n        this.socket.on('transactionUpdated', (transaction) => {\r\n          console.log('üîÑ Transaction updated:', transaction);\r\n          this.onTransactionUpdatedCallback?.(transaction);\r\n        });\r\n\r\n        this.socket.on('transactionDeleted', (transactionId) => {\r\n          console.log('üóëÔ∏è Transaction deleted:', transactionId);\r\n          this.onTransactionDeletedCallback?.(transactionId);\r\n        });\r\n\r\n        this.socket.on('messageAdded', (message) => {\r\n          console.log('üí¨ Message added:', message);\r\n          this.onMessageAddedCallback?.(message);\r\n        });\r\n\r\n        this.socket.on('userUpdated', (user) => {\r\n          console.log('üë§ User updated:', user);\r\n          this.onUserUpdatedCallback?.(user);\r\n        });\r\n\r\n        this.socket.on('dataRefreshed', (data) => {\r\n          console.log('üîÑ Data refreshed:', data);\r\n          this.onDataRefreshedCallback?.(data);\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('‚ùå Error connecting to Socket.IO server:', error);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private attemptReconnect(): void {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('‚ùå Max reconnection attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\r\n    \r\n    console.log(`üîÑ Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n    \r\n    setTimeout(() => {\r\n      if (!this.isConnected) {\r\n        this.connect().catch(console.error);\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      this.onConnectionChangeCallback?.(false);\r\n    }\r\n  }\r\n\r\n  // Transaction methods\r\n  addTransaction(transaction: Omit<Transaction, 'id'>): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('addTransaction', transaction);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot add transaction');\r\n    }\r\n  }\r\n\r\n  updateTransaction(transaction: Transaction): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('updateTransaction', transaction);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot update transaction');\r\n    }\r\n  }\r\n\r\n  deleteTransaction(transactionId: string): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('deleteTransaction', transactionId);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot delete transaction');\r\n    }\r\n  }\r\n\r\n  // Message methods\r\n  addMessage(message: Omit<Message, 'id'>): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('addMessage', message);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot add message');\r\n    }\r\n  }\r\n\r\n  // User methods\r\n  updateUser(user: User): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('updateUser', user);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot update user');\r\n    }\r\n  }\r\n\r\n  // Data refresh\r\n  refreshData(): void {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('refreshData');\r\n    } else {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot refresh data');\r\n    }\r\n  }\r\n\r\n  // Event listeners\r\n  onTransactionAdded(callback: (transaction: Transaction) => void): void {\r\n    this.onTransactionAddedCallback = callback;\r\n  }\r\n\r\n  onTransactionUpdated(callback: (transaction: Transaction) => void): void {\r\n    this.onTransactionUpdatedCallback = callback;\r\n  }\r\n\r\n  onTransactionDeleted(callback: (transactionId: string) => void): void {\r\n    this.onTransactionDeletedCallback = callback;\r\n  }\r\n\r\n  onMessageAdded(callback: (message: Message) => void): void {\r\n    this.onMessageAddedCallback = callback;\r\n  }\r\n\r\n  onUserUpdated(callback: (user: User) => void): void {\r\n    this.onUserUpdatedCallback = callback;\r\n  }\r\n\r\n  onDataRefreshed(callback: (data: { transactions: Transaction[], messages: Message[], users: User[] }) => void): void {\r\n    this.onDataRefreshedCallback = callback;\r\n  }\r\n\r\n  onConnectionChange(callback: (connected: boolean) => void): void {\r\n    this.onConnectionChangeCallback = callback;\r\n  }\r\n\r\n  // Getters\r\n  get connected(): boolean {\r\n    return this.isConnected;\r\n  }\r\n\r\n  get socketId(): string | undefined {\r\n    return this.socket?.id;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const socketService = new SocketService();\r\nexport default socketService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}