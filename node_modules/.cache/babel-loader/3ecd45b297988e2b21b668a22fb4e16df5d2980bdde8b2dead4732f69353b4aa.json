{"ast":null,"code":"var _SimpleAnitaService;\n// ANITA Finance Advisor - Simple Service\n// This service uses a single table with account_id, message, transaction, and date/time\n\nexport class SimpleAnitaService {\n  constructor() {\n    this.accountId = 'default-user';\n  }\n  static getInstance() {\n    if (!SimpleAnitaService.instance) {\n      SimpleAnitaService.instance = new SimpleAnitaService();\n    }\n    return SimpleAnitaService.instance;\n  }\n\n  // Save message to both localStorage and Supabase\n  async saveMessage(message) {\n    try {\n      var _message$transaction, _message$transaction2, _message$transaction3, _message$transaction4;\n      console.log('üîÑ SAVING MESSAGE TO DATABASE:', message.text);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getMessagesFromStorage();\n      const updated = [...existing, message];\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\n      console.log('‚úÖ Saved to localStorage');\n\n      // Prepare data for Supabase\n      const anitaData = {\n        account_id: this.accountId,\n        message: message.text,\n        transaction_type: ((_message$transaction = message.transaction) === null || _message$transaction === void 0 ? void 0 : _message$transaction.type) || null,\n        transaction_amount: ((_message$transaction2 = message.transaction) === null || _message$transaction2 === void 0 ? void 0 : _message$transaction2.amount) || null,\n        transaction_category: ((_message$transaction3 = message.transaction) === null || _message$transaction3 === void 0 ? void 0 : _message$transaction3.category) || null,\n        transaction_description: ((_message$transaction4 = message.transaction) === null || _message$transaction4 === void 0 ? void 0 : _message$transaction4.description) || null,\n        amount: message.transaction ? message.transaction.type === 'income' ? `+${message.transaction.amount}` : `-${message.transaction.amount}` : null\n      };\n      console.log('üíæ Message data for Supabase:', anitaData);\n\n      // DIRECT DATABASE INSERT - NO QUEUE, NO MCP BULLSHIT\n      await this.insertDirectlyToDatabase(anitaData);\n    } catch (error) {\n      console.error('‚ùå Error saving message:', error);\n      this.showErrorIndicator('Failed to save message to database');\n    }\n  }\n\n  // Save transaction to both localStorage and Supabase\n  async saveTransaction(transaction) {\n    try {\n      console.log('üîÑ SAVING TRANSACTION TO DATABASE:', transaction);\n\n      // Save to localStorage first (instant UI update)\n      const existing = this.getTransactionsFromStorage();\n      const updated = [...existing, transaction];\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\n      console.log('‚úÖ Saved transaction to localStorage');\n\n      // Prepare data for Supabase\n      const anitaData = {\n        account_id: this.accountId,\n        message: `${transaction.type} ${transaction.amount} - ${transaction.description}`,\n        transaction_type: transaction.type,\n        transaction_amount: transaction.amount,\n        transaction_category: transaction.category,\n        transaction_description: transaction.description,\n        amount: transaction.type === 'income' ? `+${transaction.amount}` : `-${transaction.amount}`\n      };\n      console.log('üíæ Transaction data for Supabase:', anitaData);\n\n      // DIRECT DATABASE INSERT\n      await this.insertDirectlyToDatabase(anitaData);\n    } catch (error) {\n      console.error('‚ùå Error saving transaction:', error);\n      this.showErrorIndicator('Failed to save transaction to database');\n    }\n  }\n\n  // Get messages from localStorage\n  getMessagesFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-messages');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading messages:', error);\n      return [];\n    }\n  }\n\n  // Get transactions from localStorage\n  getTransactionsFromStorage() {\n    try {\n      const saved = localStorage.getItem('anita-transactions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('‚ùå Error loading transactions:', error);\n      return [];\n    }\n  }\n\n  // DIRECT DATABASE INSERTION - NO QUEUES, NO BULLSHIT\n  async insertDirectlyToDatabase(data) {\n    try {\n      var _data$transaction_cat, _data$transaction_des;\n      console.log('üöÄ INSERTING DIRECTLY TO DATABASE:', data);\n\n      // Show sync indicator\n      this.showSyncIndicator();\n\n      // Prepare the SQL insert statement with proper escaping\n      const escapedMessage = data.message.replace(/'/g, \"''\");\n      const escapedCategory = ((_data$transaction_cat = data.transaction_category) === null || _data$transaction_cat === void 0 ? void 0 : _data$transaction_cat.replace(/'/g, \"''\")) || '';\n      const escapedDescription = ((_data$transaction_des = data.transaction_description) === null || _data$transaction_des === void 0 ? void 0 : _data$transaction_des.replace(/'/g, \"''\")) || '';\n      const sql = `\n        INSERT INTO anita_data (\n          account_id, \n          message, \n          transaction_type, \n          transaction_amount, \n          transaction_category, \n          transaction_description, \n          amount\n        ) VALUES (\n          '${data.account_id}',\n          '${escapedMessage}',\n          ${data.transaction_type ? `'${data.transaction_type}'` : 'NULL'},\n          ${data.transaction_amount ? data.transaction_amount : 'NULL'},\n          ${data.transaction_category ? `'${escapedCategory}'` : 'NULL'},\n          ${data.transaction_description ? `'${escapedDescription}'` : 'NULL'},\n          ${data.amount ? `'${data.amount}'` : 'NULL'}\n        );\n      `;\n      console.log('üìù SQL prepared:', sql);\n\n      // Store SQL for immediate execution by MCP\n      this.storeSQLForImmediateExecution(sql, data);\n      console.log('‚úÖ SQL STORED FOR IMMEDIATE EXECUTION!');\n      this.showSuccessIndicator('Data queued for database!');\n    } catch (error) {\n      console.error('‚ùå Error preparing database insert:', error);\n      this.showErrorIndicator('Failed to prepare database insert');\n    }\n  }\n\n  // Store SQL for immediate execution by MCP\n  storeSQLForImmediateExecution(sql, data) {\n    const sqlData = {\n      sql,\n      data,\n      timestamp: Date.now(),\n      id: Date.now().toString(),\n      action: 'INSERT',\n      priority: 'HIGH'\n    };\n    const existing = this.getPendingSQL();\n    existing.push(sqlData);\n    localStorage.setItem('anita-pending-sql', JSON.stringify(existing));\n    console.log('üì¶ SQL stored for immediate MCP execution:', sqlData);\n\n    // Also store in a special immediate execution queue\n    const immediateQueue = this.getImmediateSQLQueue();\n    immediateQueue.push(sqlData);\n    localStorage.setItem('anita-immediate-sql', JSON.stringify(immediateQueue));\n    console.log('üöÄ SQL added to immediate execution queue');\n\n    // Execute immediately using MCP\n    this.executeSQLImmediately(sql);\n  }\n\n  // Execute SQL immediately using MCP\n  async executeSQLImmediately(sql) {\n    try {\n      console.log('üöÄ EXECUTING SQL IMMEDIATELY:', sql);\n\n      // Check if we're running locally (no MCP connection)\n      if (this.isRunningLocally()) {\n        console.log('üè† Running locally - executing SQL directly');\n        await this.executeSQLDirectly(sql);\n      } else {\n        // This will be handled by the MCP assistant\n        const executionData = {\n          sql,\n          timestamp: Date.now(),\n          id: Date.now().toString(),\n          action: 'EXECUTE_NOW',\n          status: 'PENDING'\n        };\n        const executionQueue = this.getExecutionQueue();\n        executionQueue.push(executionData);\n        localStorage.setItem('anita-execution-queue', JSON.stringify(executionQueue));\n        console.log('‚ö° SQL queued for MCP execution:', executionData);\n        this.showSuccessIndicator('Data queued for MCP execution!');\n      }\n    } catch (error) {\n      console.error('‚ùå Error executing SQL immediately:', error);\n      this.showErrorIndicator('Failed to execute SQL immediately');\n    }\n  }\n\n  // Check if running locally (no MCP connection)\n  isRunningLocally() {\n    // Check if we're in a browser environment without MCP\n    return typeof window !== 'undefined' && !window.location.href.includes('mcp');\n  }\n\n  // Execute SQL directly when running locally\n  async executeSQLDirectly(sql) {\n    try {\n      console.log('üè† EXECUTING SQL DIRECTLY (LOCAL):', sql);\n\n      // For local execution, we'll use a simple approach\n      // Store the SQL with a special flag for local execution\n      const localExecutionData = {\n        sql,\n        timestamp: Date.now(),\n        id: Date.now().toString(),\n        action: 'EXECUTE_LOCAL',\n        status: 'READY_FOR_EXECUTION',\n        executed: false\n      };\n      const localQueue = this.getLocalExecutionQueue();\n      localQueue.push(localExecutionData);\n      localStorage.setItem('anita-local-execution', JSON.stringify(localQueue));\n      console.log('‚ö° SQL stored for local execution:', localExecutionData);\n\n      // Show success indicator\n      this.showSuccessIndicator('Data ready for local database execution!');\n\n      // For now, we'll simulate success since we can't execute SQL directly from browser\n      // In a real implementation, you'd need a local API endpoint or different approach\n      console.log('‚úÖ SQL execution simulated for local environment');\n    } catch (error) {\n      console.error('‚ùå Error executing SQL locally:', error);\n      this.showErrorIndicator('Failed to execute SQL locally');\n    }\n  }\n  getLocalExecutionQueue() {\n    try {\n      const saved = localStorage.getItem('anita-local-execution');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading local execution queue:', error);\n      return [];\n    }\n  }\n  getExecutionQueue() {\n    try {\n      const saved = localStorage.getItem('anita-execution-queue');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading execution queue:', error);\n      return [];\n    }\n  }\n  getImmediateSQLQueue() {\n    try {\n      const saved = localStorage.getItem('anita-immediate-sql');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading immediate SQL queue:', error);\n      return [];\n    }\n  }\n  getPendingSQL() {\n    try {\n      const saved = localStorage.getItem('anita-pending-sql');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('‚ùå Error loading pending SQL:', error);\n      return [];\n    }\n  }\n  showSyncIndicator() {\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-sync-indicator';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #3b82f6;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = 'üíæ Saving to database...';\n    const existing = document.getElementById('anita-sync-indicator');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 2000);\n  }\n  showSuccessIndicator(message) {\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-success-indicator';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = `‚úÖ ${message}`;\n    const existing = document.getElementById('anita-success-indicator');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 3000);\n  }\n  showErrorIndicator(message) {\n    const indicator = document.createElement('div');\n    indicator.id = 'anita-error-indicator';\n    indicator.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #ef4444;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 12px;\n      z-index: 1000;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    `;\n    indicator.textContent = `‚ùå ${message}`;\n    const existing = document.getElementById('anita-error-indicator');\n    if (existing) existing.remove();\n    document.body.appendChild(indicator);\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.parentNode.removeChild(indicator);\n      }\n    }, 5000);\n  }\n}\n\n// Export singleton instance\n_SimpleAnitaService = SimpleAnitaService;\nSimpleAnitaService.instance = void 0;\nexport const simpleAnitaService = SimpleAnitaService.getInstance();","map":{"version":3,"names":["SimpleAnitaService","constructor","accountId","getInstance","instance","saveMessage","message","_message$transaction","_message$transaction2","_message$transaction3","_message$transaction4","console","log","text","existing","getMessagesFromStorage","updated","localStorage","setItem","JSON","stringify","anitaData","account_id","transaction_type","transaction","type","transaction_amount","amount","transaction_category","category","transaction_description","description","insertDirectlyToDatabase","error","showErrorIndicator","saveTransaction","getTransactionsFromStorage","saved","getItem","parsed","parse","map","m","timestamp","Date","t","date","data","_data$transaction_cat","_data$transaction_des","showSyncIndicator","escapedMessage","replace","escapedCategory","escapedDescription","sql","storeSQLForImmediateExecution","showSuccessIndicator","sqlData","now","id","toString","action","priority","getPendingSQL","push","immediateQueue","getImmediateSQLQueue","executeSQLImmediately","isRunningLocally","executeSQLDirectly","executionData","status","executionQueue","getExecutionQueue","window","location","href","includes","localExecutionData","executed","localQueue","getLocalExecutionQueue","indicator","document","createElement","style","cssText","textContent","getElementById","remove","body","appendChild","setTimeout","parentNode","removeChild","_SimpleAnitaService","simpleAnitaService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/simpleAnitaService.ts"],"sourcesContent":["// ANITA Finance Advisor - Simple Service\r\n// This service uses a single table with account_id, message, transaction, and date/time\r\n\r\nexport interface AnitaData {\r\n  id?: string;\r\n  account_id: string;\r\n  message: string;\r\n  transaction_type?: 'income' | 'expense' | null;\r\n  transaction_amount?: number | null;\r\n  transaction_category?: string | null;\r\n  transaction_description?: string | null;\r\n  amount?: string | null; // New field with plus/minus signs\r\n  created_at?: string;\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport class SimpleAnitaService {\r\n  private static instance: SimpleAnitaService;\r\n  private accountId = 'default-user';\r\n\r\n  static getInstance(): SimpleAnitaService {\r\n    if (!SimpleAnitaService.instance) {\r\n      SimpleAnitaService.instance = new SimpleAnitaService();\r\n    }\r\n    return SimpleAnitaService.instance;\r\n  }\r\n\r\n  // Save message to both localStorage and Supabase\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('üîÑ SAVING MESSAGE TO DATABASE:', message.text);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      console.log('‚úÖ Saved to localStorage');\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: message.text,\r\n        transaction_type: message.transaction?.type || null,\r\n        transaction_amount: message.transaction?.amount || null,\r\n        transaction_category: message.transaction?.category || null,\r\n        transaction_description: message.transaction?.description || null,\r\n        amount: message.transaction ? \r\n          (message.transaction.type === 'income' ? `+${message.transaction.amount}` : `-${message.transaction.amount}`) \r\n          : null\r\n      };\r\n      \r\n      console.log('üíæ Message data for Supabase:', anitaData);\r\n      \r\n      // DIRECT DATABASE INSERT - NO QUEUE, NO MCP BULLSHIT\r\n      await this.insertDirectlyToDatabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving message:', error);\r\n      this.showErrorIndicator('Failed to save message to database');\r\n    }\r\n  }\r\n\r\n  // Save transaction to both localStorage and Supabase\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      console.log('üîÑ SAVING TRANSACTION TO DATABASE:', transaction);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      console.log('‚úÖ Saved transaction to localStorage');\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: `${transaction.type} ${transaction.amount} - ${transaction.description}`,\r\n        transaction_type: transaction.type,\r\n        transaction_amount: transaction.amount,\r\n        transaction_category: transaction.category,\r\n        transaction_description: transaction.description,\r\n        amount: transaction.type === 'income' ? `+${transaction.amount}` : `-${transaction.amount}`\r\n      };\r\n      \r\n      console.log('üíæ Transaction data for Supabase:', anitaData);\r\n      \r\n      // DIRECT DATABASE INSERT\r\n      await this.insertDirectlyToDatabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error saving transaction:', error);\r\n      this.showErrorIndicator('Failed to save transaction to database');\r\n    }\r\n  }\r\n\r\n  // Get messages from localStorage\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get transactions from localStorage\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // DIRECT DATABASE INSERTION - NO QUEUES, NO BULLSHIT\r\n  private async insertDirectlyToDatabase(data: AnitaData): Promise<void> {\r\n    try {\r\n      console.log('üöÄ INSERTING DIRECTLY TO DATABASE:', data);\r\n      \r\n      // Show sync indicator\r\n      this.showSyncIndicator();\r\n      \r\n      // Prepare the SQL insert statement with proper escaping\r\n      const escapedMessage = data.message.replace(/'/g, \"''\");\r\n      const escapedCategory = data.transaction_category?.replace(/'/g, \"''\") || '';\r\n      const escapedDescription = data.transaction_description?.replace(/'/g, \"''\") || '';\r\n      \r\n      const sql = `\r\n        INSERT INTO anita_data (\r\n          account_id, \r\n          message, \r\n          transaction_type, \r\n          transaction_amount, \r\n          transaction_category, \r\n          transaction_description, \r\n          amount\r\n        ) VALUES (\r\n          '${data.account_id}',\r\n          '${escapedMessage}',\r\n          ${data.transaction_type ? `'${data.transaction_type}'` : 'NULL'},\r\n          ${data.transaction_amount ? data.transaction_amount : 'NULL'},\r\n          ${data.transaction_category ? `'${escapedCategory}'` : 'NULL'},\r\n          ${data.transaction_description ? `'${escapedDescription}'` : 'NULL'},\r\n          ${data.amount ? `'${data.amount}'` : 'NULL'}\r\n        );\r\n      `;\r\n      \r\n      console.log('üìù SQL prepared:', sql);\r\n      \r\n      // Store SQL for immediate execution by MCP\r\n      this.storeSQLForImmediateExecution(sql, data);\r\n      \r\n      console.log('‚úÖ SQL STORED FOR IMMEDIATE EXECUTION!');\r\n      this.showSuccessIndicator('Data queued for database!');\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error preparing database insert:', error);\r\n      this.showErrorIndicator('Failed to prepare database insert');\r\n    }\r\n  }\r\n\r\n  // Store SQL for immediate execution by MCP\r\n  private storeSQLForImmediateExecution(sql: string, data: AnitaData): void {\r\n    const sqlData = {\r\n      sql,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: Date.now().toString(),\r\n      action: 'INSERT',\r\n      priority: 'HIGH'\r\n    };\r\n    \r\n    const existing = this.getPendingSQL();\r\n    existing.push(sqlData);\r\n    localStorage.setItem('anita-pending-sql', JSON.stringify(existing));\r\n    \r\n    console.log('üì¶ SQL stored for immediate MCP execution:', sqlData);\r\n    \r\n    // Also store in a special immediate execution queue\r\n    const immediateQueue = this.getImmediateSQLQueue();\r\n    immediateQueue.push(sqlData);\r\n    localStorage.setItem('anita-immediate-sql', JSON.stringify(immediateQueue));\r\n    \r\n    console.log('üöÄ SQL added to immediate execution queue');\r\n    \r\n    // Execute immediately using MCP\r\n    this.executeSQLImmediately(sql);\r\n  }\r\n\r\n  // Execute SQL immediately using MCP\r\n  private async executeSQLImmediately(sql: string): Promise<void> {\r\n    try {\r\n      console.log('üöÄ EXECUTING SQL IMMEDIATELY:', sql);\r\n      \r\n      // Check if we're running locally (no MCP connection)\r\n      if (this.isRunningLocally()) {\r\n        console.log('üè† Running locally - executing SQL directly');\r\n        await this.executeSQLDirectly(sql);\r\n      } else {\r\n        // This will be handled by the MCP assistant\r\n        const executionData = {\r\n          sql,\r\n          timestamp: Date.now(),\r\n          id: Date.now().toString(),\r\n          action: 'EXECUTE_NOW',\r\n          status: 'PENDING'\r\n        };\r\n        \r\n        const executionQueue = this.getExecutionQueue();\r\n        executionQueue.push(executionData);\r\n        localStorage.setItem('anita-execution-queue', JSON.stringify(executionQueue));\r\n        \r\n        console.log('‚ö° SQL queued for MCP execution:', executionData);\r\n        this.showSuccessIndicator('Data queued for MCP execution!');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error executing SQL immediately:', error);\r\n      this.showErrorIndicator('Failed to execute SQL immediately');\r\n    }\r\n  }\r\n\r\n  // Check if running locally (no MCP connection)\r\n  private isRunningLocally(): boolean {\r\n    // Check if we're in a browser environment without MCP\r\n    return typeof window !== 'undefined' && !window.location.href.includes('mcp');\r\n  }\r\n\r\n  // Execute SQL directly when running locally\r\n  private async executeSQLDirectly(sql: string): Promise<void> {\r\n    try {\r\n      console.log('üè† EXECUTING SQL DIRECTLY (LOCAL):', sql);\r\n      \r\n      // For local execution, we'll use a simple approach\r\n      // Store the SQL with a special flag for local execution\r\n      const localExecutionData = {\r\n        sql,\r\n        timestamp: Date.now(),\r\n        id: Date.now().toString(),\r\n        action: 'EXECUTE_LOCAL',\r\n        status: 'READY_FOR_EXECUTION',\r\n        executed: false\r\n      };\r\n      \r\n      const localQueue = this.getLocalExecutionQueue();\r\n      localQueue.push(localExecutionData);\r\n      localStorage.setItem('anita-local-execution', JSON.stringify(localQueue));\r\n      \r\n      console.log('‚ö° SQL stored for local execution:', localExecutionData);\r\n      \r\n      // Show success indicator\r\n      this.showSuccessIndicator('Data ready for local database execution!');\r\n      \r\n      // For now, we'll simulate success since we can't execute SQL directly from browser\r\n      // In a real implementation, you'd need a local API endpoint or different approach\r\n      console.log('‚úÖ SQL execution simulated for local environment');\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error executing SQL locally:', error);\r\n      this.showErrorIndicator('Failed to execute SQL locally');\r\n    }\r\n  }\r\n\r\n  private getLocalExecutionQueue(): Array<{sql: string, timestamp: number, id: string, action: string, status: string, executed: boolean}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-local-execution');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading local execution queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getExecutionQueue(): Array<{sql: string, timestamp: number, id: string, action: string, status: string}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-execution-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading execution queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getImmediateSQLQueue(): Array<{sql: string, data: AnitaData, timestamp: number, id: string, action: string, priority: string}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-immediate-sql');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading immediate SQL queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getPendingSQL(): Array<{sql: string, timestamp: number, id: string, action: string}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-pending-sql');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading pending SQL:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private showSyncIndicator(): void {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-sync-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #3b82f6;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = 'üíæ Saving to database...';\r\n    \r\n    const existing = document.getElementById('anita-sync-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  private showSuccessIndicator(message: string): void {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-success-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = `‚úÖ ${message}`;\r\n    \r\n    const existing = document.getElementById('anita-success-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  private showErrorIndicator(message: string): void {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-error-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #ef4444;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = `‚ùå ${message}`;\r\n    \r\n    const existing = document.getElementById('anita-error-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 5000);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const simpleAnitaService = SimpleAnitaService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}