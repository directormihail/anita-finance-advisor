{"ast":null,"code":"import { supabase } from './supabaseClient';\n\n// TypeScript interface for our items table\n\n// Insert a new item\nexport const insertItem = async item => {\n  try {\n    console.log('üìù Inserting item:', item);\n    const {\n      data,\n      error\n    } = await supabase.from('items').insert([item]).select();\n    if (error) {\n      console.error('‚ùå Insert failed:', error);\n      return {\n        success: false,\n        error,\n        data: null\n      };\n    }\n    console.log('‚úÖ Item inserted successfully:', data);\n    return {\n      success: true,\n      data,\n      error: null\n    };\n  } catch (err) {\n    console.error('‚ùå Insert error:', err);\n    return {\n      success: false,\n      error: err,\n      data: null\n    };\n  }\n};\n\n// Fetch all items\nexport const fetchAllItems = async () => {\n  try {\n    console.log('üì• Fetching all items...');\n    const {\n      data,\n      error\n    } = await supabase.from('items').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('‚ùå Fetch failed:', error);\n      return {\n        success: false,\n        error,\n        data: null\n      };\n    }\n    console.log('‚úÖ Items fetched successfully:', data);\n    return {\n      success: true,\n      data,\n      error: null\n    };\n  } catch (err) {\n    console.error('‚ùå Fetch error:', err);\n    return {\n      success: false,\n      error: err,\n      data: null\n    };\n  }\n};\n\n// Update an item\nexport const updateItem = async (id, updates) => {\n  try {\n    console.log('‚úèÔ∏è Updating item:', id, updates);\n    const {\n      data,\n      error\n    } = await supabase.from('items').update(updates).eq('id', id).select();\n    if (error) {\n      console.error('‚ùå Update failed:', error);\n      return {\n        success: false,\n        error,\n        data: null\n      };\n    }\n    console.log('‚úÖ Item updated successfully:', data);\n    return {\n      success: true,\n      data,\n      error: null\n    };\n  } catch (err) {\n    console.error('‚ùå Update error:', err);\n    return {\n      success: false,\n      error: err,\n      data: null\n    };\n  }\n};\n\n// Delete an item\nexport const deleteItem = async id => {\n  try {\n    console.log('üóëÔ∏è Deleting item:', id);\n    const {\n      data,\n      error\n    } = await supabase.from('items').delete().eq('id', id).select();\n    if (error) {\n      console.error('‚ùå Delete failed:', error);\n      return {\n        success: false,\n        error,\n        data: null\n      };\n    }\n    console.log('‚úÖ Item deleted successfully:', data);\n    return {\n      success: true,\n      data,\n      error: null\n    };\n  } catch (err) {\n    console.error('‚ùå Delete error:', err);\n    return {\n      success: false,\n      error: err,\n      data: null\n    };\n  }\n};\n\n// Get a single item by ID\nexport const getItemById = async id => {\n  try {\n    console.log('üîç Fetching item by ID:', id);\n    const {\n      data,\n      error\n    } = await supabase.from('items').select('*').eq('id', id).single();\n    if (error) {\n      console.error('‚ùå Get item failed:', error);\n      return {\n        success: false,\n        error,\n        data: null\n      };\n    }\n    console.log('‚úÖ Item fetched successfully:', data);\n    return {\n      success: true,\n      data,\n      error: null\n    };\n  } catch (err) {\n    console.error('‚ùå Get item error:', err);\n    return {\n      success: false,\n      error: err,\n      data: null\n    };\n  }\n};","map":{"version":3,"names":["supabase","insertItem","item","console","log","data","error","from","insert","select","success","err","fetchAllItems","order","ascending","updateItem","id","updates","update","eq","deleteItem","delete","getItemById","single"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/lib/supabaseCRUD.ts"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\n// TypeScript interface for our items table\r\nexport interface Item {\r\n  id?: number\r\n  name: string\r\n  created_at?: string\r\n}\r\n\r\n// Insert a new item\r\nexport const insertItem = async (item: Omit<Item, 'id' | 'created_at'>) => {\r\n  try {\r\n    console.log('üìù Inserting item:', item)\r\n    \r\n    const { data, error } = await supabase\r\n      .from('items')\r\n      .insert([item])\r\n      .select()\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Insert failed:', error)\r\n      return { success: false, error, data: null }\r\n    }\r\n    \r\n    console.log('‚úÖ Item inserted successfully:', data)\r\n    return { success: true, data, error: null }\r\n  } catch (err) {\r\n    console.error('‚ùå Insert error:', err)\r\n    return { success: false, error: err, data: null }\r\n  }\r\n}\r\n\r\n// Fetch all items\r\nexport const fetchAllItems = async () => {\r\n  try {\r\n    console.log('üì• Fetching all items...')\r\n    \r\n    const { data, error } = await supabase\r\n      .from('items')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Fetch failed:', error)\r\n      return { success: false, error, data: null }\r\n    }\r\n    \r\n    console.log('‚úÖ Items fetched successfully:', data)\r\n    return { success: true, data, error: null }\r\n  } catch (err) {\r\n    console.error('‚ùå Fetch error:', err)\r\n    return { success: false, error: err, data: null }\r\n  }\r\n}\r\n\r\n// Update an item\r\nexport const updateItem = async (id: number, updates: Partial<Omit<Item, 'id' | 'created_at'>>) => {\r\n  try {\r\n    console.log('‚úèÔ∏è Updating item:', id, updates)\r\n    \r\n    const { data, error } = await supabase\r\n      .from('items')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Update failed:', error)\r\n      return { success: false, error, data: null }\r\n    }\r\n    \r\n    console.log('‚úÖ Item updated successfully:', data)\r\n    return { success: true, data, error: null }\r\n  } catch (err) {\r\n    console.error('‚ùå Update error:', err)\r\n    return { success: false, error: err, data: null }\r\n  }\r\n}\r\n\r\n// Delete an item\r\nexport const deleteItem = async (id: number) => {\r\n  try {\r\n    console.log('üóëÔ∏è Deleting item:', id)\r\n    \r\n    const { data, error } = await supabase\r\n      .from('items')\r\n      .delete()\r\n      .eq('id', id)\r\n      .select()\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Delete failed:', error)\r\n      return { success: false, error, data: null }\r\n    }\r\n    \r\n    console.log('‚úÖ Item deleted successfully:', data)\r\n    return { success: true, data, error: null }\r\n  } catch (err) {\r\n    console.error('‚ùå Delete error:', err)\r\n    return { success: false, error: err, data: null }\r\n  }\r\n}\r\n\r\n// Get a single item by ID\r\nexport const getItemById = async (id: number) => {\r\n  try {\r\n    console.log('üîç Fetching item by ID:', id)\r\n    \r\n    const { data, error } = await supabase\r\n      .from('items')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single()\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Get item failed:', error)\r\n      return { success: false, error, data: null }\r\n    }\r\n    \r\n    console.log('‚úÖ Item fetched successfully:', data)\r\n    return { success: true, data, error: null }\r\n  } catch (err) {\r\n    console.error('‚ùå Get item error:', err)\r\n    return { success: false, error: err, data: null }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}