{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\components\\\\ChatInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport { transactionsApi } from '../supabase';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  onTransactionAdd,\n  onMessageAdd,\n  messages\n}) => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const parseTransaction = message => {\n    console.log('🔍 Parsing message:', message);\n    console.log('👤 Current user:', currentUser);\n\n    // Clean the message\n    const cleanMessage = message.trim().toLowerCase();\n\n    // Extract number from message (handles $, commas, decimals)\n    const numberMatch = cleanMessage.match(/(?:^|\\s)(-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?)(?:\\s|$)/);\n    if (!numberMatch) {\n      console.log('❌ No number found in message');\n      return null;\n    }\n\n    // Parse the amount\n    let amountStr = numberMatch[1].replace(/[$,]/g, ''); // Remove $ and commas\n    const amount = parseFloat(amountStr);\n    if (isNaN(amount)) {\n      console.log('Invalid number:', amountStr);\n      return null;\n    }\n    console.log('Extracted amount:', amount);\n\n    // Determine if it's income or expense based on keywords\n    const incomeKeywords = ['income', 'earned', 'made', 'received', 'got', 'deposited', 'added', 'salary', 'wage', 'bonus', 'payment', 'refund', 'rebate', 'plus', 'positive', 'gain'];\n    const expenseKeywords = ['spent', 'expense', 'bought', 'paid', 'cost', 'withdrew', 'deducted', 'bill', 'charge', 'purchase', 'minus', 'negative', 'loss', 'debt', 'owe'];\n    const hasIncomeKeyword = incomeKeywords.some(keyword => cleanMessage.includes(keyword));\n    const hasExpenseKeyword = expenseKeywords.some(keyword => cleanMessage.includes(keyword));\n\n    // If message is just a number, treat as income by default\n    if (!hasIncomeKeyword && !hasExpenseKeyword && /^-?\\d+(?:\\.\\d{2})?$/.test(cleanMessage)) {\n      console.log('Standalone number, treating as income');\n      return {\n        id: Date.now().toString(),\n        type: 'income',\n        amount: Math.abs(amount),\n        // Ensure positive for income\n        category: 'Income',\n        description: 'Income',\n        date: new Date()\n      };\n    }\n\n    // If message starts with negative number, treat as expense\n    if (amount < 0 || cleanMessage.startsWith('-')) {\n      console.log('Negative number, treating as expense');\n      return {\n        id: Date.now().toString(),\n        type: 'expense',\n        amount: Math.abs(amount),\n        // Make positive for expense\n        category: 'Other',\n        description: 'Expense',\n        date: new Date()\n      };\n    }\n\n    // Determine type based on keywords\n    let type;\n    let description;\n    if (hasIncomeKeyword && !hasExpenseKeyword) {\n      type = 'income';\n      description = 'Income';\n    } else if (hasExpenseKeyword && !hasIncomeKeyword) {\n      type = 'expense';\n      description = 'Expense';\n    } else if (hasIncomeKeyword && hasExpenseKeyword) {\n      // If both keywords present, use the one that appears first\n      const incomeIndex = Math.min(...incomeKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\n      const expenseIndex = Math.min(...expenseKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\n      if (incomeIndex < expenseIndex) {\n        type = 'income';\n        description = 'Income';\n      } else {\n        type = 'expense';\n        description = 'Expense';\n      }\n    } else {\n      // Default to income if no clear keywords\n      type = 'income';\n      description = 'Income';\n    }\n\n    // Try to extract description from the message\n    const words = cleanMessage.split(/\\s+/);\n    const descriptionWords = words.filter(word => !incomeKeywords.includes(word) && !expenseKeywords.includes(word) && !word.match(/^-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?$/) && word.length > 1);\n    if (descriptionWords.length > 0) {\n      description = descriptionWords.join(' ').trim();\n    }\n\n    // Categorize expenses\n    let category = type === 'income' ? 'Income' : 'Other';\n    if (type === 'expense') {\n      const desc = description.toLowerCase();\n      if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\n        category = 'Food';\n      } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\n        category = 'Transport';\n      } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\n        category = 'Housing';\n      } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\n        category = 'Entertainment';\n      } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\n        category = 'Healthcare';\n      } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\n        category = 'Shopping';\n      } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\n        category = 'Education';\n      }\n    }\n    console.log('Final result:', {\n      type,\n      amount,\n      category,\n      description\n    });\n    return {\n      id: Date.now().toString(),\n      type,\n      amount,\n      category,\n      description,\n      date: new Date()\n    };\n  };\n  const getAnitaResponse = (userMessage, transaction) => {\n    if (transaction) {\n      if (transaction.type === 'income') {\n        const responses = [`Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`, `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`, `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`, `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`];\n        return responses[Math.floor(Math.random() * responses.length)];\n      } else {\n        const responses = [`Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`, `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`, `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`, `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`];\n        return responses[Math.floor(Math.random() * responses.length)];\n      }\n    }\n    const responses = [\"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\", \"What's the financial tea today? ☕ Share your income or expenses with me!\", \"Spill the financial beans! 💅 I'm here to track your money flow\", \"Let's talk money! 💸 Share what you've earned or spent today\", \"What's happening with your wallet? 💳 Tell me about any transactions!\", \"Money talk time! 💰 Share your income or expenses with me\", \"Let's get financial! 📊 Tell me about your money moves today\", \"What's the financial update? 💅 I'm ready to track your transactions!\"];\n    return responses[Math.floor(Math.random() * responses.length)];\n  };\n  const handleSendMessage = async () => {\n    var _currentUser, _currentUser2;\n    if (!inputText.trim()) return;\n    const transaction = parseTransaction(inputText);\n    console.log('Parsed transaction:', transaction); // Debug log\n\n    const userMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date(),\n      transaction: transaction || undefined\n    };\n\n    // Add user message with current user info\n    const userMessageWithUser = {\n      ...userMessage,\n      userId: (_currentUser = currentUser) === null || _currentUser === void 0 ? void 0 : _currentUser.id,\n      username: (_currentUser2 = currentUser) === null || _currentUser2 === void 0 ? void 0 : _currentUser2.username\n    };\n    onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(userMessageWithUser);\n\n    // Save transaction to Supabase if one was parsed\n    if (transaction && currentUser) {\n      console.log('💾 Saving transaction to Supabase:', transaction);\n      console.log('👤 With user ID:', currentUser.id);\n      try {\n        const transactionWithUser = {\n          ...transaction,\n          userId: currentUser.id\n        };\n        console.log('📤 Sending to Supabase:', transactionWithUser);\n        const {\n          data,\n          error\n        } = await transactionsApi.insertTransaction(transactionWithUser);\n        if (error) {\n          console.error('❌ Error saving transaction to Supabase:', error);\n          // Still add to local state even if Supabase fails\n          onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n        } else {\n          console.log('✅ Transaction saved successfully to Supabase:', data);\n          // Transaction saved successfully to Supabase - don't add to local state as it will come via real-time\n        }\n      } catch (error) {\n        console.error('❌ Error saving transaction to Supabase:', error);\n        // Still add to local state even if Supabase fails\n        onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n      }\n    } else if (transaction && !currentUser) {\n      console.log('⚠️ No current user, adding transaction to local state only');\n      onTransactionAdd === null || onTransactionAdd === void 0 ? void 0 : onTransactionAdd(transaction);\n    } else {\n      console.log('ℹ️ No transaction parsed from message:', inputText);\n    }\n    setInputText('');\n    setIsTyping(true);\n\n    // Simulate ANITA typing\n    setTimeout(() => {\n      var _currentUser3, _currentUser4;\n      const anitaResponse = {\n        id: (Date.now() + 1).toString(),\n        text: getAnitaResponse(inputText, transaction || undefined),\n        sender: 'anita',\n        timestamp: new Date(),\n        userId: (_currentUser3 = currentUser) === null || _currentUser3 === void 0 ? void 0 : _currentUser3.id,\n        username: (_currentUser4 = currentUser) === null || _currentUser4 === void 0 ? void 0 : _currentUser4.username\n      };\n      onMessageAdd === null || onMessageAdd === void 0 ? void 0 : onMessageAdd(anitaResponse);\n      setIsTyping(false);\n    }, 1500);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-title\",\n        children: \"ANITA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: message.sender === 'anita' ? /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 45\n          }, this) : /*#__PURE__*/_jsxDEV(User, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this), message.transaction && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `transaction-info ${message.transaction.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-amount\",\n              children: [message.transaction.type === 'income' ? '+' : '-', \"$\", message.transaction.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-desc\",\n              children: message.transaction.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: message.timestamp.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message anita\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask ANITA about your finances...\",\n          rows: 1,\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim() || isTyping,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"5fjmnZ1R3JmH/pzHPEhD9iv3+KQ=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Send","Bot","User","transactionsApi","jsxDEV","_jsxDEV","ChatInterface","onTransactionAdd","onMessageAdd","messages","_s","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","parseTransaction","message","console","log","currentUser","cleanMessage","trim","toLowerCase","numberMatch","match","amountStr","replace","amount","parseFloat","isNaN","incomeKeywords","expenseKeywords","hasIncomeKeyword","some","keyword","includes","hasExpenseKeyword","test","id","Date","now","toString","type","Math","abs","category","description","date","startsWith","incomeIndex","min","map","indexOf","filter","i","expenseIndex","words","split","descriptionWords","word","length","join","desc","getAnitaResponse","userMessage","transaction","responses","floor","random","handleSendMessage","_currentUser","_currentUser2","text","sender","timestamp","undefined","userMessageWithUser","userId","username","transactionWithUser","data","error","insertTransaction","setTimeout","_currentUser3","_currentUser4","anitaResponse","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","toLocaleTimeString","hour","minute","ref","value","onChange","target","onKeyPress","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Send, Bot, User } from 'lucide-react';\r\nimport { transactionsApi } from '../supabase';\r\nimport './ChatInterface.css';\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface ChatInterfaceProps {\r\n  onTransactionAdd?: (transaction: Transaction) => void;\r\n  onMessageAdd?: (message: Message) => void;\r\n  messages: Message[];\r\n}\r\n\r\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({ onTransactionAdd, onMessageAdd, messages }) => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const parseTransaction = (message: string): Transaction | null => {\r\n    console.log('🔍 Parsing message:', message);\r\n    console.log('👤 Current user:', currentUser);\r\n    \r\n    // Clean the message\r\n    const cleanMessage = message.trim().toLowerCase();\r\n    \r\n    // Extract number from message (handles $, commas, decimals)\r\n    const numberMatch = cleanMessage.match(/(?:^|\\s)(-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?)(?:\\s|$)/);\r\n    if (!numberMatch) {\r\n      console.log('❌ No number found in message');\r\n      return null;\r\n    }\r\n    \r\n    // Parse the amount\r\n    let amountStr = numberMatch[1].replace(/[$,]/g, ''); // Remove $ and commas\r\n    const amount = parseFloat(amountStr);\r\n    \r\n    if (isNaN(amount)) {\r\n      console.log('Invalid number:', amountStr);\r\n      return null;\r\n    }\r\n    \r\n    console.log('Extracted amount:', amount);\r\n    \r\n    // Determine if it's income or expense based on keywords\r\n    const incomeKeywords = ['income', 'earned', 'made', 'received', 'got', 'deposited', 'added', 'salary', 'wage', 'bonus', 'payment', 'refund', 'rebate', 'plus', 'positive', 'gain'];\r\n    const expenseKeywords = ['spent', 'expense', 'bought', 'paid', 'cost', 'withdrew', 'deducted', 'bill', 'charge', 'purchase', 'minus', 'negative', 'loss', 'debt', 'owe'];\r\n    \r\n    const hasIncomeKeyword = incomeKeywords.some(keyword => cleanMessage.includes(keyword));\r\n    const hasExpenseKeyword = expenseKeywords.some(keyword => cleanMessage.includes(keyword));\r\n    \r\n    // If message is just a number, treat as income by default\r\n    if (!hasIncomeKeyword && !hasExpenseKeyword && /^-?\\d+(?:\\.\\d{2})?$/.test(cleanMessage)) {\r\n      console.log('Standalone number, treating as income');\r\n      return {\r\n        id: Date.now().toString(),\r\n        type: 'income',\r\n        amount: Math.abs(amount), // Ensure positive for income\r\n        category: 'Income',\r\n        description: 'Income',\r\n        date: new Date()\r\n      };\r\n    }\r\n    \r\n    // If message starts with negative number, treat as expense\r\n    if (amount < 0 || cleanMessage.startsWith('-')) {\r\n      console.log('Negative number, treating as expense');\r\n      return {\r\n        id: Date.now().toString(),\r\n        type: 'expense',\r\n        amount: Math.abs(amount), // Make positive for expense\r\n        category: 'Other',\r\n        description: 'Expense',\r\n        date: new Date()\r\n      };\r\n    }\r\n    \r\n    // Determine type based on keywords\r\n    let type: 'income' | 'expense';\r\n    let description: string;\r\n    \r\n    if (hasIncomeKeyword && !hasExpenseKeyword) {\r\n      type = 'income';\r\n      description = 'Income';\r\n    } else if (hasExpenseKeyword && !hasIncomeKeyword) {\r\n      type = 'expense';\r\n      description = 'Expense';\r\n    } else if (hasIncomeKeyword && hasExpenseKeyword) {\r\n      // If both keywords present, use the one that appears first\r\n      const incomeIndex = Math.min(...incomeKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\r\n      const expenseIndex = Math.min(...expenseKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\r\n      \r\n      if (incomeIndex < expenseIndex) {\r\n        type = 'income';\r\n        description = 'Income';\r\n      } else {\r\n        type = 'expense';\r\n        description = 'Expense';\r\n      }\r\n    } else {\r\n      // Default to income if no clear keywords\r\n      type = 'income';\r\n      description = 'Income';\r\n    }\r\n    \r\n    // Try to extract description from the message\r\n    const words = cleanMessage.split(/\\s+/);\r\n    const descriptionWords = words.filter(word => \r\n      !incomeKeywords.includes(word) && \r\n      !expenseKeywords.includes(word) && \r\n      !word.match(/^-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?$/) &&\r\n      word.length > 1\r\n    );\r\n    \r\n    if (descriptionWords.length > 0) {\r\n      description = descriptionWords.join(' ').trim();\r\n    }\r\n    \r\n    // Categorize expenses\r\n    let category = type === 'income' ? 'Income' : 'Other';\r\n    if (type === 'expense') {\r\n      const desc = description.toLowerCase();\r\n      if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\r\n        category = 'Food';\r\n      } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\r\n        category = 'Transport';\r\n      } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\r\n        category = 'Housing';\r\n      } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\r\n        category = 'Entertainment';\r\n      } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\r\n        category = 'Healthcare';\r\n      } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\r\n        category = 'Shopping';\r\n      } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\r\n        category = 'Education';\r\n      }\r\n    }\r\n    \r\n    console.log('Final result:', { type, amount, category, description });\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      type,\r\n      amount,\r\n      category,\r\n      description,\r\n      date: new Date()\r\n    };\r\n  };\r\n\r\n  const getAnitaResponse = (userMessage: string, transaction?: Transaction): string => {\r\n    if (transaction) {\r\n      if (transaction.type === 'income') {\r\n        const responses = [\r\n          `Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`,\r\n          `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`,\r\n          `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`,\r\n          `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      } else {\r\n        const responses = [\r\n          `Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`,\r\n          `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`,\r\n          `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`,\r\n          `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      }\r\n    }\r\n    \r\n    const responses = [\r\n      \"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\",\r\n      \"What's the financial tea today? ☕ Share your income or expenses with me!\",\r\n      \"Spill the financial beans! 💅 I'm here to track your money flow\",\r\n      \"Let's talk money! 💸 Share what you've earned or spent today\",\r\n      \"What's happening with your wallet? 💳 Tell me about any transactions!\",\r\n      \"Money talk time! 💰 Share your income or expenses with me\",\r\n      \"Let's get financial! 📊 Tell me about your money moves today\",\r\n      \"What's the financial update? 💅 I'm ready to track your transactions!\"\r\n    ];\r\n    \r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const transaction = parseTransaction(inputText);\r\n    console.log('Parsed transaction:', transaction); // Debug log\r\n    \r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n      transaction: transaction || undefined\r\n    };\r\n\r\n    // Add user message with current user info\r\n    const userMessageWithUser = {\r\n      ...userMessage,\r\n      userId: currentUser?.id,\r\n      username: currentUser?.username\r\n    };\r\n    onMessageAdd?.(userMessageWithUser);\r\n    \r\n    // Save transaction to Supabase if one was parsed\r\n    if (transaction && currentUser) {\r\n      console.log('💾 Saving transaction to Supabase:', transaction);\r\n      console.log('👤 With user ID:', currentUser.id);\r\n      try {\r\n        const transactionWithUser = {\r\n          ...transaction,\r\n          userId: currentUser.id\r\n        };\r\n        console.log('📤 Sending to Supabase:', transactionWithUser);\r\n        const { data, error } = await transactionsApi.insertTransaction(transactionWithUser);\r\n        if (error) {\r\n          console.error('❌ Error saving transaction to Supabase:', error);\r\n          // Still add to local state even if Supabase fails\r\n          onTransactionAdd?.(transaction);\r\n        } else {\r\n          console.log('✅ Transaction saved successfully to Supabase:', data);\r\n          // Transaction saved successfully to Supabase - don't add to local state as it will come via real-time\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error saving transaction to Supabase:', error);\r\n        // Still add to local state even if Supabase fails\r\n        onTransactionAdd?.(transaction);\r\n      }\r\n    } else if (transaction && !currentUser) {\r\n      console.log('⚠️ No current user, adding transaction to local state only');\r\n      onTransactionAdd?.(transaction);\r\n    } else {\r\n      console.log('ℹ️ No transaction parsed from message:', inputText);\r\n    }\r\n    \r\n    setInputText('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate ANITA typing\r\n    setTimeout(() => {\r\n      const anitaResponse: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: getAnitaResponse(inputText, transaction || undefined),\r\n        sender: 'anita',\r\n        timestamp: new Date(),\r\n        userId: currentUser?.id,\r\n        username: currentUser?.username\r\n      };\r\n      \r\n      onMessageAdd?.(anitaResponse);\r\n      setIsTyping(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-header\">\r\n        <h1 className=\"main-title\">ANITA</h1>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`message ${message.sender}`}>\r\n            <div className=\"message-avatar\">\r\n              {message.sender === 'anita' ? <Bot size={20} /> : <User size={20} />}\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"message-text\">{message.text}</div>\r\n              {message.transaction && (\r\n                <div className={`transaction-info ${message.transaction.type}`}>\r\n                  <span className=\"transaction-amount\">\r\n                    {message.transaction.type === 'income' ? '+' : '-'}${message.transaction.amount}\r\n                  </span>\r\n                  <span className=\"transaction-desc\">{message.transaction.description}</span>\r\n                </div>\r\n              )}\r\n              <div className=\"message-time\">\r\n                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {isTyping && (\r\n          <div className=\"message anita\">\r\n            <div className=\"message-avatar\">\r\n              <Bot size={20} />\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <div className=\"chat-input\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Ask ANITA about your finances...\"\r\n            rows={1}\r\n            className=\"input-field\"\r\n          />\r\n          <button \r\n            onClick={handleSendMessage}\r\n            disabled={!inputText.trim() || isTyping}\r\n            className=\"send-button\"\r\n          >\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}