{"ast":null,"code":"import _objectSpread from\"C:/Users/dzm13/anita-finance-advisor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _SimpleAnitaService;// ANITA Finance Advisor - Simple Service\n// This service uses a single table with account_id, message, transaction, and date/time\nexport class SimpleAnitaService{constructor(){this.accountId='default-user';}static getInstance(){if(!SimpleAnitaService.instance){SimpleAnitaService.instance=new SimpleAnitaService();}return SimpleAnitaService.instance;}// Save message to both localStorage and Supabase\nasync saveMessage(message){try{var _message$transaction,_message$transaction2,_message$transaction3,_message$transaction4;console.log('🔄 Saving message:',message.text);// Save to localStorage first (instant UI update)\nconst existing=this.getMessagesFromStorage();const updated=[...existing,message];localStorage.setItem('anita-messages',JSON.stringify(updated));// Prepare data for Supabase\nconst anitaData={account_id:this.accountId,message:message.text,transaction_type:((_message$transaction=message.transaction)===null||_message$transaction===void 0?void 0:_message$transaction.type)||null,transaction_amount:((_message$transaction2=message.transaction)===null||_message$transaction2===void 0?void 0:_message$transaction2.amount)||null,transaction_category:((_message$transaction3=message.transaction)===null||_message$transaction3===void 0?void 0:_message$transaction3.category)||null,transaction_description:((_message$transaction4=message.transaction)===null||_message$transaction4===void 0?void 0:_message$transaction4.description)||null,amount:message.transaction?message.transaction.type==='income'?\"+\".concat(message.transaction.amount):\"-\".concat(message.transaction.amount):null};console.log('💾 Message data for Supabase:',anitaData);// Store in queue for MCP processing AND trigger immediate upload\nthis.addToSupabaseQueue(anitaData);this.uploadToSupabase(anitaData);}catch(error){console.error('❌ Error saving message:',error);}}// Save transaction to both localStorage and Supabase\nasync saveTransaction(transaction){try{console.log('🔄 Saving transaction:',transaction);// Save to localStorage first (instant UI update)\nconst existing=this.getTransactionsFromStorage();const updated=[...existing,transaction];localStorage.setItem('anita-transactions',JSON.stringify(updated));// Prepare data for Supabase\nconst anitaData={account_id:this.accountId,message:\"\".concat(transaction.type,\" \").concat(transaction.amount,\" - \").concat(transaction.description),transaction_type:transaction.type,transaction_amount:transaction.amount,transaction_category:transaction.category,transaction_description:transaction.description,amount:transaction.type==='income'?\"+\".concat(transaction.amount):\"-\".concat(transaction.amount)};console.log('💾 Transaction data for Supabase:',anitaData);// Store in queue for MCP processing AND trigger immediate upload\nthis.addToSupabaseQueue(anitaData);this.uploadToSupabase(anitaData);}catch(error){console.error('❌ Error saving transaction:',error);}}// Get messages from localStorage\ngetMessagesFromStorage(){try{const saved=localStorage.getItem('anita-messages');if(saved){const parsed=JSON.parse(saved);return parsed.map(m=>_objectSpread(_objectSpread({},m),{},{timestamp:new Date(m.timestamp)}));}return[];}catch(error){console.error('❌ Error loading messages:',error);return[];}}// Get transactions from localStorage\ngetTransactionsFromStorage(){try{const saved=localStorage.getItem('anita-transactions');if(saved){const parsed=JSON.parse(saved);return parsed.map(t=>_objectSpread(_objectSpread({},t),{},{date:new Date(t.date)}));}return[];}catch(error){console.error('❌ Error loading transactions:',error);return[];}}// Add to Supabase queue\naddToSupabaseQueue(data){const queueItem=_objectSpread(_objectSpread({},data),{},{id:Date.now().toString(),timestamp:Date.now()});const existing=this.getSupabaseQueue();existing.push(queueItem);localStorage.setItem('anita-supabase-queue',JSON.stringify(existing));console.log('📦 Added to Supabase queue:',queueItem);// Show visual indicator\nthis.showSyncIndicator();}getSupabaseQueue(){try{const saved=localStorage.getItem('anita-supabase-queue');return saved?JSON.parse(saved):[];}catch(error){console.error('❌ Error loading Supabase queue:',error);return[];}}showSyncIndicator(){// Create visual indicator\nconst indicator=document.createElement('div');indicator.id='anita-sync-indicator';indicator.style.cssText=\"\\n      position: fixed;\\n      top: 20px;\\n      right: 20px;\\n      background: #10b981;\\n      color: white;\\n      padding: 10px 15px;\\n      border-radius: 5px;\\n      font-size: 12px;\\n      z-index: 1000;\\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\\n    \";indicator.textContent='📡 Syncing to database...';// Remove existing indicator\nconst existing=document.getElementById('anita-sync-indicator');if(existing)existing.remove();document.body.appendChild(indicator);// Remove after 3 seconds\nsetTimeout(()=>{if(indicator.parentNode){indicator.parentNode.removeChild(indicator);}},3000);}// Get queued data for MCP processing\ngetQueuedData(){return this.getSupabaseQueue();}// Clear processed data from queue\nclearProcessedData(processedIds){const queue=this.getSupabaseQueue();const remaining=queue.filter(item=>!processedIds.includes(item.id));localStorage.setItem('anita-supabase-queue',JSON.stringify(remaining));console.log('🧹 Cleared processed data from queue');}// Upload data directly to Supabase via MCP\nasync uploadToSupabase(data){try{var _data$transaction_cat,_data$transaction_des;console.log('📡 Uploading to Supabase via MCP:',data);// Prepare the SQL insert statement with proper escaping\nconst escapedMessage=data.message.replace(/'/g,\"''\");const escapedCategory=((_data$transaction_cat=data.transaction_category)===null||_data$transaction_cat===void 0?void 0:_data$transaction_cat.replace(/'/g,\"''\"))||'';const escapedDescription=((_data$transaction_des=data.transaction_description)===null||_data$transaction_des===void 0?void 0:_data$transaction_des.replace(/'/g,\"''\"))||'';const sql=\"\\n        INSERT INTO anita_data (\\n          account_id, \\n          message, \\n          transaction_type, \\n          transaction_amount, \\n          transaction_category, \\n          transaction_description, \\n          amount\\n        ) VALUES (\\n          '\".concat(data.account_id,\"',\\n          '\").concat(escapedMessage,\"',\\n          \").concat(data.transaction_type?\"'\".concat(data.transaction_type,\"'\"):'NULL',\",\\n          \").concat(data.transaction_amount?data.transaction_amount:'NULL',\",\\n          \").concat(data.transaction_category?\"'\".concat(escapedCategory,\"'\"):'NULL',\",\\n          \").concat(data.transaction_description?\"'\".concat(escapedDescription,\"'\"):'NULL',\",\\n          \").concat(data.amount?\"'\".concat(data.amount,\"'\"):'NULL',\"\\n        );\\n      \");console.log('📝 SQL prepared for MCP execution:',sql);// Store the SQL for MCP assistant to execute\nthis.storeSQLForMCP(sql,data);// Show success indicator\nthis.showUploadSuccessIndicator();}catch(error){console.error('❌ Error uploading to Supabase:',error);this.showUploadErrorIndicator();}}// Store SQL for MCP assistant to execute\nstoreSQLForMCP(sql,data){const sqlData={sql,data,timestamp:Date.now(),id:Date.now().toString()};const existing=this.getSQLQueue();existing.push(sqlData);localStorage.setItem('anita-sql-queue',JSON.stringify(existing));console.log('📦 SQL queued for MCP execution:',sqlData);}getSQLQueue(){try{const saved=localStorage.getItem('anita-sql-queue');return saved?JSON.parse(saved):[];}catch(error){console.error('❌ Error loading SQL queue:',error);return[];}}showUploadSuccessIndicator(){const indicator=document.createElement('div');indicator.id='anita-upload-success';indicator.style.cssText=\"\\n      position: fixed;\\n      top: 20px;\\n      right: 20px;\\n      background: #10b981;\\n      color: white;\\n      padding: 10px 15px;\\n      border-radius: 5px;\\n      font-size: 12px;\\n      z-index: 1000;\\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\\n    \";indicator.textContent='✅ Uploaded to database!';const existing=document.getElementById('anita-upload-success');if(existing)existing.remove();document.body.appendChild(indicator);setTimeout(()=>{if(indicator.parentNode){indicator.parentNode.removeChild(indicator);}},2000);}showUploadErrorIndicator(){const indicator=document.createElement('div');indicator.id='anita-upload-error';indicator.style.cssText=\"\\n      position: fixed;\\n      top: 20px;\\n      right: 20px;\\n      background: #ef4444;\\n      color: white;\\n      padding: 10px 15px;\\n      border-radius: 5px;\\n      font-size: 12px;\\n      z-index: 1000;\\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\\n    \";indicator.textContent='❌ Upload failed!';const existing=document.getElementById('anita-upload-error');if(existing)existing.remove();document.body.appendChild(indicator);setTimeout(()=>{if(indicator.parentNode){indicator.parentNode.removeChild(indicator);}},3000);}}// Export singleton instance\n_SimpleAnitaService=SimpleAnitaService;SimpleAnitaService.instance=void 0;export const simpleAnitaService=SimpleAnitaService.getInstance();","map":{"version":3,"names":["SimpleAnitaService","constructor","accountId","getInstance","instance","saveMessage","message","_message$transaction","_message$transaction2","_message$transaction3","_message$transaction4","console","log","text","existing","getMessagesFromStorage","updated","localStorage","setItem","JSON","stringify","anitaData","account_id","transaction_type","transaction","type","transaction_amount","amount","transaction_category","category","transaction_description","description","concat","addToSupabaseQueue","uploadToSupabase","error","saveTransaction","getTransactionsFromStorage","saved","getItem","parsed","parse","map","m","_objectSpread","timestamp","Date","t","date","data","queueItem","id","now","toString","getSupabaseQueue","push","showSyncIndicator","indicator","document","createElement","style","cssText","textContent","getElementById","remove","body","appendChild","setTimeout","parentNode","removeChild","getQueuedData","clearProcessedData","processedIds","queue","remaining","filter","item","includes","_data$transaction_cat","_data$transaction_des","escapedMessage","replace","escapedCategory","escapedDescription","sql","storeSQLForMCP","showUploadSuccessIndicator","showUploadErrorIndicator","sqlData","getSQLQueue","_SimpleAnitaService","simpleAnitaService"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/simpleAnitaService.ts"],"sourcesContent":["// ANITA Finance Advisor - Simple Service\r\n// This service uses a single table with account_id, message, transaction, and date/time\r\n\r\nexport interface AnitaData {\r\n  id?: string;\r\n  account_id: string;\r\n  message: string;\r\n  transaction_type?: 'income' | 'expense' | null;\r\n  transaction_amount?: number | null;\r\n  transaction_category?: string | null;\r\n  transaction_description?: string | null;\r\n  amount?: string | null; // New field with plus/minus signs\r\n  created_at?: string;\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\nexport class SimpleAnitaService {\r\n  private static instance: SimpleAnitaService;\r\n  private accountId = 'default-user';\r\n\r\n  static getInstance(): SimpleAnitaService {\r\n    if (!SimpleAnitaService.instance) {\r\n      SimpleAnitaService.instance = new SimpleAnitaService();\r\n    }\r\n    return SimpleAnitaService.instance;\r\n  }\r\n\r\n  // Save message to both localStorage and Supabase\r\n  async saveMessage(message: Message): Promise<void> {\r\n    try {\r\n      console.log('🔄 Saving message:', message.text);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getMessagesFromStorage();\r\n      const updated = [...existing, message];\r\n      localStorage.setItem('anita-messages', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: message.text,\r\n        transaction_type: message.transaction?.type || null,\r\n        transaction_amount: message.transaction?.amount || null,\r\n        transaction_category: message.transaction?.category || null,\r\n        transaction_description: message.transaction?.description || null,\r\n        amount: message.transaction ? \r\n          (message.transaction.type === 'income' ? `+${message.transaction.amount}` : `-${message.transaction.amount}`) \r\n          : null\r\n      };\r\n      \r\n      console.log('💾 Message data for Supabase:', anitaData);\r\n      \r\n      // Store in queue for MCP processing AND trigger immediate upload\r\n      this.addToSupabaseQueue(anitaData);\r\n      this.uploadToSupabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error saving message:', error);\r\n    }\r\n  }\r\n\r\n  // Save transaction to both localStorage and Supabase\r\n  async saveTransaction(transaction: Transaction): Promise<void> {\r\n    try {\r\n      console.log('🔄 Saving transaction:', transaction);\r\n      \r\n      // Save to localStorage first (instant UI update)\r\n      const existing = this.getTransactionsFromStorage();\r\n      const updated = [...existing, transaction];\r\n      localStorage.setItem('anita-transactions', JSON.stringify(updated));\r\n      \r\n      // Prepare data for Supabase\r\n      const anitaData: AnitaData = {\r\n        account_id: this.accountId,\r\n        message: `${transaction.type} ${transaction.amount} - ${transaction.description}`,\r\n        transaction_type: transaction.type,\r\n        transaction_amount: transaction.amount,\r\n        transaction_category: transaction.category,\r\n        transaction_description: transaction.description,\r\n        amount: transaction.type === 'income' ? `+${transaction.amount}` : `-${transaction.amount}`\r\n      };\r\n      \r\n      console.log('💾 Transaction data for Supabase:', anitaData);\r\n      \r\n      // Store in queue for MCP processing AND trigger immediate upload\r\n      this.addToSupabaseQueue(anitaData);\r\n      this.uploadToSupabase(anitaData);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error saving transaction:', error);\r\n    }\r\n  }\r\n\r\n  // Get messages from localStorage\r\n  getMessagesFromStorage(): Message[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-messages');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get transactions from localStorage\r\n  getTransactionsFromStorage(): Transaction[] {\r\n    try {\r\n      const saved = localStorage.getItem('anita-transactions');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        return parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading transactions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add to Supabase queue\r\n  private addToSupabaseQueue(data: AnitaData): void {\r\n    const queueItem = {\r\n      ...data,\r\n      id: Date.now().toString(),\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    const existing = this.getSupabaseQueue();\r\n    existing.push(queueItem);\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(existing));\r\n    \r\n    console.log('📦 Added to Supabase queue:', queueItem);\r\n    \r\n    // Show visual indicator\r\n    this.showSyncIndicator();\r\n  }\r\n\r\n  private getSupabaseQueue(): Array<AnitaData & {id: string, timestamp: number}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-supabase-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading Supabase queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private showSyncIndicator(): void {\r\n    // Create visual indicator\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-sync-indicator';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '📡 Syncing to database...';\r\n    \r\n    // Remove existing indicator\r\n    const existing = document.getElementById('anita-sync-indicator');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    // Remove after 3 seconds\r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  // Get queued data for MCP processing\r\n  getQueuedData(): Array<AnitaData & {id: string, timestamp: number}> {\r\n    return this.getSupabaseQueue();\r\n  }\r\n\r\n  // Clear processed data from queue\r\n  clearProcessedData(processedIds: string[]): void {\r\n    const queue = this.getSupabaseQueue();\r\n    const remaining = queue.filter(item => !processedIds.includes(item.id));\r\n    localStorage.setItem('anita-supabase-queue', JSON.stringify(remaining));\r\n    console.log('🧹 Cleared processed data from queue');\r\n  }\r\n\r\n  // Upload data directly to Supabase via MCP\r\n  private async uploadToSupabase(data: AnitaData): Promise<void> {\r\n    try {\r\n      console.log('📡 Uploading to Supabase via MCP:', data);\r\n      \r\n      // Prepare the SQL insert statement with proper escaping\r\n      const escapedMessage = data.message.replace(/'/g, \"''\");\r\n      const escapedCategory = data.transaction_category?.replace(/'/g, \"''\") || '';\r\n      const escapedDescription = data.transaction_description?.replace(/'/g, \"''\") || '';\r\n      \r\n      const sql = `\r\n        INSERT INTO anita_data (\r\n          account_id, \r\n          message, \r\n          transaction_type, \r\n          transaction_amount, \r\n          transaction_category, \r\n          transaction_description, \r\n          amount\r\n        ) VALUES (\r\n          '${data.account_id}',\r\n          '${escapedMessage}',\r\n          ${data.transaction_type ? `'${data.transaction_type}'` : 'NULL'},\r\n          ${data.transaction_amount ? data.transaction_amount : 'NULL'},\r\n          ${data.transaction_category ? `'${escapedCategory}'` : 'NULL'},\r\n          ${data.transaction_description ? `'${escapedDescription}'` : 'NULL'},\r\n          ${data.amount ? `'${data.amount}'` : 'NULL'}\r\n        );\r\n      `;\r\n      \r\n      console.log('📝 SQL prepared for MCP execution:', sql);\r\n      \r\n      // Store the SQL for MCP assistant to execute\r\n      this.storeSQLForMCP(sql, data);\r\n      \r\n      // Show success indicator\r\n      this.showUploadSuccessIndicator();\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error uploading to Supabase:', error);\r\n      this.showUploadErrorIndicator();\r\n    }\r\n  }\r\n\r\n  // Store SQL for MCP assistant to execute\r\n  private storeSQLForMCP(sql: string, data: AnitaData): void {\r\n    const sqlData = {\r\n      sql,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: Date.now().toString()\r\n    };\r\n    \r\n    const existing = this.getSQLQueue();\r\n    existing.push(sqlData);\r\n    localStorage.setItem('anita-sql-queue', JSON.stringify(existing));\r\n    \r\n    console.log('📦 SQL queued for MCP execution:', sqlData);\r\n  }\r\n\r\n  private getSQLQueue(): Array<{sql: string, data: AnitaData, timestamp: number, id: string}> {\r\n    try {\r\n      const saved = localStorage.getItem('anita-sql-queue');\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('❌ Error loading SQL queue:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private showUploadSuccessIndicator(): void {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-upload-success';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #10b981;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '✅ Uploaded to database!';\r\n    \r\n    const existing = document.getElementById('anita-upload-success');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  private showUploadErrorIndicator(): void {\r\n    const indicator = document.createElement('div');\r\n    indicator.id = 'anita-upload-error';\r\n    indicator.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #ef4444;\r\n      color: white;\r\n      padding: 10px 15px;\r\n      border-radius: 5px;\r\n      font-size: 12px;\r\n      z-index: 1000;\r\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n    `;\r\n    indicator.textContent = '❌ Upload failed!';\r\n    \r\n    const existing = document.getElementById('anita-upload-error');\r\n    if (existing) existing.remove();\r\n    \r\n    document.body.appendChild(indicator);\r\n    \r\n    setTimeout(() => {\r\n      if (indicator.parentNode) {\r\n        indicator.parentNode.removeChild(indicator);\r\n      }\r\n    }, 3000);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const simpleAnitaService = SimpleAnitaService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}