{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\components\\\\SupabaseTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { transactionsApi } from '../supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SupabaseTest = () => {\n  _s();\n  const [testResult, setTestResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  const testConnection = async () => {\n    setLoading(true);\n    setTestResult('Testing Supabase connection...');\n    try {\n      // Test 1: Try to fetch transactions\n      const {\n        data: fetchData,\n        error: fetchError\n      } = await transactionsApi.fetchTransactions();\n      if (fetchError) {\n        setTestResult(`❌ Fetch Error: ${fetchError.message}`);\n        console.error('Fetch error:', fetchError);\n      } else {\n        setTestResult(`✅ Fetch Success: Found ${(fetchData === null || fetchData === void 0 ? void 0 : fetchData.length) || 0} transactions`);\n        console.log('Fetch data:', fetchData);\n      }\n\n      // Test 2: Try to insert a test transaction\n      const testTransaction = {\n        id: Date.now().toString(),\n        type: 'expense',\n        amount: 10.50,\n        category: 'Test',\n        description: 'Test transaction from app',\n        date: new Date()\n      };\n      console.log('Attempting to insert test transaction:', testTransaction);\n      const {\n        data: insertData,\n        error: insertError\n      } = await transactionsApi.insertTransaction(testTransaction);\n      if (insertError) {\n        setTestResult(prev => prev + `\\n❌ Insert Error: ${insertError.message}`);\n        console.error('Insert error:', insertError);\n      } else {\n        setTestResult(prev => {\n          var _insertData$;\n          return prev + `\\n✅ Insert Success: Transaction saved with ID ${insertData === null || insertData === void 0 ? void 0 : (_insertData$ = insertData[0]) === null || _insertData$ === void 0 ? void 0 : _insertData$.id}`;\n        });\n        console.log('Insert data:', insertData);\n      }\n    } catch (error) {\n      setTestResult(`❌ Connection Error: ${error}`);\n      console.error('Connection error:', error);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      border: '1px solid #ccc',\n      margin: '20px',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Supabase Connection Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testConnection,\n      disabled: loading,\n      style: {\n        padding: '10px 20px',\n        marginBottom: '10px'\n      },\n      children: loading ? 'Testing...' : 'Test Supabase Connection'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        whiteSpace: 'pre-line',\n        fontFamily: 'monospace',\n        fontSize: '12px'\n      },\n      children: testResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SupabaseTest, \"u7Dkyx5gq3ljEgA7UWq3W0Ms3ak=\");\n_c = SupabaseTest;\nexport default SupabaseTest;\nvar _c;\n$RefreshReg$(_c, \"SupabaseTest\");","map":{"version":3,"names":["React","useState","transactionsApi","jsxDEV","_jsxDEV","SupabaseTest","_s","testResult","setTestResult","loading","setLoading","testConnection","data","fetchData","error","fetchError","fetchTransactions","message","console","length","log","testTransaction","id","Date","now","toString","type","amount","category","description","date","insertData","insertError","insertTransaction","prev","_insertData$","style","padding","border","margin","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","marginBottom","whiteSpace","fontFamily","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/SupabaseTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { transactionsApi } from '../supabase';\r\n\r\nconst SupabaseTest: React.FC = () => {\r\n  const [testResult, setTestResult] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const testConnection = async () => {\r\n    setLoading(true);\r\n    setTestResult('Testing Supabase connection...');\r\n    \r\n    try {\r\n      // Test 1: Try to fetch transactions\r\n      const { data: fetchData, error: fetchError } = await transactionsApi.fetchTransactions();\r\n      \r\n      if (fetchError) {\r\n        setTestResult(`❌ Fetch Error: ${fetchError.message}`);\r\n        console.error('Fetch error:', fetchError);\r\n      } else {\r\n        setTestResult(`✅ Fetch Success: Found ${fetchData?.length || 0} transactions`);\r\n        console.log('Fetch data:', fetchData);\r\n      }\r\n      \r\n      // Test 2: Try to insert a test transaction\r\n      const testTransaction = {\r\n        id: Date.now().toString(),\r\n        type: 'expense' as const,\r\n        amount: 10.50,\r\n        category: 'Test',\r\n        description: 'Test transaction from app',\r\n        date: new Date()\r\n      };\r\n      \r\n      console.log('Attempting to insert test transaction:', testTransaction);\r\n      const { data: insertData, error: insertError } = await transactionsApi.insertTransaction(testTransaction);\r\n      \r\n      if (insertError) {\r\n        setTestResult(prev => prev + `\\n❌ Insert Error: ${insertError.message}`);\r\n        console.error('Insert error:', insertError);\r\n      } else {\r\n        setTestResult(prev => prev + `\\n✅ Insert Success: Transaction saved with ID ${insertData?.[0]?.id}`);\r\n        console.log('Insert data:', insertData);\r\n      }\r\n      \r\n    } catch (error) {\r\n      setTestResult(`❌ Connection Error: ${error}`);\r\n      console.error('Connection error:', error);\r\n    }\r\n    \r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', border: '1px solid #ccc', margin: '20px', borderRadius: '8px' }}>\r\n      <h3>Supabase Connection Test</h3>\r\n      <button \r\n        onClick={testConnection} \r\n        disabled={loading}\r\n        style={{ padding: '10px 20px', marginBottom: '10px' }}\r\n      >\r\n        {loading ? 'Testing...' : 'Test Supabase Connection'}\r\n      </button>\r\n      <div style={{ whiteSpace: 'pre-line', fontFamily: 'monospace', fontSize: '12px' }}>\r\n        {testResult}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SupabaseTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}