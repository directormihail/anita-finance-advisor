{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import{Send,Bot,User}from'lucide-react';import{saveTransaction}from'../supabaseClient';import'./ChatInterface.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatInterface=_ref=>{let{onTransactionAdd,onMessageAdd,messages,currentUserId}=_ref;const[inputText,setInputText]=useState('');const[isTyping,setIsTyping]=useState(false);const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);const parseTransaction=message=>{console.log('Parsing message:',message);// Clean the message\nconst cleanMessage=message.trim().toLowerCase();// Extract number from message (handles $, commas, decimals)\nconst numberMatch=cleanMessage.match(/(?:^|\\s)(-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?)(?:\\s|$)/);if(!numberMatch){console.log('No number found in message');return null;}// Parse the amount\nlet amountStr=numberMatch[1].replace(/[$,]/g,'');// Remove $ and commas\nconst amount=parseFloat(amountStr);if(isNaN(amount)){console.log('Invalid number:',amountStr);return null;}console.log('Extracted amount:',amount);// Determine if it's income or expense based on keywords\nconst incomeKeywords=['income','earned','made','received','got','deposited','added','salary','wage','bonus','payment','refund','rebate','plus','positive','gain'];const expenseKeywords=['spent','expense','bought','paid','cost','withdrew','deducted','bill','charge','purchase','minus','negative','loss','debt','owe'];const hasIncomeKeyword=incomeKeywords.some(keyword=>cleanMessage.includes(keyword));const hasExpenseKeyword=expenseKeywords.some(keyword=>cleanMessage.includes(keyword));// If message is just a number, treat as income by default\nif(!hasIncomeKeyword&&!hasExpenseKeyword&&/^-?\\d+(?:\\.\\d{2})?$/.test(cleanMessage)){console.log('Standalone number, treating as income');return{id:Date.now().toString(),type:'income',amount:Math.abs(amount),// Ensure positive for income\ncategory:'Income',description:'Income',date:new Date()};}// If message starts with negative number, treat as expense\nif(amount<0||cleanMessage.startsWith('-')){console.log('Negative number, treating as expense');return{id:Date.now().toString(),type:'expense',amount:Math.abs(amount),// Make positive for expense\ncategory:'Other',description:'Expense',date:new Date()};}// Determine type based on keywords\nlet type;let description;if(hasIncomeKeyword&&!hasExpenseKeyword){type='income';description='Income';}else if(hasExpenseKeyword&&!hasIncomeKeyword){type='expense';description='Expense';}else if(hasIncomeKeyword&&hasExpenseKeyword){// If both keywords present, use the one that appears first\nconst incomeIndex=Math.min(...incomeKeywords.map(keyword=>cleanMessage.indexOf(keyword)).filter(i=>i!==-1));const expenseIndex=Math.min(...expenseKeywords.map(keyword=>cleanMessage.indexOf(keyword)).filter(i=>i!==-1));if(incomeIndex<expenseIndex){type='income';description='Income';}else{type='expense';description='Expense';}}else{// Default to income if no clear keywords\ntype='income';description='Income';}// Try to extract description from the message\nconst words=cleanMessage.split(/\\s+/);const descriptionWords=words.filter(word=>!incomeKeywords.includes(word)&&!expenseKeywords.includes(word)&&!word.match(/^-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?$/)&&word.length>1);if(descriptionWords.length>0){description=descriptionWords.join(' ').trim();}// Categorize expenses\nlet category=type==='income'?'Income':'Other';if(type==='expense'){const desc=description.toLowerCase();if(desc.includes('food')||desc.includes('restaurant')||desc.includes('grocery')||desc.includes('dining')||desc.includes('lunch')||desc.includes('dinner')){category='Food';}else if(desc.includes('gas')||desc.includes('transport')||desc.includes('uber')||desc.includes('taxi')||desc.includes('fuel')||desc.includes('parking')){category='Transport';}else if(desc.includes('rent')||desc.includes('housing')||desc.includes('mortgage')||desc.includes('utilities')||desc.includes('electric')||desc.includes('water')){category='Housing';}else if(desc.includes('entertainment')||desc.includes('movie')||desc.includes('game')||desc.includes('netflix')||desc.includes('spotify')||desc.includes('subscription')){category='Entertainment';}else if(desc.includes('health')||desc.includes('medical')||desc.includes('doctor')||desc.includes('pharmacy')||desc.includes('insurance')){category='Healthcare';}else if(desc.includes('shopping')||desc.includes('clothes')||desc.includes('clothing')||desc.includes('amazon')||desc.includes('store')){category='Shopping';}else if(desc.includes('education')||desc.includes('school')||desc.includes('course')||desc.includes('book')||desc.includes('tuition')){category='Education';}}console.log('Final result:',{type,amount,category,description});return{id:Date.now().toString(),type,amount,category,description,date:new Date()};};const getAnitaResponse=(userMessage,transaction)=>{if(transaction){if(transaction.type==='income'){const responses=[\"Nice! \\uD83D\\uDCB0 I've added $\".concat(transaction.amount,\" income for \\\"\").concat(transaction.description,\"\\\" to your records. Keep that money flowing! \\uD83D\\uDC85\"),\"Awesome! \\uD83D\\uDC9A $\".concat(transaction.amount,\" income from \\\"\").concat(transaction.description,\"\\\" has been recorded. You're doing great! \\u2728\"),\"Perfect! \\uD83D\\uDCB8 I've logged your $\".concat(transaction.amount,\" income for \\\"\").concat(transaction.description,\"\\\". Keep up the good work! \\uD83D\\uDCAA\"),\"Excellent! \\uD83D\\uDCB0 Your $\".concat(transaction.amount,\" income from \\\"\").concat(transaction.description,\"\\\" is now tracked. Money moves! \\uD83D\\uDE80\")];return responses[Math.floor(Math.random()*responses.length)];}else{const responses=[\"Got it! \\uD83D\\uDCB8 I've recorded $\".concat(transaction.amount,\" expense for \\\"\").concat(transaction.description,\"\\\". Let's keep track of those spending habits! \\uD83D\\uDE09\"),\"Noted! \\uD83D\\uDCB3 $\".concat(transaction.amount,\" spent on \\\"\").concat(transaction.description,\"\\\" has been logged. Stay mindful of your budget! \\uD83D\\uDCAD\"),\"Recorded! \\uD83D\\uDCDD I've added your $\".concat(transaction.amount,\" expense for \\\"\").concat(transaction.description,\"\\\". Keep tracking! \\uD83D\\uDCCA\"),\"Done! \\u2705 $\".concat(transaction.amount,\" expense for \\\"\").concat(transaction.description,\"\\\" is now in your records. Stay on top of it! \\uD83C\\uDFAF\")];return responses[Math.floor(Math.random()*responses.length)];}}const responses=[\"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\",\"What's the financial tea today? ☕ Share your income or expenses with me!\",\"Spill the financial beans! 💅 I'm here to track your money flow\",\"Let's talk money! 💸 Share what you've earned or spent today\",\"What's happening with your wallet? 💳 Tell me about any transactions!\",\"Money talk time! 💰 Share your income or expenses with me\",\"Let's get financial! 📊 Tell me about your money moves today\",\"What's the financial update? 💅 I'm ready to track your transactions!\"];return responses[Math.floor(Math.random()*responses.length)];};const handleSendMessage=async()=>{if(!inputText.trim())return;const transaction=parseTransaction(inputText);console.log('Parsed transaction:',transaction);// Debug log\nconst userMessage={id:Date.now().toString(),text:inputText,sender:'user',timestamp:new Date(),transaction:transaction||undefined};await(onMessageAdd===null||onMessageAdd===void 0?void 0:onMessageAdd(userMessage));// Save transaction to Supabase if one was parsed\nif(transaction&&currentUserId){console.log('Saving transaction to Supabase:',transaction);try{await saveTransaction({user_id:currentUserId,type:transaction.type,amount:transaction.amount,category:transaction.category,description:transaction.description},currentUserId);console.log('Transaction saved successfully to Supabase');// Transaction saved successfully to Supabase - no need to add to local state\n// The dashboard will refresh automatically via real-time subscription\n}catch(error){console.error('Error saving transaction to Supabase:',error);// Still add to local state as fallback if Supabase fails\nonTransactionAdd===null||onTransactionAdd===void 0?void 0:onTransactionAdd(transaction);}}else if(transaction){console.log('No user ID available, adding transaction locally only');onTransactionAdd===null||onTransactionAdd===void 0?void 0:onTransactionAdd(transaction);}else{console.log('No transaction parsed from message:',inputText);}setInputText('');setIsTyping(true);// Simulate ANITA typing\nsetTimeout(async()=>{const anitaResponse={id:(Date.now()+1).toString(),text:getAnitaResponse(inputText,transaction||undefined),sender:'anita',timestamp:new Date()};await(onMessageAdd===null||onMessageAdd===void 0?void 0:onMessageAdd(anitaResponse));setIsTyping(false);},1500);};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSendMessage();}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-interface\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-header\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"main-title\",children:\"ANITA\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[messages.map(message=>/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(message.sender),children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:message.sender==='anita'?/*#__PURE__*/_jsx(Bot,{size:20}):/*#__PURE__*/_jsx(User,{size:20})}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.text}),message.transaction&&/*#__PURE__*/_jsxs(\"div\",{className:\"transaction-info \".concat(message.transaction.type),children:[/*#__PURE__*/_jsxs(\"span\",{className:\"transaction-amount\",children:[message.transaction.type==='income'?'+':'-',\"$\",message.transaction.amount]}),/*#__PURE__*/_jsx(\"span\",{className:\"transaction-desc\",children:message.transaction.description})]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:message.timestamp.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})})]})]},message.id)),isTyping&&/*#__PURE__*/_jsxs(\"div\",{className:\"message anita\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:/*#__PURE__*/_jsx(Bot,{size:20})}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"typing-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})})]}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-input-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:inputText,onChange:e=>setInputText(e.target.value),onKeyPress:handleKeyPress,placeholder:\"Ask ANITA about your finances...\",rows:1,className:\"input-field\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!inputText.trim()||isTyping,className:\"send-button\",children:/*#__PURE__*/_jsx(Send,{size:20})})]})})]});};export default ChatInterface;","map":{"version":3,"names":["React","useState","useRef","useEffect","Send","Bot","User","saveTransaction","jsx","_jsx","jsxs","_jsxs","ChatInterface","_ref","onTransactionAdd","onMessageAdd","messages","currentUserId","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","parseTransaction","message","console","log","cleanMessage","trim","toLowerCase","numberMatch","match","amountStr","replace","amount","parseFloat","isNaN","incomeKeywords","expenseKeywords","hasIncomeKeyword","some","keyword","includes","hasExpenseKeyword","test","id","Date","now","toString","type","Math","abs","category","description","date","startsWith","incomeIndex","min","map","indexOf","filter","i","expenseIndex","words","split","descriptionWords","word","length","join","desc","getAnitaResponse","userMessage","transaction","responses","concat","floor","random","handleSendMessage","text","sender","timestamp","undefined","user_id","error","setTimeout","anitaResponse","handleKeyPress","e","key","shiftKey","preventDefault","className","children","size","toLocaleTimeString","hour","minute","ref","value","onChange","target","onKeyPress","placeholder","rows","onClick","disabled"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Send, Bot, User } from 'lucide-react';\r\nimport { saveTransaction, saveMessage } from '../supabaseClient';\r\nimport './ChatInterface.css';\r\n\r\ninterface Message {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'anita';\r\n  timestamp: Date;\r\n  transaction?: {\r\n    type: 'income' | 'expense';\r\n    amount: number;\r\n    category: string;\r\n    description: string;\r\n  };\r\n}\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  type: 'income' | 'expense';\r\n  amount: number;\r\n  category: string;\r\n  description: string;\r\n  date: Date;\r\n}\r\n\r\ninterface ChatInterfaceProps {\r\n  onTransactionAdd?: (transaction: Transaction) => void;\r\n  onMessageAdd?: (message: Message) => Promise<void>;\r\n  messages: Message[];\r\n  currentUserId?: string | null;\r\n}\r\n\r\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({ onTransactionAdd, onMessageAdd, messages, currentUserId }) => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const parseTransaction = (message: string): Transaction | null => {\r\n    console.log('Parsing message:', message);\r\n    \r\n    // Clean the message\r\n    const cleanMessage = message.trim().toLowerCase();\r\n    \r\n    // Extract number from message (handles $, commas, decimals)\r\n    const numberMatch = cleanMessage.match(/(?:^|\\s)(-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?)(?:\\s|$)/);\r\n    if (!numberMatch) {\r\n      console.log('No number found in message');\r\n      return null;\r\n    }\r\n    \r\n    // Parse the amount\r\n    let amountStr = numberMatch[1].replace(/[$,]/g, ''); // Remove $ and commas\r\n    const amount = parseFloat(amountStr);\r\n    \r\n    if (isNaN(amount)) {\r\n      console.log('Invalid number:', amountStr);\r\n      return null;\r\n    }\r\n    \r\n    console.log('Extracted amount:', amount);\r\n    \r\n    // Determine if it's income or expense based on keywords\r\n    const incomeKeywords = ['income', 'earned', 'made', 'received', 'got', 'deposited', 'added', 'salary', 'wage', 'bonus', 'payment', 'refund', 'rebate', 'plus', 'positive', 'gain'];\r\n    const expenseKeywords = ['spent', 'expense', 'bought', 'paid', 'cost', 'withdrew', 'deducted', 'bill', 'charge', 'purchase', 'minus', 'negative', 'loss', 'debt', 'owe'];\r\n    \r\n    const hasIncomeKeyword = incomeKeywords.some(keyword => cleanMessage.includes(keyword));\r\n    const hasExpenseKeyword = expenseKeywords.some(keyword => cleanMessage.includes(keyword));\r\n    \r\n    // If message is just a number, treat as income by default\r\n    if (!hasIncomeKeyword && !hasExpenseKeyword && /^-?\\d+(?:\\.\\d{2})?$/.test(cleanMessage)) {\r\n      console.log('Standalone number, treating as income');\r\n      return {\r\n        id: Date.now().toString(),\r\n        type: 'income',\r\n        amount: Math.abs(amount), // Ensure positive for income\r\n        category: 'Income',\r\n        description: 'Income',\r\n        date: new Date()\r\n      };\r\n    }\r\n    \r\n    // If message starts with negative number, treat as expense\r\n    if (amount < 0 || cleanMessage.startsWith('-')) {\r\n      console.log('Negative number, treating as expense');\r\n      return {\r\n        id: Date.now().toString(),\r\n        type: 'expense',\r\n        amount: Math.abs(amount), // Make positive for expense\r\n        category: 'Other',\r\n        description: 'Expense',\r\n        date: new Date()\r\n      };\r\n    }\r\n    \r\n    // Determine type based on keywords\r\n    let type: 'income' | 'expense';\r\n    let description: string;\r\n    \r\n    if (hasIncomeKeyword && !hasExpenseKeyword) {\r\n      type = 'income';\r\n      description = 'Income';\r\n    } else if (hasExpenseKeyword && !hasIncomeKeyword) {\r\n      type = 'expense';\r\n      description = 'Expense';\r\n    } else if (hasIncomeKeyword && hasExpenseKeyword) {\r\n      // If both keywords present, use the one that appears first\r\n      const incomeIndex = Math.min(...incomeKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\r\n      const expenseIndex = Math.min(...expenseKeywords.map(keyword => cleanMessage.indexOf(keyword)).filter(i => i !== -1));\r\n      \r\n      if (incomeIndex < expenseIndex) {\r\n        type = 'income';\r\n        description = 'Income';\r\n      } else {\r\n        type = 'expense';\r\n        description = 'Expense';\r\n      }\r\n    } else {\r\n      // Default to income if no clear keywords\r\n      type = 'income';\r\n      description = 'Income';\r\n    }\r\n    \r\n    // Try to extract description from the message\r\n    const words = cleanMessage.split(/\\s+/);\r\n    const descriptionWords = words.filter(word => \r\n      !incomeKeywords.includes(word) && \r\n      !expenseKeywords.includes(word) && \r\n      !word.match(/^-?\\$?\\d+(?:,\\d{3})*(?:\\.\\d{2})?$/) &&\r\n      word.length > 1\r\n    );\r\n    \r\n    if (descriptionWords.length > 0) {\r\n      description = descriptionWords.join(' ').trim();\r\n    }\r\n    \r\n    // Categorize expenses\r\n    let category = type === 'income' ? 'Income' : 'Other';\r\n    if (type === 'expense') {\r\n      const desc = description.toLowerCase();\r\n      if (desc.includes('food') || desc.includes('restaurant') || desc.includes('grocery') || desc.includes('dining') || desc.includes('lunch') || desc.includes('dinner')) {\r\n        category = 'Food';\r\n      } else if (desc.includes('gas') || desc.includes('transport') || desc.includes('uber') || desc.includes('taxi') || desc.includes('fuel') || desc.includes('parking')) {\r\n        category = 'Transport';\r\n      } else if (desc.includes('rent') || desc.includes('housing') || desc.includes('mortgage') || desc.includes('utilities') || desc.includes('electric') || desc.includes('water')) {\r\n        category = 'Housing';\r\n      } else if (desc.includes('entertainment') || desc.includes('movie') || desc.includes('game') || desc.includes('netflix') || desc.includes('spotify') || desc.includes('subscription')) {\r\n        category = 'Entertainment';\r\n      } else if (desc.includes('health') || desc.includes('medical') || desc.includes('doctor') || desc.includes('pharmacy') || desc.includes('insurance')) {\r\n        category = 'Healthcare';\r\n      } else if (desc.includes('shopping') || desc.includes('clothes') || desc.includes('clothing') || desc.includes('amazon') || desc.includes('store')) {\r\n        category = 'Shopping';\r\n      } else if (desc.includes('education') || desc.includes('school') || desc.includes('course') || desc.includes('book') || desc.includes('tuition')) {\r\n        category = 'Education';\r\n      }\r\n    }\r\n    \r\n    console.log('Final result:', { type, amount, category, description });\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      type,\r\n      amount,\r\n      category,\r\n      description,\r\n      date: new Date()\r\n    };\r\n  };\r\n\r\n  const getAnitaResponse = (userMessage: string, transaction?: Transaction): string => {\r\n    if (transaction) {\r\n      if (transaction.type === 'income') {\r\n        const responses = [\r\n          `Nice! 💰 I've added $${transaction.amount} income for \"${transaction.description}\" to your records. Keep that money flowing! 💅`,\r\n          `Awesome! 💚 $${transaction.amount} income from \"${transaction.description}\" has been recorded. You're doing great! ✨`,\r\n          `Perfect! 💸 I've logged your $${transaction.amount} income for \"${transaction.description}\". Keep up the good work! 💪`,\r\n          `Excellent! 💰 Your $${transaction.amount} income from \"${transaction.description}\" is now tracked. Money moves! 🚀`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      } else {\r\n        const responses = [\r\n          `Got it! 💸 I've recorded $${transaction.amount} expense for \"${transaction.description}\". Let's keep track of those spending habits! 😉`,\r\n          `Noted! 💳 $${transaction.amount} spent on \"${transaction.description}\" has been logged. Stay mindful of your budget! 💭`,\r\n          `Recorded! 📝 I've added your $${transaction.amount} expense for \"${transaction.description}\". Keep tracking! 📊`,\r\n          `Done! ✅ $${transaction.amount} expense for \"${transaction.description}\" is now in your records. Stay on top of it! 🎯`\r\n        ];\r\n        return responses[Math.floor(Math.random() * responses.length)];\r\n      }\r\n    }\r\n    \r\n    const responses = [\r\n      \"Tell me about your money moves! 💰 You can say things like 'I spent $50 on groceries' or 'I earned $200 from freelancing'\",\r\n      \"What's the financial tea today? ☕ Share your income or expenses with me!\",\r\n      \"Spill the financial beans! 💅 I'm here to track your money flow\",\r\n      \"Let's talk money! 💸 Share what you've earned or spent today\",\r\n      \"What's happening with your wallet? 💳 Tell me about any transactions!\",\r\n      \"Money talk time! 💰 Share your income or expenses with me\",\r\n      \"Let's get financial! 📊 Tell me about your money moves today\",\r\n      \"What's the financial update? 💅 I'm ready to track your transactions!\"\r\n    ];\r\n    \r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const transaction = parseTransaction(inputText);\r\n    console.log('Parsed transaction:', transaction); // Debug log\r\n    \r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n      transaction: transaction || undefined\r\n    };\r\n\r\n    await onMessageAdd?.(userMessage);\r\n    \r\n    // Save transaction to Supabase if one was parsed\r\n    if (transaction && currentUserId) {\r\n      console.log('Saving transaction to Supabase:', transaction);\r\n      try {\r\n        await saveTransaction({\r\n          user_id: currentUserId,\r\n          type: transaction.type,\r\n          amount: transaction.amount,\r\n          category: transaction.category,\r\n          description: transaction.description\r\n        }, currentUserId);\r\n        \r\n        console.log('Transaction saved successfully to Supabase');\r\n        // Transaction saved successfully to Supabase - no need to add to local state\r\n        // The dashboard will refresh automatically via real-time subscription\r\n      } catch (error) {\r\n        console.error('Error saving transaction to Supabase:', error);\r\n        // Still add to local state as fallback if Supabase fails\r\n        onTransactionAdd?.(transaction);\r\n      }\r\n    } else if (transaction) {\r\n      console.log('No user ID available, adding transaction locally only');\r\n      onTransactionAdd?.(transaction);\r\n    } else {\r\n      console.log('No transaction parsed from message:', inputText);\r\n    }\r\n    \r\n    setInputText('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate ANITA typing\r\n    setTimeout(async () => {\r\n      const anitaResponse: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: getAnitaResponse(inputText, transaction || undefined),\r\n        sender: 'anita',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      await onMessageAdd?.(anitaResponse);\r\n      setIsTyping(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-header\">\r\n        <h1 className=\"main-title\">ANITA</h1>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`message ${message.sender}`}>\r\n            <div className=\"message-avatar\">\r\n              {message.sender === 'anita' ? <Bot size={20} /> : <User size={20} />}\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"message-text\">{message.text}</div>\r\n              {message.transaction && (\r\n                <div className={`transaction-info ${message.transaction.type}`}>\r\n                  <span className=\"transaction-amount\">\r\n                    {message.transaction.type === 'income' ? '+' : '-'}${message.transaction.amount}\r\n                  </span>\r\n                  <span className=\"transaction-desc\">{message.transaction.description}</span>\r\n                </div>\r\n              )}\r\n              <div className=\"message-time\">\r\n                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {isTyping && (\r\n          <div className=\"message anita\">\r\n            <div className=\"message-avatar\">\r\n              <Bot size={20} />\r\n            </div>\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <div className=\"chat-input\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Ask ANITA about your finances...\"\r\n            rows={1}\r\n            className=\"input-field\"\r\n          />\r\n          <button \r\n            onClick={handleSendMessage}\r\n            disabled={!inputText.trim() || isTyping}\r\n            className=\"send-button\"\r\n          >\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}