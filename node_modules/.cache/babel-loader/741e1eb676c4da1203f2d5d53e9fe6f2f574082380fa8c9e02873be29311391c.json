{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzm13\\\\anita-finance-advisor\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatInterface from './components/ChatInterface';\nimport Settings from './components/Settings';\nimport FinancePage from './components/FinancePage';\nimport socketService from './socketService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentView, setCurrentView] = useState('chat');\n  const [transactions, setTransactions] = useState([]);\n  const [messages, setMessages] = useState([{\n    id: '1',\n    text: \"Hey! Any new expenses or incomes today?\",\n    sender: 'anita',\n    timestamp: new Date()\n  }]);\n  const [theme, setTheme] = useState('dark');\n  const [currentUserId, setCurrentUserId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Initialize Socket.IO connection\n  useEffect(() => {\n    const initializeSocket = async () => {\n      try {\n        await socketService.connect();\n        console.log('✅ Socket.IO connected successfully');\n      } catch (error) {\n        console.error('❌ Failed to connect to Socket.IO server:', error);\n        // Fallback to localStorage\n        loadFromLocalStorage();\n      }\n    };\n    initializeSocket();\n\n    // Set up event listeners\n    socketService.onConnectionChange(connected => {\n      setIsConnected(connected);\n      if (connected) {\n        console.log('🔄 Socket.IO reconnected, refreshing data...');\n        socketService.refreshData();\n      }\n    });\n    socketService.onDataRefreshed(data => {\n      console.log('📊 Data refreshed from server:', data);\n      setTransactions(data.transactions || []);\n      setMessages(data.messages || []);\n\n      // Set current user if available\n      if (data.users && data.users.length > 0) {\n        setCurrentUserId(data.users[0].id);\n      }\n    });\n    socketService.onTransactionAdded(transaction => {\n      setTransactions(prev => [...prev, transaction]);\n    });\n    socketService.onTransactionUpdated(transaction => {\n      setTransactions(prev => prev.map(t => t.id === transaction.id ? transaction : t));\n    });\n    socketService.onTransactionDeleted(transactionId => {\n      setTransactions(prev => prev.filter(t => t.id !== transactionId));\n    });\n    socketService.onMessageAdded(message => {\n      setMessages(prev => [...prev, message]);\n    });\n    socketService.onUserUpdated(user => {\n      setCurrentUserId(user.id);\n    });\n    return () => {\n      socketService.disconnect();\n    };\n  }, []);\n\n  // Load data from localStorage as fallback\n  const loadFromLocalStorage = () => {\n    console.log('📱 Loading data from localStorage fallback...');\n\n    // Load theme\n    const savedTheme = localStorage.getItem('anita-theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n\n    // Load transactions\n    const savedTransactions = localStorage.getItem('anita-transactions');\n    if (savedTransactions) {\n      try {\n        const parsed = JSON.parse(savedTransactions);\n        const transactionsWithDates = parsed.map(t => ({\n          ...t,\n          date: new Date(t.date)\n        }));\n        setTransactions(transactionsWithDates);\n        console.log('📱 Loaded transactions from localStorage');\n      } catch (error) {\n        console.error('Error loading transactions from localStorage:', error);\n      }\n    }\n\n    // Load messages\n    const savedMessages = localStorage.getItem('anita-messages');\n    if (savedMessages) {\n      try {\n        const parsed = JSON.parse(savedMessages);\n        const messagesWithDates = parsed.map(m => ({\n          ...m,\n          timestamp: new Date(m.timestamp)\n        }));\n        setMessages(messagesWithDates);\n        console.log('📱 Loaded messages from localStorage');\n      } catch (error) {\n        console.error('Error loading messages from localStorage:', error);\n      }\n    }\n\n    // Create default user\n    const defaultUser = {\n      id: 'default-user',\n      username: 'User',\n      createdAt: new Date()\n    };\n    setCurrentUserId(defaultUser.id);\n  };\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('anita-theme', theme);\n  }, [theme]);\n  const handleTransactionAdd = transaction => {\n    if (isConnected) {\n      // Send to Socket.IO server\n      socketService.addTransaction(transaction);\n    } else {\n      // Fallback to localStorage\n      const newTransactions = [...transactions, transaction];\n      setTransactions(newTransactions);\n      localStorage.setItem('anita-transactions', JSON.stringify(newTransactions));\n      console.log('📱 Transaction saved to localStorage (offline mode)');\n    }\n  };\n  const handleMessageAdd = message => {\n    if (isConnected) {\n      // Send to Socket.IO server\n      socketService.addMessage(message);\n    } else {\n      // Fallback to localStorage\n      const newMessages = [...messages, message];\n      setMessages(newMessages);\n      localStorage.setItem('anita-messages', JSON.stringify(newMessages));\n      console.log('📱 Message saved to localStorage (offline mode)');\n    }\n  };\n  const handleThemeChange = newTheme => {\n    setTheme(newTheme);\n  };\n\n  // Calculate financial summary\n  const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);\n  const totalExpenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);\n  const netBalance = totalIncome - totalExpenses;\n\n  // Get all transactions sorted by date (newest first)\n  const allTransactions = [...transactions].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onViewChange: setCurrentView,\n      currentView: currentView,\n      totalBalance: netBalance,\n      monthlyIncome: totalIncome,\n      monthlyExpenses: totalExpenses,\n      recentTransactions: allTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentView === 'chat' && /*#__PURE__*/_jsxDEV(ChatInterface, {\n        onTransactionAdd: handleTransactionAdd,\n        onMessageAdd: handleMessageAdd,\n        messages: messages,\n        currentUserId: currentUserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), currentView === 'settings' && /*#__PURE__*/_jsxDEV(Settings, {\n        onThemeChange: handleThemeChange,\n        currentTheme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 40\n      }, this), currentView === 'finance' && /*#__PURE__*/_jsxDEV(FinancePage, {\n        transactions: transactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"qef0yHwYT26MkMCIy+PUPVdeC+w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatInterface","Settings","FinancePage","socketService","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","transactions","setTransactions","messages","setMessages","id","text","sender","timestamp","Date","theme","setTheme","currentUserId","setCurrentUserId","isConnected","setIsConnected","initializeSocket","connect","console","log","error","loadFromLocalStorage","onConnectionChange","connected","refreshData","onDataRefreshed","data","users","length","onTransactionAdded","transaction","prev","onTransactionUpdated","map","t","onTransactionDeleted","transactionId","filter","onMessageAdded","message","onUserUpdated","user","disconnect","savedTheme","localStorage","getItem","savedTransactions","parsed","JSON","parse","transactionsWithDates","date","savedMessages","messagesWithDates","m","defaultUser","username","createdAt","document","documentElement","setAttribute","setItem","handleTransactionAdd","addTransaction","newTransactions","stringify","handleMessageAdd","addMessage","newMessages","handleThemeChange","newTheme","totalIncome","type","reduce","sum","amount","totalExpenses","netBalance","allTransactions","sort","a","b","getTime","className","children","onViewChange","totalBalance","monthlyIncome","monthlyExpenses","recentTransactions","fileName","_jsxFileName","lineNumber","columnNumber","onTransactionAdd","onMessageAdd","onThemeChange","currentTheme","_c","$RefreshReg$"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Settings from './components/Settings';\r\nimport FinancePage from './components/FinancePage';\r\nimport socketService, { Transaction, Message, User } from './socketService';\r\nimport './App.css';\r\n\r\ntype ViewType = 'chat' | 'settings' | 'finance';\r\ntype Theme = 'dark' | 'light';\r\n\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<ViewType>('chat');\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      text: \"Hey! Any new expenses or incomes today?\",\r\n      sender: 'anita',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [theme, setTheme] = useState<Theme>('dark');\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  // Initialize Socket.IO connection\r\n  useEffect(() => {\r\n    const initializeSocket = async () => {\r\n      try {\r\n        await socketService.connect();\r\n        console.log('✅ Socket.IO connected successfully');\r\n      } catch (error) {\r\n        console.error('❌ Failed to connect to Socket.IO server:', error);\r\n        // Fallback to localStorage\r\n        loadFromLocalStorage();\r\n      }\r\n    };\r\n\r\n    initializeSocket();\r\n\r\n    // Set up event listeners\r\n    socketService.onConnectionChange((connected) => {\r\n      setIsConnected(connected);\r\n      if (connected) {\r\n        console.log('🔄 Socket.IO reconnected, refreshing data...');\r\n        socketService.refreshData();\r\n      }\r\n    });\r\n\r\n    socketService.onDataRefreshed((data) => {\r\n      console.log('📊 Data refreshed from server:', data);\r\n      setTransactions(data.transactions || []);\r\n      setMessages(data.messages || []);\r\n      \r\n      // Set current user if available\r\n      if (data.users && data.users.length > 0) {\r\n        setCurrentUserId(data.users[0].id);\r\n      }\r\n    });\r\n\r\n    socketService.onTransactionAdded((transaction) => {\r\n      setTransactions(prev => [...prev, transaction]);\r\n    });\r\n\r\n    socketService.onTransactionUpdated((transaction) => {\r\n      setTransactions(prev => \r\n        prev.map(t => t.id === transaction.id ? transaction : t)\r\n      );\r\n    });\r\n\r\n    socketService.onTransactionDeleted((transactionId) => {\r\n      setTransactions(prev => prev.filter(t => t.id !== transactionId));\r\n    });\r\n\r\n    socketService.onMessageAdded((message) => {\r\n      setMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    socketService.onUserUpdated((user) => {\r\n      setCurrentUserId(user.id);\r\n    });\r\n\r\n    return () => {\r\n      socketService.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Load data from localStorage as fallback\r\n  const loadFromLocalStorage = () => {\r\n    console.log('📱 Loading data from localStorage fallback...');\r\n    \r\n    // Load theme\r\n    const savedTheme = localStorage.getItem('anita-theme') as Theme;\r\n    if (savedTheme) {\r\n      setTheme(savedTheme);\r\n    }\r\n\r\n    // Load transactions\r\n    const savedTransactions = localStorage.getItem('anita-transactions');\r\n    if (savedTransactions) {\r\n      try {\r\n        const parsed = JSON.parse(savedTransactions);\r\n        const transactionsWithDates = parsed.map((t: any) => ({\r\n          ...t,\r\n          date: new Date(t.date)\r\n        }));\r\n        setTransactions(transactionsWithDates);\r\n        console.log('📱 Loaded transactions from localStorage');\r\n      } catch (error) {\r\n        console.error('Error loading transactions from localStorage:', error);\r\n      }\r\n    }\r\n\r\n    // Load messages\r\n    const savedMessages = localStorage.getItem('anita-messages');\r\n    if (savedMessages) {\r\n      try {\r\n        const parsed = JSON.parse(savedMessages);\r\n        const messagesWithDates = parsed.map((m: any) => ({\r\n          ...m,\r\n          timestamp: new Date(m.timestamp)\r\n        }));\r\n        setMessages(messagesWithDates);\r\n        console.log('📱 Loaded messages from localStorage');\r\n      } catch (error) {\r\n        console.error('Error loading messages from localStorage:', error);\r\n      }\r\n    }\r\n\r\n    // Create default user\r\n    const defaultUser: User = {\r\n      id: 'default-user',\r\n      username: 'User',\r\n      createdAt: new Date()\r\n    };\r\n    setCurrentUserId(defaultUser.id);\r\n  };\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('anita-theme', theme);\r\n  }, [theme]);\r\n\r\n  const handleTransactionAdd = (transaction: Transaction) => {\r\n    if (isConnected) {\r\n      // Send to Socket.IO server\r\n      socketService.addTransaction(transaction);\r\n    } else {\r\n      // Fallback to localStorage\r\n      const newTransactions = [...transactions, transaction];\r\n      setTransactions(newTransactions);\r\n      localStorage.setItem('anita-transactions', JSON.stringify(newTransactions));\r\n      console.log('📱 Transaction saved to localStorage (offline mode)');\r\n    }\r\n  };\r\n\r\n  const handleMessageAdd = (message: Message) => {\r\n    if (isConnected) {\r\n      // Send to Socket.IO server\r\n      socketService.addMessage(message);\r\n    } else {\r\n      // Fallback to localStorage\r\n      const newMessages = [...messages, message];\r\n      setMessages(newMessages);\r\n      localStorage.setItem('anita-messages', JSON.stringify(newMessages));\r\n      console.log('📱 Message saved to localStorage (offline mode)');\r\n    }\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  // Calculate financial summary\r\n  const totalIncome = transactions\r\n    .filter(t => t.type === 'income')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const totalExpenses = transactions\r\n    .filter(t => t.type === 'expense')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  \r\n  const netBalance = totalIncome - totalExpenses;\r\n  \r\n  // Get all transactions sorted by date (newest first)\r\n  const allTransactions = [...transactions]\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar \r\n        onViewChange={setCurrentView} \r\n        currentView={currentView}\r\n        totalBalance={netBalance}\r\n        monthlyIncome={totalIncome}\r\n        monthlyExpenses={totalExpenses}\r\n        recentTransactions={allTransactions}\r\n      />\r\n      <div className=\"main-content\">\r\n        {currentView === 'chat' && (\r\n          <ChatInterface \r\n            onTransactionAdd={handleTransactionAdd} \r\n            onMessageAdd={handleMessageAdd} \r\n            messages={messages}\r\n            currentUserId={currentUserId}\r\n          />\r\n        )}\r\n        {currentView === 'settings' && <Settings onThemeChange={handleThemeChange} currentTheme={theme} />}\r\n        {currentView === 'finance' && <FinancePage transactions={transactions} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}