{"ast":null,"code":"// ANITA Message Recorder\n// Records all conversations with ANITA to localStorage and optionally to database\n\nclass MessageRecorder {\n  constructor() {\n    this.storageKey = 'anita_messages';\n    this.sessionId = this.generateSessionId();\n    this.messageCount = 0;\n  }\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Record a message to localStorage\n  recordMessage(content, messageType = 'user', metadata = {}) {\n    this.messageCount++;\n    const message = {\n      id: `${this.sessionId}_${this.messageCount}`,\n      content: content,\n      messageType: messageType,\n      // 'user', 'bot', 'system'\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      metadata: {\n        ...metadata,\n        messageCount: this.messageCount\n      }\n    };\n\n    // Get existing messages\n    const existingMessages = this.getAllMessages();\n\n    // Add new message\n    existingMessages.push(message);\n\n    // Save to localStorage\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(existingMessages));\n      console.log('✅ Message recorded:', message);\n      return message;\n    } catch (error) {\n      console.error('❌ Error recording message:', error);\n      return null;\n    }\n  }\n\n  // Get all messages from localStorage\n  getAllMessages() {\n    try {\n      const messages = localStorage.getItem(this.storageKey);\n      return messages ? JSON.parse(messages) : [];\n    } catch (error) {\n      console.error('❌ Error reading messages:', error);\n      return [];\n    }\n  }\n\n  // Get messages for current session\n  getSessionMessages() {\n    const allMessages = this.getAllMessages();\n    return allMessages.filter(msg => msg.sessionId === this.sessionId);\n  }\n\n  // Get messages by type\n  getMessagesByType(messageType) {\n    const allMessages = this.getAllMessages();\n    return allMessages.filter(msg => msg.messageType === messageType);\n  }\n\n  // Clear all messages\n  clearAllMessages() {\n    try {\n      localStorage.removeItem(this.storageKey);\n      console.log('✅ All messages cleared');\n      return true;\n    } catch (error) {\n      console.error('❌ Error clearing messages:', error);\n      return false;\n    }\n  }\n\n  // Clear current session messages\n  clearSessionMessages() {\n    const allMessages = this.getAllMessages();\n    const otherSessionMessages = allMessages.filter(msg => msg.sessionId !== this.sessionId);\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(otherSessionMessages));\n      console.log('✅ Session messages cleared');\n      return true;\n    } catch (error) {\n      console.error('❌ Error clearing session messages:', error);\n      return false;\n    }\n  }\n\n  // Export messages to JSON\n  exportMessages() {\n    const messages = this.getAllMessages();\n    const dataStr = JSON.stringify(messages, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `anita_messages_${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  // Get conversation statistics\n  getStats() {\n    const messages = this.getAllMessages();\n    const sessionMessages = this.getSessionMessages();\n    return {\n      totalMessages: messages.length,\n      sessionMessages: sessionMessages.length,\n      userMessages: this.getMessagesByType('user').length,\n      botMessages: this.getMessagesByType('bot').length,\n      systemMessages: this.getMessagesByType('system').length,\n      currentSessionId: this.sessionId,\n      firstMessage: messages.length > 0 ? messages[0].timestamp : null,\n      lastMessage: messages.length > 0 ? messages[messages.length - 1].timestamp : null\n    };\n  }\n\n  // Display conversation history\n  displayHistory(limit = 10) {\n    const messages = this.getAllMessages();\n    const recentMessages = messages.slice(-limit);\n    console.log('📝 Recent ANITA Conversation History:');\n    console.log('═══════════════════════════════════════════════════════════════');\n    recentMessages.forEach(msg => {\n      const time = new Date(msg.timestamp).toLocaleTimeString();\n      const type = msg.messageType === 'user' ? '👤 You' : msg.messageType === 'bot' ? '🤖 ANITA' : '⚙️ System';\n      console.log(`${type} [${time}]: ${msg.content}`);\n    });\n    console.log('═══════════════════════════════════════════════════════════════');\n  }\n}\n\n// Create global instance\nwindow.anitaMessageRecorder = new MessageRecorder();\n\n// Export for module use\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = MessageRecorder;\n}\n\n// Auto-record when page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('🤖 ANITA Message Recorder loaded');\n  console.log('📋 Session ID:', window.anitaMessageRecorder.sessionId);\n\n  // Record system message about session start\n  window.anitaMessageRecorder.recordMessage('ANITA session started', 'system', {\n    action: 'session_start',\n    page: window.location.pathname\n  });\n});\n\n// Auto-record when page unloads\nwindow.addEventListener('beforeunload', () => {\n  window.anitaMessageRecorder.recordMessage('ANITA session ended', 'system', {\n    action: 'session_end',\n    page: window.location.pathname\n  });\n});","map":{"version":3,"names":["MessageRecorder","constructor","storageKey","sessionId","generateSessionId","messageCount","Date","now","Math","random","toString","substr","recordMessage","content","messageType","metadata","message","id","timestamp","toISOString","existingMessages","getAllMessages","push","localStorage","setItem","JSON","stringify","console","log","error","messages","getItem","parse","getSessionMessages","allMessages","filter","msg","getMessagesByType","clearAllMessages","removeItem","clearSessionMessages","otherSessionMessages","exportMessages","dataStr","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","getStats","sessionMessages","totalMessages","length","userMessages","botMessages","systemMessages","currentSessionId","firstMessage","lastMessage","displayHistory","limit","recentMessages","slice","forEach","time","toLocaleTimeString","window","anitaMessageRecorder","module","exports","addEventListener","action","page","location","pathname"],"sources":["C:/Users/dzm13/anita-finance-advisor/src/MessageRecorder.js"],"sourcesContent":["// ANITA Message Recorder\r\n// Records all conversations with ANITA to localStorage and optionally to database\r\n\r\nclass MessageRecorder {\r\n  constructor() {\r\n    this.storageKey = 'anita_messages';\r\n    this.sessionId = this.generateSessionId();\r\n    this.messageCount = 0;\r\n  }\r\n\r\n  generateSessionId() {\r\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  // Record a message to localStorage\r\n  recordMessage(content, messageType = 'user', metadata = {}) {\r\n    this.messageCount++;\r\n    \r\n    const message = {\r\n      id: `${this.sessionId}_${this.messageCount}`,\r\n      content: content,\r\n      messageType: messageType, // 'user', 'bot', 'system'\r\n      sessionId: this.sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      metadata: {\r\n        ...metadata,\r\n        messageCount: this.messageCount\r\n      }\r\n    };\r\n\r\n    // Get existing messages\r\n    const existingMessages = this.getAllMessages();\r\n    \r\n    // Add new message\r\n    existingMessages.push(message);\r\n    \r\n    // Save to localStorage\r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(existingMessages));\r\n      console.log('✅ Message recorded:', message);\r\n      return message;\r\n    } catch (error) {\r\n      console.error('❌ Error recording message:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Get all messages from localStorage\r\n  getAllMessages() {\r\n    try {\r\n      const messages = localStorage.getItem(this.storageKey);\r\n      return messages ? JSON.parse(messages) : [];\r\n    } catch (error) {\r\n      console.error('❌ Error reading messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get messages for current session\r\n  getSessionMessages() {\r\n    const allMessages = this.getAllMessages();\r\n    return allMessages.filter(msg => msg.sessionId === this.sessionId);\r\n  }\r\n\r\n  // Get messages by type\r\n  getMessagesByType(messageType) {\r\n    const allMessages = this.getAllMessages();\r\n    return allMessages.filter(msg => msg.messageType === messageType);\r\n  }\r\n\r\n  // Clear all messages\r\n  clearAllMessages() {\r\n    try {\r\n      localStorage.removeItem(this.storageKey);\r\n      console.log('✅ All messages cleared');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Error clearing messages:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Clear current session messages\r\n  clearSessionMessages() {\r\n    const allMessages = this.getAllMessages();\r\n    const otherSessionMessages = allMessages.filter(msg => msg.sessionId !== this.sessionId);\r\n    \r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(otherSessionMessages));\r\n      console.log('✅ Session messages cleared');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Error clearing session messages:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Export messages to JSON\r\n  exportMessages() {\r\n    const messages = this.getAllMessages();\r\n    const dataStr = JSON.stringify(messages, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    \r\n    const url = URL.createObjectURL(dataBlob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `anita_messages_${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  // Get conversation statistics\r\n  getStats() {\r\n    const messages = this.getAllMessages();\r\n    const sessionMessages = this.getSessionMessages();\r\n    \r\n    return {\r\n      totalMessages: messages.length,\r\n      sessionMessages: sessionMessages.length,\r\n      userMessages: this.getMessagesByType('user').length,\r\n      botMessages: this.getMessagesByType('bot').length,\r\n      systemMessages: this.getMessagesByType('system').length,\r\n      currentSessionId: this.sessionId,\r\n      firstMessage: messages.length > 0 ? messages[0].timestamp : null,\r\n      lastMessage: messages.length > 0 ? messages[messages.length - 1].timestamp : null\r\n    };\r\n  }\r\n\r\n  // Display conversation history\r\n  displayHistory(limit = 10) {\r\n    const messages = this.getAllMessages();\r\n    const recentMessages = messages.slice(-limit);\r\n    \r\n    console.log('📝 Recent ANITA Conversation History:');\r\n    console.log('═══════════════════════════════════════════════════════════════');\r\n    \r\n    recentMessages.forEach(msg => {\r\n      const time = new Date(msg.timestamp).toLocaleTimeString();\r\n      const type = msg.messageType === 'user' ? '👤 You' : \r\n                   msg.messageType === 'bot' ? '🤖 ANITA' : \r\n                   '⚙️ System';\r\n      \r\n      console.log(`${type} [${time}]: ${msg.content}`);\r\n    });\r\n    \r\n    console.log('═══════════════════════════════════════════════════════════════');\r\n  }\r\n}\r\n\r\n// Create global instance\r\nwindow.anitaMessageRecorder = new MessageRecorder();\r\n\r\n// Export for module use\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = MessageRecorder;\r\n}\r\n\r\n// Auto-record when page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  console.log('🤖 ANITA Message Recorder loaded');\r\n  console.log('📋 Session ID:', window.anitaMessageRecorder.sessionId);\r\n  \r\n  // Record system message about session start\r\n  window.anitaMessageRecorder.recordMessage(\r\n    'ANITA session started', \r\n    'system', \r\n    { action: 'session_start', page: window.location.pathname }\r\n  );\r\n});\r\n\r\n// Auto-record when page unloads\r\nwindow.addEventListener('beforeunload', () => {\r\n  window.anitaMessageRecorder.recordMessage(\r\n    'ANITA session ended', \r\n    'system', \r\n    { action: 'session_end', page: window.location.pathname }\r\n  );\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}